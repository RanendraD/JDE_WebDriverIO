import java.awt.AWTException;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.PointerInfo;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.util.PDFTextStripper;
import java.util.EventObject;

import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import org.apache.xerces.xni.XMLLocator;



import oracle.oats.jagent.exception.FatalJavaAgentException;
import oracle.oats.scripting.modules.basic.api.Arg;
import oracle.oats.scripting.modules.basic.api.BasicErrorRecovery;
import oracle.oats.scripting.modules.basic.api.ErrorRecoveryAction;
import oracle.oats.scripting.modules.basic.api.IteratingVUser;
import oracle.oats.scripting.modules.basic.api.IteratingVUserScript;
import oracle.oats.scripting.modules.basic.api.ScriptService;
import oracle.oats.scripting.modules.basic.api.exceptions.AbstractScriptException;
import oracle.oats.scripting.modules.basic.api.exceptions.ScriptException;
import oracle.oats.scripting.modules.webdom.api.WebErrorRecovery;
import oracle.oats.scripting.modules.webdom.api.elements.DOMDocument;
import oracle.oats.scripting.modules.webdom.api.elements.DOMElement;
import oracle.oats.scripting.modules.webdom.api.elements.DOMFrame;
import oracle.oats.scripting.modules.webdom.api.elements.DOMLink;
import oracle.oats.scripting.modules.webdom.api.elements.DOMSelect;
import oracle.oats.scripting.modules.webdom.api.elements.DOMTable;
import oracle.oats.scripting.modules.webdom.api.elements.DOMText;
import oracle.oats.scripting.modules.webdom.api.elements.DOMTextArea;
import oracle.oats.scripting.modules.webdom.common.api.exception.PlaybackException;
import oracle.oats.scripting.modules.webdom.common.api.exception.WaitForPageTimeoutException;
import oracle.oats.scripting.modules.webdom.common.api.internal.type.DOMAction;
import oracle.oats.scripting.modules.webdom.common.api.internal.type.DOMAction.ActionType;
import oracle.oats.scripting.modules.webdom.api.elements.DOMConfirmDialog;
import oracle.oats.scripting.modules.basic.api.*;
import oracle.oats.scripting.modules.browser.api.*;
import oracle.oats.scripting.modules.browser.api.BrowserSettings.BrowserType;
import oracle.oats.scripting.modules.functionalTest.api.*;
import oracle.oats.scripting.modules.functionalTest.common.api.internal.types.Rect;
import oracle.oats.scripting.modules.jet.api.elements.JETButton;
import oracle.oats.scripting.modules.jet.api.elements.JETChart;
import oracle.oats.scripting.modules.jet.api.elements.JETSelect;
import oracle.oats.scripting.modules.jet.api.elements.JETChart.ChartDataItem;
import oracle.oats.scripting.modules.utilities.api.*;
import oracle.oats.scripting.modules.utilities.api.sql.*;
import oracle.oats.scripting.modules.utilities.api.xml.*;
import oracle.oats.scripting.modules.utilities.api.file.*;
import oracle.oats.scripting.modules.webdom.api.*;
import oracle.oats.utilities.VariantList.simpleStore;
import oracle.oats.scripting.modules.jet.api.*;
import oracle.oats.scripting.modules.adf.api.*;
import oracle.oats.scripting.modules.image.api.*;



@SuppressWarnings({"deprecation","unchecked"})
public class script extends IteratingVUserScript {
	@ScriptService oracle.oats.scripting.modules.utilities.api.UtilitiesService utilities;
	@ScriptService oracle.oats.scripting.modules.browser.api.BrowserService browser;
	@ScriptService oracle.oats.scripting.modules.functionalTest.api.FunctionalTestService ft;
	@ScriptService oracle.oats.scripting.modules.webdom.api.WebDomService web;
	@ScriptService oracle.oats.scripting.modules.datatable.api.DataTableService datatable;
	@ScriptService oracle.oats.scripting.modules.adf.api.ADFService adf;
	@ScriptService oracle.oats.scripting.modules.jet.api.JETService jet;
	
	public static String spaceChar=""+(char)160;
	//public 	String e1BrowserWindow = "/web:window[@title='JD Edwards*']";
	public 	String e1BrowserWindow = "/web:window[@index='0']";
	public 	String e1Document = "/web:document[@name='e1menuAppIframe']";
	public 	String e1Browser = e1BrowserWindow + e1Document;
	public  String sDBBrowserWindow="/web:window[@title='Data Browser*' or @title='Data"+spaceChar+"Browser*']";
	public  String sDBDocument="/web:document[@index='0']";
	public  String sDBBrowser=sDBBrowserWindow+sDBDocument;
	public String xmlBrowser="/web:window[@title='*.xml' or @title='*com.jdedwards.jas.ube*']";
	public  String sTableName =null, UserID;
	public int valCount=0;
	public static String newline = System.getProperty("line.separator");
	private static final String KILL = "taskkill /F /IM "; 
	public static String preTitle="*EnterpriseOne*",sBrowser="ie";
	public static boolean isADF=false,bDB=false,qsFlag=false, isRefreshed=false, isModalForm=false,browserFlag=false,browserSetFlag=false, isGridRowIntoView =false, isGridColIntoView=false;
	public static String docIndex=null;
	public static String[] ieVersion;
	HashMap<String,String> tableNames=new HashMap<String,String>();
	HashMap<String,Integer>colNames=new HashMap<String,Integer>();
	HashMap<String, String> releaseEnvMap=new HashMap<String, String>();
	List<String> gridIds = new ArrayList<String>();
	HashMap<String, String> elementTypeTagMap=new HashMap<String, String>();
	HashMap<String, String> colorName = new HashMap<String, String>();
	boolean isCITRun = false;
	public static Boolean setDocIndex =false;
	@ScriptService oracle.oats.scripting.modules.image.api.ImageService img;
	
	/*********************************************************
	 * @Function: OSPreferences
	 * @Description: This function will set "ReportErrorAndContinue" in Openscript Preferences settings
	 * @author Ravi
	 * @Date: June2013	 
	 * @To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param value : Value to set as Error Recovery action 
	 * 		@Example: ReportErrorAndContinue, Fail, Ignore
	 * @Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void OSPreferences(String value) throws Exception{
		//value="Fail";

		if(isCITRun){
			value="Fail";
			info("OSP from CITRun:Fail");
		}
		getSettings().set("web.BRING_EDGE_TO_FOREGROUND", true);
		getSettings().set("err.amfLT.OPERATION_INVOCATION_ERROR", value);
		getSettings().set("err.amfLT.PLAYBACK_ERROR", value);
		getSettings().set("err.basic.BINARY_DECODING_EXCEPTION", value);
		getSettings().set("err.basic.CHILD_SCRIPT_EXCEPTION",value);
		getSettings().set("err.basic.CREATE_VARIABLE_ERROR",value);
		getSettings().set("err.basic.ENCRYPTION_SERVICE_NOT_INITIALIZED", value);
		getSettings().set("err.basic.FILE_NOT_FOUND", value);
		getSettings().set("err.basic.FUNCTION_EXCEPTION", value);
		getSettings().set("err.basic.GENERAL_SCRIPT_EXCEPTION", value);
		getSettings().set("err.basic.SEGMENT_PARSER_ERROR", value);
		getSettings().set("err.basic.VARIABLE_NOT_FOUND", value);
		getSettings().set("err.formsFT.FORMS_FT_ERROR", value);
		getSettings().set("err.formsFT.STATUSBAR_TEST_ERROR", value);
		getSettings().set("err.formsLT.COMPONENT_NOT_FOUND", value);
		getSettings().set("err.formsLT.CONNECT_ERROR", value);
		getSettings().set("err.formsLT.IO_ERROR", value);
		getSettings().set("err.formsLT.MATCH_ERROR", value);
		getSettings().set("err.formsLT.PLAYBACK_ERROR", value);
		getSettings().set("err.functionalTest.FT_MATCH_ERROR", value);
		getSettings().set("err.functionalTest.OBJECT_TEST_ERROR", value);
		getSettings().set("err.functionalTest.TABLE_TEST_ERROR", value);
		getSettings().set("err.http.DOM_OBJET_NOT_CREATED_EXCEPTION", value);
		getSettings().set("err.http.HTML_PARSING_ERROR", value);
		getSettings().set("err.http.INTERNET_INVALID_URL", value);
		getSettings().set("err.http.INVALID_HTTP_RESPONSE_CODE", value);
		getSettings().set("err.http.KEYSTORE_LOAD_ERROR", value);
		getSettings().set("err.http.MATCH_ERROR", value);
		getSettings().set("err.http.NODE_NOT_FOUND_EXCEPTION", value);
		getSettings().set("err.http.RESPONSE_TIME_ERROR", value);
		getSettings().set("err.http.SOLVE_ERROR", value);
		getSettings().set("err.http.ZERO_LENGTH_DOWNLOAD", value);
		getSettings().set("err.utilities.CSV_LOADING_ERROR", value);
		getSettings().set("err.utilities.SQL_ERROR", value);
		getSettings().set("err.utilities.VALIDATION_ROWCOUNT_ERROR", value);
		getSettings().set("err.utilities.XML_PARSING_ERROR", value);
		getSettings().set("err.webdom.FAIL_TO_PLAYBACK", value);
		getSettings().set("err.webdom.HTML_TEST_ERROR", value);
		getSettings().set("err.webdom.OBJECT_NOT_FOUND_ERROR", value);
		getSettings().set("err.webdom.RESPONSE_TIME_ERROR", value);
		getSettings().set("err.webdom.TITLE_TEST_ERROR", value);
		//getSettings().set("err.webdom.WAIT_FOR_PAGE_TIMEOUT_ERROR", "Ignore");
		setErrorRecovery(WebErrorRecovery.ERR_WAIT_FOR_PAGE_TIMEOUT_ERROR, ErrorRecoveryAction.Ignore);
		getSettings().set("err.webdom.WEBDOM_SOLVE_ERROR", value);
		getSettings().set("err.WEBFTTest.XML_TEST_ERROR", value);
		//setErrorRecovery(WebErrorRecovery.ERR_WEB_PLAYBACK_ERROR, ErrorRecoveryAction.Ignore);
		if(isCITRun){
			getSettings().set("err.webdom.WAIT_FOR_PAGE_TIMEOUT_ERROR", value);
		}
		if(value.equalsIgnoreCase("Fail")){
			setErrorRecovery(WebErrorRecovery.ERR_WEB_PLAYBACK_ERROR, ErrorRecoveryAction.Fail);
		}else{
			setErrorRecovery(WebErrorRecovery.ERR_WEB_PLAYBACK_ERROR, ErrorRecoveryAction.Ignore);
		}
	}
/************************************************************************************************************
	 * Function: initSetBrowser
	 * Description: This function should be called in intialize block for scripts that run oon multiple browsers.
	 *				This function get the browser preference from login.ini and sets openscript to open that particular browser
	 * Created By: Yashin
	 * Date: Aug 2017
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param msg : error message
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void initSetBrowser() throws Exception{
		info("Starting function initSetBrowser");
		String[] arryStrng;		
		/*browser.close();		
		closeMicrosoftApps();
		
			Runtime.getRuntime().exec(KILL+"iexplore.exe");
			Runtime.getRuntime().exec(KILL+"firefox.exe");
			Runtime.getRuntime().exec(KILL+"chrome.exe");
			Runtime.getRuntime().exec(KILL+"MicrosoftEdge.exe");*/
		try{		//Retrieving the browser parameter from login.ini 
			BufferedReader reader = new BufferedReader(new FileReader("C:/login.ini"));
			String line = null;
			line = reader.readLine();
			info("Inside br");
			if (line.equals("[ENVIRONMENT]"))
				{
				info("Inside ini");
				while ((line = reader.readLine()) != null) 
					{
					arryStrng = line.split("=");
					if (arryStrng[0].equalsIgnoreCase("browser")) 
						{
						sBrowser=arryStrng[1];
						info(sBrowser);
						browserFlag=true;
						browserSetFlag=true;
						}
					}
				}
		}catch(Exception e){info("Browser Preference has been left Blank.IE will be used as test browser.");}
		info("browserSetFlag in initsetbroser:"+browserSetFlag);
		if(browserFlag)
			{
			if(sBrowser.equalsIgnoreCase("ie"))
				{
				browser.getSettings().setBrowserType(BrowserType.InternetExplorer);
				info("*******************Internet Explorer************************ ");
				}
			else if(sBrowser.equalsIgnoreCase("chrome"))
				{
				browser.getSettings().setBrowserType(BrowserType.Chrome);
				info("*******************Chrome browser************************ ");
				}
			else if(sBrowser.equalsIgnoreCase("firefox"))
				{
					browser.getSettings().setBrowserType(BrowserType.Firefox);
					info("*******************Firefox browser************************ "); 
				}
			else if(sBrowser.equalsIgnoreCase("Edge"))
				{
				browser.getSettings().setBrowserType(BrowserType.MicrosoftEdge);
				info("*******************Edge browser************************ ");
				}
			info("Browser preference set in Login file.Test Browser set to:"+sBrowser.toUpperCase());
			}
		else
			{
			browser.getSettings().setBrowserType(BrowserType.InternetExplorer);
			info("Browser preference not set in Login file.Test Browser set to IE by default.");
			}
		
		browser.launch();
		
		info("Ending initSetBrowser Function");
		
	}
	/************************************************************************************************************
	 * Function: setBrowser
	 * Description: This function get the browser preference from login.ini and sets openscript to open that particular browser
	 * Created By: Yashin
	 * Date: Aug 2017
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param msg : error message
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void setBrowser() throws Exception{
		info("Starting function setBrowser");
		String[] arryStrng;
			
		browser.close();
		
		closeMicrosoftApps();
		
		info("browserSetFlag in setbroser:"+browserSetFlag);
		
			
			Runtime.getRuntime().exec(KILL+"iexplore.exe");
			Runtime.getRuntime().exec(KILL+"firefox.exe");
			Runtime.getRuntime().exec(KILL+"chrome.exe");
			Runtime.getRuntime().exec(KILL+"MicrosoftEdge.exe");
		try{		//Retrieving the browser parameter from login.ini 
			BufferedReader reader = new BufferedReader(new FileReader("C:/login.ini"));
			String line = null;
			line = reader.readLine();
			if (line.equals("[ENVIRONMENT]"))
				{
				while ((line = reader.readLine()) != null) 
					{
					arryStrng = line.split("=");
					if (arryStrng[0].equalsIgnoreCase("browser")) 
						{
						sBrowser=arryStrng[1];
						info(sBrowser);
						browserFlag=true;
						}
					}
				}
		}catch(Exception e){info("Browser Preference has been left Blank.IE will be used as test browser.");}
		
		if(browserFlag)
			{
			
			if(sBrowser.equalsIgnoreCase("ie"))
				{
				browser.getSettings().setBrowserType(BrowserType.InternetExplorer);
				}
			else if(sBrowser.equalsIgnoreCase("chrome"))
				{
				browser.getSettings().setBrowserType(BrowserType.Chrome);
				}
			else if(sBrowser.equalsIgnoreCase("firefox"))
				{
				browser.getSettings().setBrowserType(BrowserType.Firefox);
				}
			else if(sBrowser.equalsIgnoreCase("Edge"))
			{
				browser.getSettings().setBrowserType(BrowserType.MicrosoftEdge);
			}
			info("Browser preference set in Login file.Test Browser set to:"+sBrowser.toUpperCase());
			}
		else
			{
			browser.getSettings().setBrowserType(BrowserType.InternetExplorer);
			info("Browser preference not set in Login file.Test Browser set to IE by default.");
			}
			browser.launch();
	
		info("Ending SetBrowser Function");
		
	}
	/************************************************************************************************************
	 * Function: testFailure
	 * Description: This function will log the failure and continue execution
	 * Created By: Sravan
	 * Date: Jan 2011
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param msg : error message
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void testFailure(String msg) throws Exception{
		info("Starting test failure");
		if(isCITRun){
			fail(msg);
			browser.close();}
		else
		{	
			this.getSettings().set("err.basic.FUNCTION_EXCEPTION", "ReportErrorAndContinue");
			reportFailure(msg);
			this.getSettings().set("err.basic.FUNCTION_EXCEPTION", "Fail");
		}
		info("Ending test failure");
	}

	/************************************************************************************************************
	 * Function: validateHeaderTextById
	 * Description: Used to enter data in a text field by passing its id(HTML Property) as identifying property
	 *************************************************************************************************************/
	public void validateHeaderTextById(@Arg("id")String id,@Arg("isEditable")String isEditable, @Arg("fldName")String fldName,@Arg("value")String sVal)throws Exception {
		validateHeaderText(id,isEditable,fldName,sVal);
	}

	/************************************************************************************************************
	 * Function: validateHeaderTextByName
	 * Description: Used to enter data in a text field by passing its name(HTML Property) as identifying property
	 *************************************************************************************************************/
	public void validateHeaderTextByName(@Arg("name")String name,@Arg("isEditable")String isEditable, @Arg("fldName")String fldName,@Arg("value")String sVal)throws Exception {
		String modName="name="+name;
		validateHeaderText(modName,isEditable,fldName,sVal);
	}


	/************************************************************************************************************
	 * @Function: validateHeaderText
	 * @Description: Used to Validate data in web fields (editable as well as uneditable) present in 
	 *                      the header part on the basis of id
	 * @author : Sravan
	 * Date: April 2012
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *          @param id : HTML id of the text field 
	 *          @param isEditable : is the field editable i.e Y/N
	 *          @param fldName : Name/label of the text field
	 *          @param sVal :  Expected value
	 * Note: Following Attributes are present for input_text : class, id, name, value
	 * Returns: 
	 *          @return Nil
	 * **********************************************************************************************************
	 */
	public void validateHeaderText (String id,String isEditable, String fldName,String sVal) throws Exception{
		checkFrame();
		info("Starting:Function validateHeaderText ");
		if(docIndex==null){
			getDocIndex();
		} 
		String objVal;
		String htmlId = null;
		String sVal1;
		String attr="id";

		if(id.contains("name="))
		{
			id=id.split("=")[1];
			attr="name";
		}
		else
		{
			try
			{
				int index=Integer.parseInt(id);
				attr="index";
			}
			catch(NumberFormatException n)
			{
				attr="id";
			}
		}


		DOMText txt=null;
		sVal1=sVal.trim();
		boolean isPresent = false;
		String bro="";
		if(((attr.equals("id"))||(attr.equals("name")))&&(isModalForm==false)&&(isADF==false)){
			bro="/";
		}else{
			bro=e1Browser;
		}

		isPresent= web.exists(bro+"/web:input_text[@"+attr+"='"+id+"']", 5);

		if (isPresent==true)
		{
			txt=web.textBox(bro+"/web:input_text[@"+attr+"='"+id+"']");
			if(!attr.equals("id"))
			{
				if(attr=="name")
					htmlId=txt.getAttribute("name");
				else
					htmlId=txt.getAttribute("id");
			}
			else 
			{
				htmlId=id;
			}
			info(attr+" for field "+fldName+" is "+htmlId);
			/*if ((htmlId.startsWith("C0_"))||(htmlId.startsWith("PO"))||(htmlId.startsWith("r"))){//PO for Procession options page
                       isPresent=true;
                 }else{
                       isPresent=false;
                 }*/
		}
		if (isPresent==true){               
			//Validating the text once the field type is checked

			/*objVal=txt.getAttribute("value");
			if (objVal ==null) {
				objVal="";
			}*/
			objVal=txt.getAttribute("value");info("objVal:::"+objVal);
			try{ if ((browser.getBrowser() instanceof ChromeBrowser)||(browser.getBrowser() instanceof FireFoxBrowser) || (browser.getBrowser() instanceof MicrosoftEdgeBrowser)){
				DOMDocument document = web.document(e1Browser);
				String curVal[]=null;


				document.executeJavaScript("function getCurrentValue(){return document.getElementById('"+htmlId+"').value;}");
				curVal = web.document(e1Browser).executeJsFunction("getCurrentValue");   
				info("current value :"+curVal[0]);
				//objVal="";
				objVal=curVal[0];
			}
			else{
				if(objVal==null){
					objVal="";
				}
			}}catch(Exception e){info("exception caught");}
			info("objVal outside:::"+objVal);	
			if((objVal.startsWith("-")) || (objVal.endsWith("-"))){
				if( (sVal1.startsWith("-"))||(sVal1.endsWith("-"))){
					sVal1=sVal1.replace("-", "");
					objVal=objVal.replace("-", "");
				}
			}
			try{

				double d1=Double.parseDouble(objVal);
				double d2=Double.parseDouble(sVal1);
				objVal=Double.toString(d1);
				sVal1=Double.toString(d2);
			}
			catch(NumberFormatException e){                                     
			}
			
			if(areDatesEqual(sVal1, objVal.trim()).equalsIgnoreCase("false"))
			{
			if (objVal.trim().equalsIgnoreCase(sVal1))
			{
				info("  PASSED  validateHeaderText  Text "+sVal+" is seen in the web edit "+fldName+" with "+attr+" "+id+"");
			}
			else 
			{
				OSPreferences("ReportErrorAndContinue");
				info("overriding CIT Preferrences");
				CapturePage();
				reportFailure("validateHeaderText : Expected value to be seen in web edit "+fldName+" was "+sVal+", however the value seen in the web edit is "+objVal);
				if(isCITRun)
					OSPreferences("fail");
			}
			}
			else
			{
				if(areDatesEqual(sVal1, objVal.trim()).equalsIgnoreCase("0"))
				{
					info("  PASSED  validateHeaderText  Text "+sVal+" is seen in the web edit "+fldName+" with "+attr+" "+id+"");
				}
				else 
				{
					OSPreferences("ReportErrorAndContinue");
					info("overriding CIT Preferrences");
					CapturePage();
					reportFailure("validateHeaderText : Expected value to be seen in web edit "+fldName+" was "+sVal+", however the value seen in the web edit is "+objVal);
					if(isCITRun)
						OSPreferences("fail");
				}
			}
			

		}
		else 
		{     
			CapturePage();
			testFailure("ERROR validateHeaderText failed: The field "+fldName+" with "+attr+"  "+id+", at which user is trying to validate text "+sVal+", is not present on the displayed page");
		}   
		valCount=valCount+1;
		info("Finished:Function validateHeaderText "); 
	}


	/************************************************************************************************************
	 * Function: outputHeaderTextById
	 * Description: Used to capture data from a text field by passing its id(HTML Property) as identifying property
	 *************************************************************************************************************/
	public void outputHeaderTextById(@Arg("id") String id,@Arg("IsEditable") String isEditable,@Arg("sFldName")  String sFldName)throws Exception {

		outputHeaderText(id,isEditable,sFldName);
	}


	/************************************************************************************************************
	 * Function: outputHeaderTextByName
	 * Description: Used to capture data from a text field by passing its name(HTML Property) as identifying property
	 *************************************************************************************************************/
	public void outputHeaderTextByName(@Arg("name") String name,@Arg("IsEditable") String isEditable,@Arg("sFldName")  String sFldName)throws Exception {
		String modName="name="+name;
		outputHeaderText(modName,isEditable,sFldName);
	}


	/************************************************************************************************************
	 * Function: outputHeaderText
	 * Description: Used to retrieve data in web fields (editable as well as uneditable) present in the 
	 *                      header part on the basis of index
	 * Created By: Sravan (Added datatable related code)
	 * Date: April 2012
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *          @param id : HTML id of the text field 
	 *          @param isEditable : is the field editable i.e Y/N
	 *          @param fldName : Name/label of the text field
	 * Returns: 
	 *          @return Nil
	 * **********************************************************************************************************
	 */
	public String outputHeaderText (@Arg("id") String id,@Arg("IsEditable") String isEditable,@Arg("sFldName")  String sFldName) throws Exception{
		checkFrame();
		String sFieldVal ="", htmlId = null;
		if(docIndex==null){
			getDocIndex();
		}
		//info("In outputHeaderText function");
		DOMText txt=null;
		String attr="id";
		boolean isPresent = false;
		if(id.contains("name="))
		{
			id=id.split("=")[1];
			attr="name";
		}
		else
		{
			try
			{
				int index=Integer.parseInt(id);
				attr="index";
			}
			catch(NumberFormatException n)
			{
				attr="id";
			}
		}
		//web.window(e1BrowserWindow).refresh();
		//Thread.sleep(15000);
		String bro="";
		if(((attr.equals("id"))||(attr.equals("name")))&&(isModalForm==false)&&(isADF==false)){
			bro="/";
		}else{
			bro=e1Browser;
		}

		isPresent= web.exists(bro+"/web:input_text[@"+attr+"='"+id+"']", 5);

		if (isPresent==true){

			txt=web.textBox(bro+"/web:input_text[@"+attr+"='"+id+"']");
			if(!attr.equals("id"))
			{
				if(attr.equalsIgnoreCase("name"))
					htmlId=txt.getAttribute("name");
				else
					htmlId=txt.getAttribute("id");
			}
			else 
			{
				htmlId=id;
			}
			info(attr+" for field "+sFldName+" is "+htmlId);

		}
		if (isPresent==true){


			//capturing the text
			sFieldVal=txt.getAttribute("value");
			if (sFieldVal == null) {
				sFieldVal="";
			}
			info("Captured value for the field "+sFldName+" = "+sFieldVal);

		} else {                            
			CapturePage();
			testFailure("  ERROR The field with "+attr+"  "+id+", at which user is trying to get the value, for the field "+sFldName+" is not present on the displayed page");

		}
		sFldName=sFldName.replaceAll(" ", "");
		int appender=checkColumnExists(sFldName);
		String newTempFld=sFldName;
		if(appender!=0){              
			newTempFld=sFldName+appender;
		}     

		datatable.getGlobalDatatable().addColumn("Global",newTempFld.trim(),0);
		datatable.getGlobalDatatable().setValue("Global", 0, newTempFld.trim(),sFieldVal);
		return newTempFld.trim();
	}

	/************************************************************************************************************
	 * Function: validateWarning
	 * Description: This function validates whether the specified warning message is displayed in yellow color
	 * Created By: M R Shafiquddin Ahmed
	 * Modified BY: Sravan
	 * Date: July 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param warnMessage : the text of the warning message to be validated
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void validateWarning(String warnMessage) throws Exception{
		validateWarningByIndex(0, warnMessage);
	}

	/************************************************************************************************************
	 * Function: validateWarningByIndex
	 * Description: This function validates whether the specified warning message text with given index is displayed 
	 * Created By: Sravan
	 * Date: May 2013
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param warnMessage : the text of the error message to be validated
	 * 		@param index: Index of the error message
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void validateWarningByIndex(int index,String warnMessage) throws Exception{
		info("Starting:Function validateWarningByIndex ");
		checkFrame();
		if(docIndex==null){
			getDocIndex();
		}
		String bro;
		if(isModalForm==true){
			bro=e1Browser;
		}else{
			bro="/";
		}
		if (web.exists(bro+"/web:img[@alt='Warning*' and @id='WIDGETID*']["+index+"]",10)) {
			String errMessage1=warnMessage.replaceAll("'", "&apos;");
			if (web.exists(bro+"/web:a[@text='"+ errMessage1 +"*']["+index+"]",10)){// or @href='javascript:inyfeHandler.toggleDescription*'
				info("PASSED: Warning '" + warnMessage + "' found.");
				beginStep("[validateWarningByIndex]: PASSED: Warning '" + warnMessage + "' with index "+index+" found.");
				{
					getStepResult().isPassed();
				}endStep();
			} else {
				getLogger().error("FAILED: Warning '" + warnMessage + "' with index "+index+" not found.");    
				web.window(e1BrowserWindow).capturePage();
				beginStep("[validateWarningByIndex]  Failed (Warning not Found)");
				{
					testFailure("The Expected Warning '" + warnMessage + "' with index "+index+" not found.");
				}endStep();
			}
		}
		else  {
			getLogger().error("FAILED: No Warning in the page.");
			web.window(e1BrowserWindow).capturePage();
			beginStep("[validateWarningByIndex]  Failed (No Warning in the page)");
			{
				testFailure("There are No Warning in the page.");
			}endStep();
		}
		valCount=valCount+1;
		info("Finished:Function validateWarningByIndex ");
	}
	/************************************************************************************************************
	 * Function: validateElementState
	 * Description: This function is used to validate the state (enabled/disabled) of an element if it is visible on the page
	 * Created By: Ritu Rani
	 * Date: jan 2019
	 * Modified By: 
	 * To be incorporated: Nil 
	 * InputParameters:
	 * @param sElementType :Type of element (image, button, icon)
	 * @param sAttributeName : A unique attribute to identify the element. (like id, name, alt etc)
	 * @param sAttributeValue: Avlue of that attribute
	 * @param sElementName :  It is the name of element which appears on the page. (OK, Cancel)
	 * @param Enabled : true/false(true for enabled, false for disabled)
	 * @return Nil 
	 * Example: 
	 * validateElementState("image","alt","About E1Page","About",true)//To check if element of type image having an atrribute 'alt' with value 'About E1Page' is displayed and enabled on the page
	 * validateElementState("toolbarimage", "alt", "Find (Ctrl+Alt+I)", "find", true)//To check  that element of element of type toolbarimage is displayed and enabled on the page
	 * validateElementState("text", "name", "E1PprodCode X", "Product Code",true)//To check that input field (Header text) is displayed and enabled on the page
	 * validateElementState("button","id","C0_11","OK",false)//To check that abutton having id=C0_11 is displayed and disabled on the page
	 
	 *         ****************************************
	 */
	 public void validateElementState(@Arg("Type")String sElementType, @Arg("Attribute Name")String sAttributeName, @Arg("Attribute Value")String sAttributeValue, @Arg("Element Name")String sElementName, @Arg("Enabled")boolean Enabled) throws Exception{
		 info("Starting:Function validateElementState");		
		 incrementValidationCount(1);
		 checkFrame();
		 String bro="";
		 if(isADF||isModalForm)
			 bro=e1Browser;
		 else
			 bro="/";

		 String elementType="";		
		 sElementType=sElementType.trim();
		 sAttributeName=sAttributeName.trim();
		 sAttributeValue=sAttributeValue.trim();
		 sElementName=sElementName.trim();
		 DOMElement ele= null;
		 if(sAttributeName.equalsIgnoreCase("xpath")){
			 ele = web.element(sAttributeValue);
		 }else{
			 elementType=getElementTag(sElementType);		
			 //if element is an image, checking for visibility
			 info(bro+"/web:"+elementType+"[@"+sAttributeName+"='"+sAttributeValue+"']");
			 ele=web.element(bro+"/web:"+elementType+"[@"+sAttributeName+"='"+sAttributeValue+"']");	
		 }
		 if(ele.exists())
		 {	
			 DOMElement pEle=ele;
			 String sTag="",isHidden="",isVisible="";
			 int i=0;
			 while(pEle!=null)
			 {
				 isVisible=pEle.getAttribute("style");
				 isVisible=isVisible.replaceAll(" ", "");	
				
				 if((isVisible!=null&&isVisible.contains("display=\"none\""))||(isVisible!=null&&isVisible.contains("display:none")))
				 {
					     CapturePage();
					     testFailure("validateElementState Failed:"+sElementName+" "+sElementType+" with "+sAttributeName+" "+ sAttributeValue+" not found on page");
					     return; 
				 }
				 sTag=pEle.getTag();
				 if(sElementType.equalsIgnoreCase("toolbarImage")){					
					 if(sTag!=null&&sTag.equalsIgnoreCase("td"))
					 {	break;
					 }
					 else{
						 pEle=pEle.getParent();
					 }
				 }

				 if(sTag!=null&&sTag.equalsIgnoreCase("div"))
				 {	
					 break;
				 }
				 else
					 pEle=pEle.getParent();				
			 }
			 String isDisabled = null;
			 String readonly = null;
			 String src, enabImg=null;
			 if(elementType.equalsIgnoreCase("img")){
				 src = ele.getAttribute("src");
				 if((src.contains("ena.png"))||(src.contains("ena.gif"))||(src.contains("ena.bmp"))||(src.contains("BLAST.gif"))||(src.contains("ena.jpeg"))){
					 enabImg = "true";
					 isDisabled = "false";
				 }
				 else if((src.contains("dis.png"))||(src.contains("dis.gif"))||(src.contains("dis.bmp"))||(src.contains("dis.jpeg"))){
					 enabImg = "false";
					 isDisabled = "true";
				 }
				 else{
					 CapturePage();
					 testFailure("validateElementState Failed: Unable to determine state of image");
				 }
			 }
			 else{

				 isDisabled=ele.getAttribute("disabled");
				 if(isDisabled == null){
					 isDisabled = "false";
				 }
				 readonly=ele.getAttribute("readonly");
				 String str = null;
				 if(sBrowser.equalsIgnoreCase("chrome") || sBrowser.equalsIgnoreCase("firefox")){    
					 String id = ele.getAttribute("id");
					 info("id : "+id);
					 //if id is present for particular element than directly get the read only property throught id else traverse through all the element; 
					 if(id !=null && (!(id.equals("")))){
						 DOMDocument document = web.document(e1Browser);
						 document.executeJavaScript("function checkReadonly(){" 
							 +"var flag = false;"
							 +"var checkReadOnly;"
							 +"var ele = document.getElementById('"+id+"');"
							 +"checkReadOnly = ele.hasAttribute('readonly');"
							 +"if(checkReadOnly == true ){"
							 +"flag = true;"
							 +"}"
							 +"return flag;}");
						 String[] status = web.document(e1Browser).executeJsFunction("checkReadonly");                                                     
						 //info("status[0] : "+status[0]);
						 if(status[0].equals("true")){
							 readonly = "true";
						 }
						 else{
							 readonly = status[0];
						 }
					 }else{
						 DOMDocument document = web.document(e1Browser);
						 document.executeJavaScript("function checkReadonlyIfIdNotPresent(){"
							 +"var x = document.getElementsByTagName('"+sElementType+"');"
							 +"var flag = false;"
							 +"var checkReadOnly;"
							 +"for(var i = 0; i < x.length; i++){"
							 +"var ele = document.getElementsByTagName('"+sElementType+"')[i];"
							 +" if(ele.matches('["+sAttributeName+"=\""+sAttributeValue+"\"]') == true){"
							 +"checkReadOnly = ele.hasAttribute('readonly');"
							 +"if(checkReadOnly == true ){"
							 +"flag = true;"
							 +"}"
							 +"break;"
							 +"}}"
							 +"return flag;"
							 +"}");
						 String[] status = web.document(e1Browser).executeJsFunction("checkReadonlyIfIdNotPresent");                                                     
						 if(status[0].equals("true")){
							 readonly = "true";
						 }else{
							 readonly = status[0];
						 }

					 }
				 }
				 info("Captured disable and readonly property values"+ isDisabled+"  "+readonly);
			 }
			 if (((enabImg!=null)&&(enabImg.equalsIgnoreCase("true")))||((isDisabled.equalsIgnoreCase("false"))&&(readonly==null||readonly.equalsIgnoreCase("false"))))
			 {	
				 if(Enabled)
				 {
					 info("validateElementState Passed: Element \'"+sElementName+" "+sElementType+" with "+sAttributeName+" "+ sAttributeValue+" is enabled");
				 }
				 else
				 {
					 CapturePage();                      
					 testFailure("validateElementState Failed: Element \'"+sElementName+" "+sElementType+" with "+sAttributeName+" "+ sAttributeValue+" is enabled");   
				 }
			 }
			 else if(((enabImg!=null)&&(enabImg.equalsIgnoreCase("false")))||((isDisabled.equalsIgnoreCase("true"))||(readonly.equalsIgnoreCase("true"))))
			 {
				 if(Enabled)
				 {
					 CapturePage();                      
					 testFailure("validateElementState Failed: Element \'"+sElementName+" "+sElementType+" with "+sAttributeName+" "+ sAttributeValue+" is disabled");

				 }
				 else
				 {
					 info("validateElementState Passed: Element \'"+sElementName+" "+sElementType+" with "+sAttributeName+" "+ sAttributeValue+" is disabled");
				 }
			 }
		 }else{
			 CapturePage();
			 testFailure("validateElementState Failed: Element \'"+sElementName+" "+sElementType+" with "+sAttributeName+" "+ sAttributeValue+"  is NOT Found");
			 return;
		 }	
	 }

	
	/************************************************************************************************************
	 * Function: validatesElementExist
	 * Description: This function is used to validate existence of any element on the page
	 * Created By: Yashin BIdar
	 * Date: Sep 2016 
	 * Modified By: 
	 * To be incorporated: Nil 
	 * InputParameters:
	 * @param sElementType :Type of element (image, button, icon)
	 * @param sAttributeName : A unique attribute to identify the element. (like id, name, alt etc)
	 * @param sAttributeValue: Avlue of that attribute
	 * @param sElementName :  It is the name of element which appears on the page. (OK, Cancel)
	 * @param isExist : true/false(true for presence, false for absence)
	 * @return Nil 
	 * Example: 
	 * validateElementExists("image","alt","About E1Page","About",tru)//To check for presence of element of type image having an atrribute 'alt' with value 'About E1Page' and When mouse over it 'About' Appears
	 * validateElementExists("toolbarimage", "alt", "Find (Ctrl+Alt+I)", "find", true)//To check for presence of element of type toolbarimage
	 * validateElementExists("text", "name", "E1PprodCode X", "Product Code",true)//To check for presence of input filed (Header text)
	 * validateElementExists("button","id","C0_11","OK",false)//To check for absence of abutton having id=C0_11
	 * validateElementExists("hyperlink","text","Blanks Invalid","Go To Error",false)//To check for absence of hyperlink having text=Blanks Invalid
	 * validateElementExists("image","xpath","/web:window[@index='0' or @title='JD Edwards']/web:document[@index='10']/web:img[@alt='Close' or @id='Close_Prompt' ]","Close",true)
	 *         ****************************************
	 */
	public void validateElementExists(@Arg("Type")String sElementType, @Arg("Attribute Name")String sAttributeName, @Arg("Attribute Value")String sAttributeValue, @Arg("Element Name")String sElementName, @Arg("isExist")boolean isExist) throws Exception {
		info("Starting:Function validateElementExists");		
		incrementValidationCount(1);
		checkFrame();
		String bro="";
		if(isADF||isModalForm||!(isExist))
			bro=e1Browser;
		else
			bro="/";

		String elementType="";		
		sElementType=sElementType.trim();
		sAttributeName=sAttributeName.trim();
		sAttributeValue=sAttributeValue.trim();
		sElementName=sElementName.trim();
		DOMElement ele= null;
		if(sAttributeName.equalsIgnoreCase("xpath")){
		ele = web.element(sAttributeValue);
		}else{
		elementType=getElementTag(sElementType);		
		//if element is an image, checking for visibility
		ele=web.element(bro+"/web:"+elementType+"[@"+sAttributeName+"='"+sAttributeValue+"']");	
		}
		if(ele.exists())
		{	
			DOMElement pEle=ele;
			String sTag="",isHidden="",isVisible="";
			int i=0;
			while(pEle!=null)
			{
				isVisible=pEle.getAttribute("style");
				isVisible=isVisible.replaceAll(" ", "");			
				if((isVisible!=null&&isVisible.contains("display=\"none\""))||(isVisible!=null&&isVisible.contains("display:none")))
				{
					if(!(isExist))
					{
						info("validateElementExists Passed:"+sElementName+" "+sElementType+" with "+sAttributeName+" "+ sAttributeValue+" not found on page");
					}
					else
					{
						CapturePage();
						testFailure("validateElementExists Failed:"+sElementName+" "+sElementType+" with "+sAttributeName+" "+ sAttributeValue+" not found on page");
					}
					return;
				}
				sTag=pEle.getTag();
				if(sElementType.equalsIgnoreCase("toolbarImage")){					
					if(sTag!=null&&sTag.equalsIgnoreCase("td"))
					{	
						break;
					}
					else{
						pEle=pEle.getParent();
					}
				}
								
				if(sTag!=null&&sTag.equalsIgnoreCase("div"))
				{	
					break;
				}
				else if(sTag!=null&&sTag.equalsIgnoreCase("body"))//this else added by sunil on 11.2.19
                {     
                      break;
                }

				else
					pEle=pEle.getParent();				
			}

		}	

		if((ele!=null) && (ele.exists()))
		{
			if(isExist)
			{
				info("validateElementExists Passed:"+sElementName+" "+sElementType+" with "+sAttributeName+" "+ sAttributeValue+" found on page");
			}
			else
			{
				CapturePage();
				testFailure("validateElementExists Failed:"+sElementName+" "+sElementType+" with "+sAttributeName+" "+ sAttributeValue+" found on page");
			}
		}
		else
		{
			if(!(isExist))
			{
				info("validateElementExists Passed:"+sElementName+" "+sElementType+" with "+sAttributeName+" "+ sAttributeValue+" not found on page");
			}
			else
			{
				CapturePage();
				testFailure("validateElementExists Failed:"+sElementName+" "+sElementType+" with "+sAttributeName+" "+ sAttributeValue+" not found on page");
			}
		}

	}

	/************************************************************************************************************
	 * Function: isElementExist
	 * Description: This function check for existence of any element on the page and return a boolean value
	 * Created By: Yashin Bidar
	 * Date: Sep 2016 
	 * To be incorporated: Nil 
	 * InputParameters:
	 * @param sElementType :Type of element (image,textfield,button,label,hyperlink,weblist,checkbox,radiobutton)
	 * @param sAttributeName : A unique attribute to identify the element. (like id, name, alt etc)
	 * @param sAttributeValue: Avlue of that attribute
	 * @param sElementName :  It is the name of element which appears on the page. (OK, Cancel)
	 * @return boolean true or false 
	 * Example: 
	 * isElementExist("image","alt","About E1Page","About")//To check for element of type image having an atrribute 'alt' with value 'About E1Page' 
	 * isElementExist("inputtext", "name", "E1PprodCode X", "Product Code")//To  check for  input field (Header text)
	 * isElementExist("inputbutton","id","C0_11","OK")//To  check for  a button having id=C0_11
	 * isElementExist("hyperlink","text","Blanks Invalid","Go To Error")//To check for  hyperlink having text=Blanks Invalid
	 *         ****************************************
	 */
	public boolean isElementExist(@Arg("Type")String sElementType, @Arg("Attribute Name")String sAttributeName, @Arg("Attribute Value")String sAttributeValue, @Arg("Element Name")String sElementName) throws Exception {
		info("Starting:Function isElementExists ");
		incrementValidationCount(1);
		checkFrame();
		String bro="";
		if(isADF||isModalForm)
			bro=e1Browser;
		else
			bro="/";

		String elementType="";
		sElementType=sElementType.trim();
		elementType=getElementTag(sElementType);

		sAttributeName=sAttributeName.trim();
		sAttributeValue=sAttributeValue.trim();
		sElementName=sElementName.trim();

		info("Path="+(bro+"/web:"+elementType+"[@"+sAttributeName+"='"+sAttributeValue+"']")); 
		DOMElement ele=web.element(bro+"/web:"+elementType+"[@"+sAttributeName+"='"+sAttributeValue+"']");

		if(ele.exists())
		{	
			DOMElement pEle=ele;
			String sTag="",isHidden="",isVisible="";
			int i=0;
			while(pEle!=null)
			{
				isVisible=pEle.getAttribute("style");
				isVisible=isVisible.replaceAll(" ", "");
				if(isVisible!=null&&isVisible.contains("display:none"))
				{
					return false;
				}
				sTag=pEle.getTag();
				if(sTag!=null&&sTag.equalsIgnoreCase("div"))
				{	
					break;
				}
				else
					pEle=pEle.getParent();
			}

		}

		if((ele!=null) && (ele.exists()))
		{
			info(sElementName+" "+sElementType+" with "+sAttributeName+" "+ sAttributeValue+" found on page");
			return true;
		}
		else
		{
			info(sElementName+" "+sElementType+" with "+sAttributeName+" "+ sAttributeValue+" not found on page");
			return false;
		}

	}

	public String getElementTag(String sElementType) throws Exception {
		String sTag=null;
		if(elementTypeTagMap==null || elementTypeTagMap.size()==0){
			elementTypeTagMap.put("image", "img");
			elementTypeTagMap.put("toolbarimage", "img");
			elementTypeTagMap.put("text", "input_text");
			elementTypeTagMap.put("textfield", "input_text");
			elementTypeTagMap.put("button", "input_button");
			elementTypeTagMap.put("Label", "label");
			elementTypeTagMap.put("link", "a");
			elementTypeTagMap.put("hyperlink", "a");
			elementTypeTagMap.put("weblist", "select");
			elementTypeTagMap.put("dropdown", "select");
			elementTypeTagMap.put("dropdownbox", "select");
			elementTypeTagMap.put("select", "select");
			elementTypeTagMap.put("selectbox", "select");
			elementTypeTagMap.put("radio", "input_radio");
			elementTypeTagMap.put("radiobutton", "input_radio");
			elementTypeTagMap.put("checkbox", "input_checkbox");
			elementTypeTagMap.put("password", "input_password");
			elementTypeTagMap.put("span", "span");
			elementTypeTagMap.put("div", "div");
			elementTypeTagMap.put("calcbutton", "button");
			elementTypeTagMap.put("td", "td");
		}
		String elemTag=elementTypeTagMap.get(sElementType.toLowerCase());
		if(elemTag==null){
			elemTag=sElementType.toLowerCase();
		}
		return 	elemTag;
	}
	/************************************************************************************************************
	 * Function: validateError
	 * Description: This function validates whether the specified error message text is displayed in red color
	 * Created By: Arun
	 * Modified By: Sravan
	 * Date: March 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param errMessage : the text of the error message to be validated
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void validateError(String errMessage) throws Exception{
		validateErrorByIndex(0, errMessage);
	}
	/************************************************************************************************************
	 * Function: validateErrorByIndex
	 * Description: This function validates whether the specified error message text is displayed in red color
	 * Created By: Sravan
	 * Date: May 2013
	 * To be incorporated: Nil
	 * Input Parameters:  		
	 * 		@param index: Index of the error message
	 * 		@param errMessage : the text of the error message to be validated
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void validateErrorByIndex(int index,String errMessage) throws Exception{
		info("Starting:Function validateErrorByIndex ");
		checkFrame();
		if(docIndex==null){
			getDocIndex();
		}
		String bro;
		if(isModalForm==true){
			bro=e1Browser;
		}else{
			bro="/";
		}
		if (web.exists(bro+"/web:img[@alt='Error*' and @id='WIDGETID*']["+index+"]",10)) {
			String errMessage1=errMessage.replaceAll("'", "&apos;");
			if (web.exists(bro+"/web:a[@text='"+ errMessage1 +"*']["+index+"]",10)){// or @href='javascript:inyfeHandler.toggleDescription*'
				info("PASSED: Error '" + errMessage + "' found.");
				beginStep("[validateErrorByIndex]: PASSED: Error '" + errMessage + "' with index "+index+" found.");
				{
					getStepResult().isPassed();
				}endStep();
			} else {
				getLogger().error("FAILED: Error '" + errMessage + "' with index "+index+" not found.");    
				web.window(e1BrowserWindow).capturePage();
				beginStep("[validateErrorByIndex]  Failed (Error not Found)");
				{
					testFailure("The Expected Error '" + errMessage + "' with index "+index+" not found.");
				}endStep();
			}
		}
		else  {
			getLogger().error("FAILED: No Error with index "+index+" in the page.");
			web.window(e1BrowserWindow).capturePage();
			beginStep("[validateErrorByIndex]  Failed (No Error with index "+index+" in the page)");
			{
				testFailure("There are No Errors with index "+index+" in the page.");
			}endStep();
		}
		valCount=valCount+1;
		info("Finished:Function validateErrorByIndex ");
	}


	/************************************************************************************************************
	 * Function: isError
	 * Description: The IsError function checks to see if an EnterpriseOne error is displayed on the 
	 * 				current page.  It looks for the error image	that appears in the top right corner 
	 * 				and logs a warning message if there is an error.
	 * Created By: M R Shafiquddin Ahmed
	 * Date: July 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param Nil
	 * Returns: 
	 * 		@return True if an error is found; False if no error is found
	 * **********************************************************************************************************
	 */
	public boolean isError() throws Exception{
		checkFrame();
		if(docIndex==null){
			getDocIndex();
		}		
		String bro;
		if(isModalForm==true){
			bro=e1Browser;
		}else{
			bro="/";
		}
		String errMessage;
		if (web.exists(bro+"/web:img[@alt='Error*' and @id='WIDGETID*']",10)){
			if (web.exists(bro+"/web:a[@href='javascript:inyfeHandler.toggleDescription*']",10)){
				errMessage = web.link(bro+"/web:a[@href='javascript:inyfeHandler.toggleDescription*' and @text!='null']").getAttribute("text");
				info("DONE: Error '" + errMessage + "' found.");
				return true;
			}  
			else  {  
				//info("Done: Error Exists but, Unable to Get Error Text - Error Unknown."); 
				return false; 
			}
		}
		else {
			//String formTitle = web.element(bro+"/web:span[@id='jdeFormTitle0']").getAttribute("text");
			//info("Done: No error message was found on the following Form : "+ formTitle);
			return false;
		}        
	}


	/************************************************************************************************************
	 * Function: isWarning
	 * Description: The IsWarning function checks to see if an EnterpriseOne warning is displayed on the 
	 * 				current page.  It looks for the warning image that appears in the top right corner 
	 * 				and logs a warning message if there is found.
	 * Created By: M R Shafiquddin Ahmed
	 * Date: July 2010
	 * To be incorporated: Nil
	 * Input Parameters:  
	 * 		@param modelForm : true if modelform exists
	 * Returns: 
	 * 		@return True if a warning is found; False if no warning is found
	 * **********************************************************************************************************
	 */
	public boolean isWarning() throws Exception{
		checkFrame();
		if(docIndex==null){
			getDocIndex();
		}
		String bro;
		if(isModalForm==true){
			bro=e1Browser;
		}else{
			bro="/";
		}
		info("Start of Function: isWarning");
		String warnMessage;
		if (web.exists(bro+"/web:img[@alt='Warning*' and @id='WIDGETID*']",10)){
			String srcFileName = web.image(bro+"/web:img[@alt='Errors and Warnings' or  @alt='Warnings*']").getAttribute("src");
			if (web.exists(bro+"/web:a[@href='javascript:inyfeHandler.toggleDescription*']",10)){
				warnMessage = web.link(bro+"/web:a[@href='javascript:inyfeHandler.toggleDescription*' and @text!='null']").getAttribute("text");
				info("DONE: Warning '" + warnMessage + "' found.");
				info("End of Function: isWarning");
				return true;
			}  
			else  {  
				//info("Done: Warning Exists but, Unable to Get Warning Text - Warning Unknown."); 
				info("End of Function: isWarning");
				return false; 
			}//*/
		}
		else {
			//String formTitle = web.element(bro+"/web:span[@id='jdeFormTitle0']").getAttribute("text");
			//info("Done: No Warning message was found on the following Form : "+ formTitle);
			info("End of Function: isWarning");
			return false;
		}        
	}


	/************************************************************************************************************
	 * Function: warningExpected
	 * Description: This Function complements the IsWarning function above by throwing pass or fail to 
	 * 				the execution report.
	 * Created By: M R Shafiquddin Ahmed
	 * Date: July 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param Nil
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void warningExpected() throws Exception{
		if (isWarning()) 
			info("PASSED: Warning is Seen on Page as expected");
		else {
			web.window(e1BrowserWindow).capturePage();
			beginStep("[WarningExpected]  Failed (No Warning in the page)");
			{
				testFailure("There is No Warning in the page.");
			}endStep();
			getLogger().fatal("FAILED: Warning is not seen on Page.");
		}
		valCount=valCount+1;
	}

	/************************************************************************************************************
	 * Function: errorExpected
	 * Description: This Function complements the IsError function above by throwing a pass or fail to
	 * 				the execution report.
	 * Created By: M R Shafiquddin Ahmed
	 * Date: August 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param Nil
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void errorExpected() throws Exception{
		if (isError()) 
			info("PASSED: Error is Seen on Page as expected");
		else {
			web.window(e1BrowserWindow).capturePage();
			beginStep("[ErrorExpected]  Failed (No Error in the page)");
			{
				testFailure("There is No Error in the page.");
			}endStep();
			getLogger().fatal("FAILED: Error is not seen on Page.");
		}
		valCount=valCount+1;
	}


	/************************************************************************************************************
	 * Function: warningNotExpected
	 * Description: This Function complements the IsWarning function above by throwing pass or fail to
	 * 				the execution report.
	 * Created By: M R Shafiquddin Ahmed
	 * Date: July 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param Nil
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void warningNotExpected() throws Exception{
		if (isWarning()) {
			web.window(e1BrowserWindow).capturePage();
			beginStep("[warningNotExpected]  Failed (Warning in the page)");
			{
				testFailure("There is Warning(s) in the page.");
			}endStep();
			getLogger().fatal("FAILED: Warning Seen on Page - Warning Not expected");
		}
		else
			info("PASSED: NO Warning is Seen on Page, as expected");
		valCount=valCount+1;
	}


	/************************************************************************************************************
	 * Function: errorNotExpected
	 * Description: This Function complements the IsError function above by throwing a pass or fail to
	 * 				the execution report.
	 * Created By: M R Shafiquddin Ahmed
	 * Date: August 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param Nil
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void errorNotExpected() throws Exception{
		if (isError()) {
			web.window(e1BrowserWindow).capturePage();
			beginStep("[errorNotExpected]  Failed (Error in the page)");
			{
				testFailure("There is Error(s) in the page.");
			}endStep();
			getLogger().fatal("FAILED: Error Seen on Page - Error Not expected");
			//getLastResult().isFailed();
		}
		else
			info("PASSED: NO Error is Seen on Page, as expected");
		valCount=valCount+1;
	}


	/************************************************************************************************************
	 * Function: clickOkOnWarning
	 * Description: This Function Clicks the OK button the 2nd time to accept the Warning msg on most E1 Apps
	 * Created By: M R Shafiquddin Ahmed
	 * Date: July 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param Nil
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void clickOkOnWarning() throws Exception{
		if (isWarning()) {
			clickToolBarImage("OK");
		}
	}
	/************************************************************************************************************
	 * Function: getABNumber
	 * Description: This function gets the Address Book Numberof the user currently logged onto the application
	 * Created By: Arun
	 * Date: March 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param Nil
	 * NOTE: Added value property to input_text
	 * Returns: 
	 * 		@return Address Umber of currently logged in user
	 * **********************************************************************************************************
	 */
	public String getABNumber() throws Exception{
		String ABNumber;// = null;
		fastPath("P0085");
		//web.link("/web:window[@index='0']/web:document[@index='0']/web:a[@text='My System Options']").click();
		/*web.link("/"+e1Document+"/web:a[@text='User Profile Revisions']").click();
		syncFrame();*/
		clickHyperLink(0, "User Profile Revisions");
		ABNumber = web.textBox("/"+e1Document+"/web:input_text[@index='1']").getAttribute("value");//.storeAttribute("ABNumber", "value");
		info("The AB Number is :"+ ABNumber);
		clickToolBarImage("Cancel");
		clickToolBarImage("Cancel");
		/*web.image("//web:img[@id='hc_Cancel']").click();
		syncFrame();
		web.image("//web:img[@id='hc_Cancel']").click();
		syncFrame();*/
		return ABNumber;
	}

	/************************************************************************************************************
	 * Function: getUserID
	 * Description: This function gets the user Id of the user currently logged onto the application
	 * Created By: Arun
	 * Date: March 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param Nil
	 * NOTE: Added value property to input_text
	 * Returns: 
	 * 		@return UserID of the logged in user
	 * **********************************************************************************************************
	 */
	public String getUserID() throws Exception{

		//checking UserID column in datatable

		int appender=checkColumnExists("UserID");
		if(appender>0){
			UserID=(String)datatable.getGlobalDatatable().getValue("Global", 0, "UserID");
		}
		else{
			fastPath("P0085");
			//web.link("/web:window[@index='0']/web:document[@index='0']/web:a[@text='My System Options']").click();
			/*syncFrame();
		     web.link("/"+e1Document+"/web:a[@text='User Profile Revisions']").click();
		     syncFrame();*/
			clickHyperLink(0, "User Profile Revisions");
			UserID = web.textBox("/"+e1Document+"/web:input_text[@index='0']").getAttribute("value");
			if(UserID!=null){
				UserID=UserID.toUpperCase();
			}
			info("The User Id is :"+ UserID);
			/*web.image("//web:img[@id='hc_Cancel']").click();
				syncFrame();
				//web.window("/web:window[@index='0']").waitFor();
				web.image("//web:img[@id='hc_Cancel']").click();
				syncFrame();*/
			clickToolBarImage("Cancel");
			clickToolBarImage("Cancel");
		}
		return UserID;
	}

	/************************************************************************************************************
	 * Function: checkEOneSession
	 * Description: Called by the StartE1 Function to determine if there is a single good session EOne Session 
	 * 				running with no open apps.	
	 * Created By: M R Shafiqudidn Ahmed
	 * Date: May 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param Nil
	 * Returns: 
	 * 		@return True or False
	 * **********************************************************************************************************
	 */
	public boolean checkEOneSession()throws Exception{
		//info("CheckEOneSession started ........ ");
		if(web.window(e1BrowserWindow).exists()){
			logoutEOne();
		}/*else{
			browser.closeAllBrowsers();
			browser.launch();
		}*/

		return false; 

	}
	/************************************************************************************************************
	 * Function: closeMicrosoftApps
	 * Description: This closes any Excel or Word windows that might have been opened..	
	 * Created By: Prakruthi Ram
	 * Date: December 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param Nil
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void closeMicrosoftApps()throws Exception{
		info("Closing Microsoft Excel, Word Applications");
		Runtime.getRuntime().exec(KILL + "EXCEL.EXE");  
		Runtime.getRuntime().exec(KILL + "WINWORD.EXE"); 
		Runtime.getRuntime().exec(KILL + "ACRORD32.EXE");
		info("Closed Microsoft Excel, Word and Acrobat Reader Applications");

	}

	/************************************************************************************************************
	 * Function: recoveryLogin
	 * Description: Called by the StartE1 Function to login is needed             
	 * Created By: M R Shafiqudidn Ahmed
	 * Date: June 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *          @param sNewUser:User ID, if user is null, then takes user from C:\Login.ini
	 *          @param sPwd: but if null string then requires the presence of the C:\Login.ini
	 * Returns: 
	 *          @return True/False on status of login
	 * **********************************************************************************************************
	 */
	public boolean recoveryLogin(String sNewUser,String sPwd) throws Exception {
		boolean returnVal;
		info("recovery login from SB E1");
		String ssa=getSettings().get("SSA");
		if(ssa!=null){
			isCITRun=true;

			info("Setting CIT Run Variable to true from StartE1 for ssa run");
		}
		String strOpenBrowser ="", strCurrentBrowser = "";
		if(!browserFlag)
		{
		try{
			Runtime.getRuntime().exec("cscript \\\\dnyekumarvm6.us.oracle.com\\ConfigurationFiles\\IERegistry.vbs");
			browser.close();
			//browser.closeAllBrowsers();
			Runtime.getRuntime().exec(KILL+"iexplore.exe");
		}catch(Exception e) {
			info("Exception : "+e);
			browser.close();
			//browser.closeAllBrowsers();
		}
		closeMicrosoftApps();
		browser.launch();
		}
		String [] arryStrng;
		String sUser, sPassword, sEnvironment, sRole, sLoginUrl,sCS = null;
		try {
			sCS = getVariables().get("CS").toUpperCase();
		}catch(NullPointerException n) {
			getLogger().fatal("Constant Scenario not set");
		};
		sUser=""; sPassword=""; sEnvironment=""; sRole="";sLoginUrl = "";
		int parts;
		returnVal = false;
		parts = 0;
		/*if(sCS==null) {
                                     setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.Fail);
                                     beginStep("[RecoveryLogin]  Failed (Recheck Login Credentials)", 0);
                                     {
                                                     fail("Constant scenarion is not set in the Script");
                                     }endStep();
                                     getLogger().error("Constant scenario is not set in the Script");
                                     return false;
                     }*/
		try {          
			BufferedReader reader = new BufferedReader(new FileReader("C:/login.ini"));
			String line = null;
			line = reader.readLine();
			if (line.equals("[ENVIRONMENT]")){
				while ((line = reader.readLine()) != null) {
					arryStrng = line.split("=");
					if (arryStrng[0].equalsIgnoreCase("user")) { 
						sUser=arryStrng[1]; 
						if (sNewUser.length()>0){sUser=sNewUser;}
						parts = parts+1;
					}else if (arryStrng[0].equalsIgnoreCase("password")) {
						sPassword=arryStrng[1]; 
						if (sPwd.length()>0){sPassword=sPwd;}
						parts = parts+1;
					}else if (arryStrng[0].equalsIgnoreCase("environment")) {
						sEnvironment=arryStrng[1];
						parts = parts+1;
						if(sCS!=null&& sCS.length()>0){
							if(sEnvironment.toUpperCase().contains(sCS)){

								info("Constant Senario Matches with the script");
							}else{
								try          {
									FileReader file = new FileReader("C:/login.ini");
									BufferedReader reader1 = new BufferedReader(file);

									String line2 = "",line1 = "", oldtext = "";

									while((line1 = reader1.readLine()) != null)
									{
										if (line1.startsWith("Environment")||line1.startsWith("environment")){
											int len = line1.length();
											line2=line1.substring(len-2,len);
											try{
												info("Old Constant Scenario:"+ sEnvironment);
												if(line1.substring(len-2,len-1).equalsIgnoreCase("C")){// second last character is C
													Integer.parseInt(line1.substring(len-1)); // to ensure last character is number                    

													line1 = line1.replace(line2,sCS);
													sEnvironment =sEnvironment.replace(line2,sCS);
												}else{

													line1=line1+sCS;
													sEnvironment=sEnvironment+sCS;
												}
											}catch (NumberFormatException n) {
												n.printStackTrace();
											}

										}
										oldtext +=  line1 + "\r\n";
									}
									reader1.close();
									info("Constant Senario in Login.ini Doesn't Matches with Script Constant scenario");



									info("New Constant Scenario: "+ sEnvironment);

									FileWriter writer = new FileWriter("C:/login.ini");
									writer.write(oldtext);
									writer.close();
								}
								catch (IOException ioe){
									ioe.printStackTrace();
								}
							}         
						}
					}else if (arryStrng[0].equalsIgnoreCase("role")) {
						sRole=arryStrng[1];
						parts = parts+1;
					}else if (arryStrng[0].equalsIgnoreCase("loginurl")) {
						sLoginUrl=arryStrng[1];
						parts = parts+1;
					}
					if (parts==5) {
						break;
					}
				}
				reader.close();
				String roleCIT=getSettings().get("role");
				if(roleCIT!=null)
				{
					isCITRun=true;
					info("CIT Role:"+roleCIT);
					sRole=roleCIT;
				}
				info("Role is:"+sRole);
				//new changes
				String userCIT=getSettings().get("usr");
				if(userCIT!=null && (!(sNewUser.length()>0)))
				{
					info("CIT user:"+userCIT);
					sUser=userCIT;
				}
				info("user is:"+sUser);
				String passwordCIT=getSettings().get("pass");
				if(passwordCIT!=null && (!(sNewUser.length()>0)))
				{
					info("CIT password:"+passwordCIT);
					sPassword=passwordCIT;
				}				
				String envCIT=getSettings().get("env");
				if(envCIT!=null)
				{
					info("CIT environment:"+envCIT);
					sEnvironment=envCIT;
				}
				info("Environment is:"+sEnvironment);
				String urlCIT=getSettings().get("url");
				if(urlCIT!=null)
				{
					isCITRun=true;
					info("before change CIT Url:"+urlCIT);
					urlCIT.indexOf(":", urlCIT.indexOf(":")+1);
					urlCIT=urlCIT.substring(0, urlCIT.indexOf(":", urlCIT.indexOf(":")+1))+".us.oracle.com:"+urlCIT.substring(urlCIT.indexOf(":", urlCIT.indexOf(":")+1)+1,urlCIT.length())+"\\jde\\E1Menu.maf";
					info("after change CIT Url:"+urlCIT);
					sLoginUrl=urlCIT;
				}
				info("Url is:"+sLoginUrl);
				if (sUser.isEmpty() || sPassword.isEmpty() || sEnvironment.isEmpty() || sRole.isEmpty() || sLoginUrl.isEmpty()) {
					setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.Fail);
					fail("Login.ini is Invalid. One or More parameters is missing");
					setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.ReportErrorAndContinue);
					return false;           } 
			}else {
				setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.Fail);
				fail("Login.ini is Invalid. Unable to Read file.");
				setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.ReportErrorAndContinue);
			}
			//Browser is launched in beginning of this function
			if(!web.exists("/web:window[@index='0']"))
				browser.launch();
			//Modification done for certification.
			if(browser.getBrowser()!=null)
			{
				strCurrentBrowser=browser.getBrowser().toString();

				if (strCurrentBrowser.contains("InternetExplorerBrowser"))
					strOpenBrowser="IE";
				else if (strCurrentBrowser.contains("ChromeBrowser"))
					strOpenBrowser="Chrome";
				else if (strCurrentBrowser.contains("FireFoxBrowser"))
					strOpenBrowser="FF";
			}


			if (browser.getBrowser()==null)
				browser.launch();
			web.window("/web:window[@index='0']").navigate(sLoginUrl); 
			Thread.sleep(10000);
			if (strOpenBrowser.compareTo("IE")==0)
			{
				String objLink="/web:window[@index='0' or @title='Certificate Error: Navigation Blocked']/web:document[@index='0']/web:a[@text='Continue to this website (not recommended).']";
				if (web.exists(objLink, 10))
				{
					web.link(objLink).click();
					web.window("/web:window[@index='0']").waitForPage(null);
				}
			}
			else if (strOpenBrowser.compareTo("FF")==0)
			{
				String objElement="/web:window[@index='0' or @title='Untrusted Connection']/web:document[@index='0']/web:h2[@text='I Understand the Risks']";
				if (web.exists(objElement, 10))
				{
					web.element(objElement).click();
					web.window("/web:window[@index='0']").waitForPage(null);

					String objButton="/web:window[@index='0' or @title='Untrusted Connection']/web:document[@index='0']/web:button[@id='exceptionDialogButton']";
					if (web.exists(objButton, 10))
					{
						web.button(objButton).click();


						Robot robot = new Robot();
						robot.keyPress(KeyEvent.VK_ENTER);
						robot.keyRelease(KeyEvent.VK_ENTER);

						web.window("/web:window[@index='0']").waitForPage(null);
					}
				}
			}
			else if (strOpenBrowser.compareTo("Chrome")==0)
			{
				if (web.exists("/web:window[@title='SSL Error']", 10))
				{
					Robot robot = new Robot();
					robot.keyPress(KeyEvent.VK_TAB);
					robot.keyRelease(KeyEvent.VK_TAB);

					robot.keyPress(KeyEvent.VK_ENTER);
					robot.keyRelease(KeyEvent.VK_ENTER);

					web.window("/web:window[@index='0']").waitForPage(null);
				}
			}
			if (web.exists("/web:window[@title='JD Edwards*']")){
				info("Login Page has rendered as expected.");
			}else  {
				getLogger().error("E1 URL Login Page Failed to open properly for Some Reason... Trying 1 more time! 2nd Try to open E1 login page");
				closeEOneBrowser();
				if(!web.exists("/web:window[@index='0']"))
					browser.launch();
				web.window("/web:window[@index='0']").navigate(sLoginUrl); 
				think(5);


				if (web.exists("/web:window[@title='JD Edwards*']")){
					info("Login Page has rendered as expected.");
				}else  {
					setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.Fail);
					fail("E1 URL Login Page Failed. 2nd Try to open E1 login page. Terminating the Flow!! CHECK URL!!");
					web.window("/web:window[@index='0']").capturePage();
					return(false);            
				}
			}
		}catch (IOException x) {
			setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.Fail);
			beginStep("[RecoveryLogin]  Failed (Login.ini not Found)", 0);
			{
				fail("Login.ini might not exist. Please check and try again");
			}endStep();
			getLogger().fatal("Login.ini might not exist. Please check and try again");

		} 
		web.window("/web:window[@title='JD Edwards*']").maximize();
		Thread.sleep(1000); 
		UserID=sUser;
		//adding UserID to datatable
		datatable.setCurrentVUser((IteratingVUser) this.getScriptVUser().getParentUser());
		int appender=checkColumnExists("UserID");
		if(appender==0){
			datatable.addColumn("Global","UserID",0);
		}
		datatable.setValue("Global", 0, "UserID",UserID);
		web.textBox(5,"//web:input_text[@id='User']").setText(sUser);
		web.textBox(7,"//web:input_password[@id='Password']").setText(sPassword);
		web.textBox(10,"//web:input_text[@id='Environment' or @name='Environment']").setText(sEnvironment);
		if(web.exists("//web:input_text[@id='Role' or @name='Role' ]")) {
			web.textBox(12,"//web:input_text[@id='Role' or @name='Role' ]").setText(sRole);
		}
		web.button(13,"//web:input_submit[@value='Sign In' ]").click();
		System.out.println(""+System.currentTimeMillis());
		Thread.sleep(20000);
		int waitTime = 0;
		while (!(web.exists("/web:window[@title='JD Edwards*']//web:td[@text='*You have no running applications*' or @text='*Open Applications*']")||(web.exists("//web:form[@id='e1MFastpathForm']",10)))){
			//while (!(web.exists("/web:window[@title='JD Edwards*']/web:document[@name='E1MENUMAIN*']/web:td[@text='*You have no running applications*' or @text='*Open Applications*']",3))){
			info("Waiting for application to login");
			if (web.exists("/web:window[@title='JD Edwards*']/web:document[@index='0']/web:img[@src='.*err*'",3)) {
				setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.Fail);
				web.window(e1BrowserWindow).capturePage();
				beginStep("[RecoveryLogin]  Failed (Unable to login)", 0);
				{
					fail("Login Error. Unable to login.");
				}endStep();
				getLogger().error("Login Error. Unable to login.");
				System.out.println(""+System.currentTimeMillis());
				return false;
			} else if (web.exists("/web:window[@title='JD Edwards*']/web:document[@index='0']/web:span[@text='Select an Environment and Role']",3)) {
				setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.Fail);
				web.window(e1BrowserWindow).capturePage();
				fail("Login Error. Login credentials are incorrect.");

				getLogger().error("Please check Login.ini file. One of the login credentials are incorrect. User Name is : " + sUser + "; Password is : " + sPassword + "; Environment is : " + sEnvironment + " and Role is : " + sRole);
				System.out.println(""+System.currentTimeMillis());
				return false;
			}else if (web.exists("/web:window[@title='JD Edwards*']/web:document[@index='0']/web:div[@text=' Sign In Error*']",3)) {

				setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.Fail);
				web.window(e1BrowserWindow).capturePage();
				beginStep("[RecoveryLogin]  Failed (Recheck Login Credentials)", 0);
				{
					fail("Login Error. User Name Supplied is : " + sUser + " and Password Supplied is : " + sPassword);
				}endStep();
				getLogger().error("Please check login credentials and try again. User Name Supplied is : " + sUser + " and Password Supplied is : " + sPassword);
				System.out.println(""+System.currentTimeMillis());
				return false;
			}else if(web.exists("/web:window[@title='JD Edwards*']/web:document[@index='0']/web:div[@text=' Sign In Warning:  Your password will expire*']",3)){
				setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.Fail);
				web.window(e1BrowserWindow).capturePage();
				beginStep("[RecoveryLogin]  Failed (Password expired. Please take necessary action)", 0);
				{
					fail("Login Error. User Name Supplied is : " + sUser + " and Password Supplied is : " + sPassword +"Password expired. Please take necessary action");
				}endStep();
				System.out.println(""+System.currentTimeMillis());
				return false;
			}
			think(1);
			waitTime=waitTime+1;
			if (waitTime == 90){
				System.out.println(""+System.currentTimeMillis());
				return false;
			}
		}
		waitTime=0;
		while((web.exists("//web:td[@text='*You have no running applications*' or @text='*Open Applications*']"))||(web.exists("//web:form[@id='e1MFastpathForm']"))){
			
			waitTime=waitTime+1;
		if(web.exists("/web:window[@title='JD Edwards*']/web:document[@name='E1MENUMAIN*']/web:td[@text='*You have no running applications*' or @text='*Open Applications*']",10)){
			preTitle=web.document(e1Browser).getAttribute("title");
			if(preTitle!=null){
				preTitle=preTitle.replace(spaceChar, " ");
			}
			info("Login successful");
			if(web.element("/web:window[@title='JD Edwards*']/web:document[@name='e1menuAppIframe']/web:div[@text='EnterpriseOne']").exists()){
				web.element("/web:window[@title='JD Edwards*']/web:document[@name='e1menuAppIframe']/web:div[@text='EnterpriseOne']").setSelectedJSElement();
				web.document("/web:window[@title='JD Edwards*']/web:document[@name='e1menuAppIframe']").executeJavaScript("selectedOATSWebDomElement.click()");
				Thread.sleep(5000);
			}
			/*if(web.element("/web:window[@title='JD Edwards*']/web:document[@name='e1menuAppIframe']/web:div[@id='carousel']").exists()){
                                                     String classNme=web.element("/web:window[@title='JD Edwards*']/web:document[@name='e1menuAppIframe']/web:div[@id='carousel']").getAttribute("className");
                                                     if(classNme.contains("caroExpanded")){
                                                                     web.element("/web:window[@title='JD Edwards*']/web:document[@name='e1menuAppIframe']/web:div[@id='caroBar']").click();
                                                     }
                                                     Thread.sleep(1000);
                                     }*/
			return true;
		}else if (web.exists("//web:img[@src='.*err*'")) {
			setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.Fail);
			web.window(e1BrowserWindow).capturePage();
			beginStep("[RecoveryLogin]  Failed (Unable to login)", 0);
			{
				fail("Login Error. Unable to login.");

			}endStep();
			getLogger().error("Login Error. Unable to login.");
			closeEOneBrowser();
			System.out.println(""+System.currentTimeMillis());
			returnVal = false;
		}
		if(waitTime==60){
			return false;
		}
		}
		return (returnVal);
	}


	/************************************************************************************************************
	 * Function: startE1
	 * Description: The StartE1 function will be used to start an EnterpriseOne session and log in.
	 *				This function will be a wrapper for other function calls, depending on how we decide to 
	 *				start EnterpriseOne sessions.  
	 * Note: This function should be called at the beginning of every E1 automation script. 		
	 * Created By: M R Shafiqudidn Ahmed
	 * Date: June 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param Nil
	 * Returns: 
	 * 		@return False If Fails, Else True
	 * **********************************************************************************************************
	 */
	public void startE1() throws Exception {
		setBrowser();
		String sUser, sPassword,loginUserID; String [] arryStrng; int parts;
		parts = 0;sUser="";sPassword="";loginUserID="";
		String urlCIT=getSettings().get("url");
		String ssa=getSettings().get("SSA");
		if(ssa!=null){
			isCITRun=true;

			info("Setting CIT Run Variable to true from StartE1 for ssa run");
		}
		if(urlCIT!=null)
		{
			isCITRun=true;

			info("Setting CIT Run Variable to true from StartE1");
		}
		OSPreferences("Fail");
		int appender=checkColumnExists("newUser");
		if(appender!=0){
			datatable.getGlobalDatatable().deleteColumn("Global", "newUser");
		}
		if (checkEOneSession()){
			info("Good E1 Session Found");
			//closeDataBrowser();
			loginUserID = getUserID();// get the AB number with which the application is currently logged in
			try{		//Retrieving the user id and password from Login.ini file   
				BufferedReader reader = new BufferedReader(new FileReader("C:/login.ini"));
				String line = null;
				line = reader.readLine();
				if (line.equals("[ENVIRONMENT]")){
					while ((line = reader.readLine()) != null) {
						arryStrng = line.split("=");
						if (arryStrng[0].equalsIgnoreCase("user")) {
							sUser=arryStrng[1]; 
							parts = parts+1;
						}else if (arryStrng[0].equalsIgnoreCase("password")) {
							sPassword=arryStrng[1]; 
							parts = parts+1;
						}
						if (parts==2) {
							break;
						}
					}
				}  
				reader.close();
			}
			catch (IOException x) {
				setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.Fail);
				web.window("/web:window[@title='JD Edwards*']").capturePage();
				beginStep("[StartE1]  Failed (Login Error.)", 0);
				{
					fail("Unable to Login. Login.ini might not exist");
				}endStep();
				getLogger().fatal("Login.ini might not exist. Please check and try again");
				setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.ReportErrorAndContinue);
			}
			if (loginUserID.equalsIgnoreCase(sUser)){
				//Check if logged in user id and userid in Login.ini file are same
				info("The Application is logged in with User ID provided in Login.ini");				
			}else{
				logoutEOne();
				if (!recoveryLogin(sUser,sPassword)) {
					setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.Fail);
					web.window(e1BrowserWindow).capturePage();
					beginStep("[StartE1]  Failed (Login Error.)", 0);
					{
						fail("Unable to Login. Check Login.ini or E1 Server may be down.");
					}endStep();
					getLogger().error("StartE1 Login Failed. Check Login.ini or E1 Server may be down.");	
					fail("Function recoveryLogin Failed. Exit Out");
					setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.ReportErrorAndContinue);
				}
			}
		}else {
			info("Good E1 Session Not Found. Opening New Session");
			//logoutEOne();
			if (!recoveryLogin("","")) {
				setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.Fail);
				web.window(e1BrowserWindow).capturePage();
				beginStep("[StartE1]  Failed (Login Error.)", 0);
				{
					fail("Unable to Login. Check Login.ini or E1 Server may be down.");
				}endStep();
				getLogger().error("StartE1 Login Failed. Check Login.ini or E1 Server may be down.");	
				fail("Function recoveryLogin Failed. Exit Out");
				setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.ReportErrorAndContinue);
			}
		}

		OSPreferences("ReportErrorAndContinue");
	}
	/************************************************************************************************************
	 * Function: newUserLogin
	 * Description: Calls RecoveryLogin to use user/pwd as parameters-The C:\Login.ini will be used for URL/Env/Role.
	 * Note: Automators are required to use the "CloseEOneBrowsers" at the end of their script to return
	 * 		 the E1 browser to the default UserID's in the Login.ini.
	 * 		Password will be read from wiki page	
	 * Created By: M R Shafiqudidn Ahmed
	 * Date: June 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param sNewUser:User ID
	 * Returns: 
	 * 		@return True/False depending on status of RecoveryLogin
	 * **********************************************************************************************************
	 */
	public void newUserLogin(@Arg("sNewUser")String sNewUser) throws Exception {
		setBrowser();
		String [] arryStrng;
		String urlCIT=getSettings().get("url");
		if(urlCIT!=null)
		{
			isCITRun=true;			
			info("Setting CIT Run Variable to true from StartE1");
		}
		OSPreferences("ReportErrorAndContinue");
		String Env="";
		logoutEOne();
		BufferedReader reader=null;
		if(sNewUser.trim().length()!=0){
			try {        
				reader = new BufferedReader(new FileReader("C:/login.ini"));
				String line = null;
				line = reader.readLine();
				if (line.equals("[ENVIRONMENT]")){
					while ((line = reader.readLine()) != null) {
						arryStrng = line.split("=");
						if (arryStrng[0].equalsIgnoreCase("environment")) {
							Env=arryStrng[1];

						}
					}
				}
				reader.close();
			}	catch(FileNotFoundException f){
				OSPreferences("Fail");
				setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.Fail);
				web.window(e1BrowserWindow).capturePage();
				beginStep("[RecoveryLogin]  Failed (Login.ini not Found)", 0);
				{
					fail("Login.ini might not exist. Please check and try again");
				}endStep();
				getLogger().fatal("Login.ini might not exist. Please check and try again");
				//getLogger().fatal(x);
			}catch (IOException x) {
				OSPreferences("Fail");
				setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.Fail);
				web.window(e1BrowserWindow).capturePage();
				beginStep("[RecoveryLogin]  Failed (Login.ini not Found)", 0);
				{
					fail("Login.ini might not exist. Please check and try again");
				}endStep();
				getLogger().fatal("Login.ini might not exist. Please check and try again");
				//getLogger().fatal(x);
			}	

			String envCIT=getSettings().get("env");
			if(envCIT!=null)
			{
				info("CIT environment:"+envCIT);
				Env=envCIT;
			}
			String release = "";
			if(!Env.contains("JDV")){
			Env=Env.substring(0, Env.length()-2);	 
			}			
			//info("Env : "+Env);
			if(releaseEnvMap.isEmpty()){
				releaseEnvMap.put("PY910", "91");
				releaseEnvMap.put("PY900", "90");
				releaseEnvMap.put("PD910", "EXA");
				releaseEnvMap.put("STBAWS", "STABLEA");
				releaseEnvMap.put("STBAAU", "STABLEA");
				releaseEnvMap.put("STBAWIN", "STABLEA");
				releaseEnvMap.put("PY812", "812");
				releaseEnvMap.put("PY920", "92");
				releaseEnvMap.put("JPY920", "92");
				releaseEnvMap.put("PY920AS", "92");
				releaseEnvMap.put("JDV920", "TOOLS");
				releaseEnvMap.put("JDV910", "TOOLS");
				releaseEnvMap.put("TDEV", "TOOLS");
				
			}
			release=releaseEnvMap.get(Env);
			if((release==null)||(release.length()==0)) {
				setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.Fail);
				fail("Passwords for the given environment are not available in Spl_Login page, please verify Login.ini");
			}
			if(!web.exists("/web:window[@index='0']"))
				browser.launch();
			web.window("/web:window[@index='0']").navigate("http://den00hrs.us.oracle.com:7305/SpecialLogins");
			//web.window("/web:window[@index='0']").navigate("http://denaa010l.us.oracle.com/mwiki/index.php?title=Generic_User_IDs_for_Automation");
			web.window("/web:window[@title='*Generic UserIDs*']").waitForPage(null);
			//info("release : "+release);
			DOMTable relTable=web.table("/web:window[@title='*Generic UserIDs*']/web:document[@index='0']/web:table[@id='"+release+"']");
			List<DOMElement> rows=relTable.getElementsByTagName("tr");
			String Passwrd="";
			for(DOMElement row:rows){
				List<DOMElement> cells=row.getElementsByTagName("td");
				if(cells.size()>=3){
					String user=cells.get(1).getAttribute("innerText");
					if(user.toUpperCase().equals(sNewUser.toUpperCase())){
						Passwrd=cells.get(2).getAttribute("innerText");
					}
				}
			}
			info("Password for user : "+sNewUser+" is "+Passwrd);
			if(Passwrd.length()==0) {
				setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.Fail);
				fail("Password for User "+sNewUser+" is not available in Spl_Login page, Please verify Login Credentials");
			}
			//adding newUser to datatable

			int appender=checkColumnExists("newUser");
			if(appender==0){
				datatable.getGlobalDatatable().addColumn("Global","newUser",0);
			}
			datatable.getGlobalDatatable().setValue("Global", 0, "newUser",sNewUser);
			qsFlag=false;
			if (!recoveryLogin(sNewUser,Passwrd)) {
				setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.Fail);
				web.window(e1BrowserWindow).capturePage();
				beginStep("[NewUserLogin]  Failed (Login Error.)", 0);
				{
					fail("Function newUserLogin Failed.");
				}endStep();
				getLogger().fatal("Function newUserLogin Failed.");
				fail("Exit Out");
				setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.ReportErrorAndContinue);
			}
		}else{
			if (!recoveryLogin("","")) {
				setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.Fail);
				web.window(e1BrowserWindow).capturePage();
				beginStep("[NewUserLogin]  Failed (Login Error.)", 0);
				{
					fail("Function newUserLogin Failed.");
				}endStep();
				getLogger().fatal("Function newUserLogin Failed.");
				fail("Exit Out");
				setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.ReportErrorAndContinue);
			}
		}
		OSPreferences("ReportErrorAndContinue");
	}

	/************************************************************************************************************
	 * Function: newUserLogin
	 * Description: Calls RecoveryLogin to use user/pwd as parameters-The Recovery.ini will be used for URL/Env/Role.
	 * Note: Automators are required to use the "CloseEOneBrowsers" at the end of their script to return
	 * 		 the E1 browser to the default UserID's in the Recovery.ini		
	 * Created By: M R Shafiqudidn Ahmed
	 * Date: June 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param sNewUser:User ID
	 * 		@param sPwd:Password
	 * Returns: 
	 * 		@return True/False depending on status of RecoveryLogin
	 * **********************************************************************************************************
	 */
	public void newUserLogin(@Arg("sNewUser")
			String sNewUser, @Arg("sPwd")
			String sPwd) throws Exception {

		qsFlag=false;
		if(sPwd.trim().length()==0){
			newUserLogin(sNewUser);
		}else{	
			logoutEOne();
			setBrowser();
			//adding newUser to datatable
			int appender=checkColumnExists("newUser");
			if(appender==0){
				datatable.getGlobalDatatable().addColumn("Global","newUser",0);
			}
			datatable.getGlobalDatatable().setValue("Global", 0, "newUser",sNewUser);
			appender=checkColumnExists("newPwd");
			if(appender==0){
				datatable.getGlobalDatatable().addColumn("Global","newPwd",0);
			}
			datatable.getGlobalDatatable().setValue("Global", 0, "newPwd",sPwd);
			if (!recoveryLogin(sNewUser,sPwd)) {
				setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.Fail);
				web.window(e1BrowserWindow).capturePage();
				beginStep("[NewUserLogin]  Failed (Login Error.)", 0);
				{
					fail("Function newUserLogin Failed.");
				}endStep();
				getLogger().fatal("Function newUserLogin Failed.");
				fail("Exit Out");
				setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.ReportErrorAndContinue);
			}
		}
		OSPreferences("ReportErrorAndContinue");
	}

	/************************************************************************************************************
	 * Function: closeEOneBrowser
	 * Description: Called by the StartE1 Function to close Eone browsers when multiple browsers are left open	
	 * Created By: M R Shafiqudidn Ahmed
	 * Date: Feb 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param Nil
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void closeEOneBrowser() throws Exception	{
		qsFlag=false;
		closeDeadDataBrowsers();
		try {
			while (web.exists("/web:window[@index='0'']",10)){
				//info("The E1 browser exists !! ");
				web.window("/web:window[@index='0']").close();
				info("The Existing E1 Browser Closed !! ");
			}
		} catch (PlaybackException e) {getLogger().fatal("Exception in closeEOneBrowser()");}
		browser.launch();
	}

	/************************************************************************************************************
	 * Function: logoutEOne
	 * Description: Closes all the child browsers and logs out from application	
	 * Created By: Sravan
	 * Date: October 2012
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param Nil
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void logoutEOne() throws Exception {

		//closeQuerySelector();
		qsFlag=false;
		closeDeadDataBrowsers();
		if(web.exists("/web:window[@title='JD Edwards*' or @title='JD"+spaceChar+"Edwards*']",3)){
			if(web.exists("//web:a[@title='Sign Out']")){
				/*web.link("//web:a[@text='Sign Out']").setSelectedJSElement();
				web.document(e1BrowserWindow+"/web:document[@name='E1MENUMAIN*']").executeJavaScript("selectedOATSWebDomElement.click()");*/
				web.document(e1BrowserWindow+"/web:document[@name='E1MENUMAIN*']").executeJavaScript("window.document.getElementById('signOutLinkDiv').click()");
				int i=0;
				do{
					Thread.sleep(1000);
					if(web.exists("/web:dialog_confirm[@index='0']")){
						//web.confirmDialog("/web:dialog_confirm[@text='There are applications that are currently running* or @winClass='##32770'");
						web.confirmDialog("/web:dialog_confirm[@index='0']").clickOk();
						Thread.sleep(2000);						
					}
					i++;
					if(i==150){
						if(web.exists("//web:a[@text='Sign Out']")){
							/*web.link("//web:a[@text='Sign Out']").setSelectedJSElement();
							web.document(e1BrowserWindow+"/web:document[@name='E1MENUMAIN*']").executeJavaScript("selectedOATSWebDomElement.click()");*/
							web.document(e1BrowserWindow+"/web:document[@name='E1MENUMAIN*']").executeJavaScript("window.document.getElementById('signOutLinkDiv').click()");
							Thread.sleep(2000);
						}
						browser.close();
						//browser.closeAllBrowsers();
						Thread.sleep(5000);
						browser.launch();
						return;
					}
				}while(!web.exists("//web:input_text[@id='User']"));
			}else if(web.exists("//web:div[@text='Sign Out']")){

				/*web.element("//web:div[@text='Sign Out']").setSelectedJSElement();
				web.document(e1BrowserWindow+"/web:document[@name='E1MENUMAIN*']").executeJavaScript("selectedOATSWebDomElement.click()");*/
				web.document(e1BrowserWindow+"/web:document[@name='E1MENUMAIN*']").executeJavaScript("window.document.getElementById('signOutLinkDiv').click()");
				int i=0;
				do{
					Thread.sleep(1000);
					if(web.exists("/web:dialog_confirm[@index='0']")){
						//web.confirmDialog("/web:dialog_confirm[@text='There are applications that are currently running* or @winClass='##32770'");
						web.confirmDialog("/web:dialog_confirm[@index='0']").clickOk();
						Thread.sleep(2000);						
					}
					i++;
					if(i==150){
						if(web.exists("//web:div[@text='Sign Out']")){
							/*web.link("//web:div[@text='Sign Out']").setSelectedJSElement();
							web.document(e1BrowserWindow+"/web:document[@name='E1MENUMAIN*']").executeJavaScript("selectedOATSWebDomElement.click()");*/
							web.document(e1BrowserWindow+"/web:document[@name='E1MENUMAIN*']").executeJavaScript("window.document.getElementById('signOutLinkDiv').click()");
							Thread.sleep(2000);
						}
						browser.close();
						//browser.closeAllBrowsers();
						Thread.sleep(5000);
						browser.launch();
						return;
					}
				}while(!web.exists("//web:input_text[@id='User']"));
			}else if(!web.exists("//web:input_text[@id='User']")){
				browser.close();
				//browser.closeAllBrowsers();
				Thread.sleep(5000);
				browser.launch();
			}
		}else{
			browser.close();
			//browser.closeAllBrowsers();
			Thread.sleep(5000);
			browser.launch();
		}

	}

	/************************************************************************************************************
	 * Function: syncFrame
	 * Description: This function will synchronize Navigation between multiple frames & Processing on the 
	 * 			same frame. It's mostly called by library functions, however this can also be called from the script 
	 * Created By: Yashin
	 * Date: July 2016
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param Nil
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void syncFrame() throws Exception {
		syncFrame(300);

	}
	/************************************************************************************************************
	 * Function: syncFrame
	 * Description: This function will synchronize Navigation between multiple frames & Processing on the 
	 * 			same frame. This overloaded function lets the user give a predefined time period for the function to keep iterating till.
	 * Created By: Arun
	 * Date: March 2010
	 * Modified By: Yashin
	 * Date: July 2016
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param iWaitTime: This parameter acts as the upperlimit for the lopp counter, while searching fro presence of the processing symbol
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void syncFrame(@Arg("iWaitTime")int iWaitTime) throws Exception {
		if(isCITRun)
		setErrorRecovery(WebErrorRecovery.ERR_OBJECT_NOT_FOUND_ERROR, ErrorRecoveryAction.Fail);
		else
			setErrorRecovery(WebErrorRecovery.ERR_OBJECT_NOT_FOUND_ERROR, ErrorRecoveryAction.Ignore);
		if(docIndex==null){
			getDocIndex();
		}

		int i = 0,cnt=0;
		if(!bDB){			
			DOMElement proc=web.element("/web:window[@index='0']/web:document[@index='0']/web:div[@id='procIndicator*']");
			DOMElement proc1=web.element(e1Browser+"/web:div[@id='procIndicatorFloatLyr']");
			boolean isExist=false;
			do{
			info("E1 Browser from syncFrame:"+e1Browser);
				try{

					DOMElement loadingStatus=web.element(e1Browser+"/web:div[@id='ariaLog']");
					if(loadingStatus!=null && loadingStatus.exists()){
						String pageLoadingStatus=loadingStatus.getAttribute("text");
						if(loadingStatus==null || loadingStatus.equals("null")){
							info("Page is still loading");
						}else{
							System.out.println(pageLoadingStatus);
						}
					}
				}catch (WaitForPageTimeoutException e) {

				}
				//info("iteration "+i);
				i++;
				Thread.sleep(1000);
				isExist=web.exists(e1Browser,5);
				if(!isExist){
					Thread.sleep(1000);
					if(docIndex==null)
						getDocIndex();
					continue;
				}
				if(isExist){
					if(cnt>6){
						gridIds.clear();
						break;
					}					
					//String title = web.document(e1Browser).getAttribute("title");
					String title = null;
					checkFrame();
					if(isModalForm){
						//DOMElement fTitle = web.element("/web:window[@index='0']/web:document[@index='10']/web:div[@id='popupWindowTitleModalSS3' or @id='popupWindowTitleModalSS2' or @id='popupWindowTitleModalSS1']");
						DOMElement fTitle = web.element("/web:window[@index='0']/web:document[@index='"+docIndex+"']/web:div[@id='popupWindowTitleModalSS3' or @id='popupWindowTitleModalSS2' or @id='popupWindowTitleModalSS1']");
						
						if(fTitle !=null)
						title = (String)fTitle.getAttribute("text");
						//info("title:"+title);
					}else{
						title = web.document(e1Browser).getAttribute("title");
					}				
					//info("title:"+title);
					if(title!=null){
						title=title.replace(spaceChar, " ");
						if(preTitle!=null){
							if(!preTitle.equalsIgnoreCase(title)){
								preTitle=title;
								Thread.sleep(2000);
								//clearing the gridid's stored
								//info("In syncframe grid ids::::"+gridIds);
								gridIds.clear();
								return;
							}
						}
						if(title.contains("EnterpriseOne")){
							//clearing the gridid's stored
							//info("In syncframe grid ids::::"+gridIds);
							gridIds.clear();
							preTitle=title;
							Thread.sleep(2000);
							return;
						}
					}else{
						cnt++;
						continue;
					}
					DOMDocument doc=web.document("/web:window[@index='0']/web:document[@index='0']");
					if(doc==null){
						Thread.sleep(3000);
						continue;
					}
					proc=doc.getElementById("procIndicatorFloatLyr");
					String dis="null",dis2="null";
					if(proc!=null&& proc.exists()){
						dis=proc.getAttribute("display");
						if(dis==null)
							dis="none";
					}else{
						cnt++;
					}
					proc1=web.element(e1Browser+"/web:div[@id='procIndicatorFloatLyr']");
					if(proc1!= null && proc1.exists()){					
						dis2=proc1.getAttribute("display");
						if(dis2==null)
							dis2="none";
					}else{
						cnt++;
					}
					if((!dis2.equalsIgnoreCase("block"))&&(!dis.equalsIgnoreCase("block"))){
						Thread.sleep(2000);
						gridIds.clear();
						break;
					}
					if (i==iWaitTime){
						gridIds.clear();
						web.window(e1BrowserWindow).capturePage();
						beginStep("[SyncFrame]  Failed (Application Slowness)");
						{
							getLogger().warn("Data browser: The Application response is very slow");
						}endStep();
						getLogger().fatal("Data browser: The Application response is very slow");
						break;
					}
				}else{
					if (i==iWaitTime){
						gridIds.clear();
						web.window(e1BrowserWindow).capturePage();
						beginStep("[SyncFrame]  Failed (Application Slowness)");
						{
							getLogger().warn("Data browser: The Application response is very slow");
						}endStep();
						getLogger().fatal("Data browser: The Application response is very slow");
						break;
					}else
						continue;
				}
			}while(isExist);
		}else if(bDB){
			DOMElement d = web.element(sDBBrowser+"/web:div[@id='procIndicator*']");
			while (web.exists(sDBBrowser+"/web:div[@id='procIndicator*']",1)){
				if(d!=null&&d.exists()){
					if((d.getAttribute("display")==null)){
						break;
					}
					if("none".equalsIgnoreCase(d.getAttribute("display"))){
						Thread.sleep(2000);
						break;
					}
				}
				i= i + 1 ;
				Thread.sleep(1000);
				if (i==iWaitTime){
					web.window(sDBBrowserWindow).capturePage();
					beginStep("[SyncFrame]  Failed (Application Slowness)");
					{
						getLogger().warn("Data browser: The Application response is very slow");
					}endStep();
					getLogger().fatal("Data browser: The Application response is very slow");
					break;
				}
				Thread.sleep(1000);
			}
		}
		if(isCITRun)
			setErrorRecovery(WebErrorRecovery.ERR_OBJECT_NOT_FOUND_ERROR, ErrorRecoveryAction.Fail);
			else
		setErrorRecovery(WebErrorRecovery.ERR_OBJECT_NOT_FOUND_ERROR, ErrorRecoveryAction.ReportErrorAndContinue);
	}
	//--------------------------------------------------DATABROWSER FUNCTION STARTS--------------------------------------------
	/************************************************************************************************************
	 * Function: closeDataBrowser
	 * Description: Closes databrowser tool
	 * Created By: M R Shafiquddin Ahmed
	 * Modified By: Sravan, Govardhan
	 * Date: Feb 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param Nil
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void closeDataBrowser() throws Exception {
		if (web.exists("/web:window[@title='Data*']/web:document[@index='0']",10)){
			///web:window[@title='Data*]']/web:document[@index='0']/web:img[@alt='Cancel*' or @id='jdeclose_ena']

			//web.window("/web:window[@title='Data*']/web:document[@index='0']").close();
			web.image("/web:window[@title='Data*']/web:document[@index='0']/web:img[@alt='Close*']").focus();
			web.image("/web:window[@title='Data*']/web:document[@index='0']/web:img[@alt='Close*']").click();
			Thread.sleep(3000);

			int cnt=0;
			while(web.exists("/web:window[@title='Data*']/web:document[@index='0']")|| web.exists("/web:window[@title='Browser Close Detection*' or @title='Browser"+spaceChar+"Close"+spaceChar+"Detection*'")) {

				Thread.sleep(1000);
				info("DataBrowser is being closed...");
				cnt++;
				if(cnt>60){
					testFailure("Unable to close the DataBrowser");
					colNames.clear();
					bDB=false;
					return;
				}
			}

			info("The Existing Data Browser Closed !! ");
		} 
		colNames.clear();
		bDB=false;
		//closeQuerySelector();
	}
	/************************************************************************************************************
	 * Function: incrementValidationCount
	 * Description: This function increments the validation count variable by the number being passed as an argument
	 * Input Parameters: 
	 * 		@param incrementBy: No of validations that need to be added to validation count
	 * **********************************************************************************************************/

	public void incrementValidationCount(@Arg("No: of validations to be incremented")int incrementBy) throws Exception{
		valCount=valCount+incrementBy;
		if(isCITRun)
			 OSPreferences("Fail");
	}
	/************************************************************************************************************
	 * Function: printValidationCount
	 * Description: This function prints the number of validations being carried out in the script. To be called in the 
	 * finish section of every script
	 * **********************************************************************************************************/

	public void printValidationCount() throws Exception{
		info("Total Validations in the script = " +valCount);
	}
	
	/************************************************************************************************************
	 * Function: printValidationCount
	 * Description: This function has 2 major roles.These functionalities are only carried out if the script has run from top to bottom ie: bStart and bEnd Flags are true.The functionalities are:
	 * 				a)count no: of nodes validated through xml tests and add to overall validation count variable(valCount)
	 * 				b)get total validations in script and write to ScriptName-Validations.txt file inside script folder
	 * This function should be called within the finish section of every script.
	 * 
	 * Arguments : bStart: startFlag value passed from the script. Boolean.
	 * 			   bEnd: endFlag value passed form the script.Boolean.
	 * 			   sPath: Complete path of the jwg file of the script calling this function. String.
	 * **********************************************************************************************************/
	public void printValidationCount(boolean bStart,boolean bEnd,String sPath) throws Exception{
		info("Starting function printValidationCount");
		if(bStart&&bEnd)
			{
			
			String filePath[]=sPath.split("\\\\");
			String javaFilePath="";
			for(int i=0;i<filePath.length-1;i++)
				javaFilePath=javaFilePath+filePath[i]+"\\";
			javaFilePath=javaFilePath+"script.java";
			info(javaFilePath);
			
			int nodeCount=0;
			try
			{
				BufferedReader br = new BufferedReader(new FileReader(javaFilePath));
			    String line;
			    while ((line = br.readLine()) != null) {
			    	if(line.contains("attrTest"))
			    	{
			    		//info(line);
			    		nodeCount+=1;
			    	}
			       // process the line.
			    }
			    br.close();
			    info("No: of validations from XMLs:"+nodeCount);
			}catch (Exception e){}
			info("No: of non XML Validations in script:"+valCount);
			valCount=valCount+nodeCount;
			info("Total no: of validations in script : "+ valCount);
			try{
				
			info("Script ran from top to bottom. Writing validation count to properties file");
			
			String newPath=sPath.replace(".jwg", "-Validations.txt");
			info(newPath);
			String sDate=getDate("MM/dd/yy");
			File file=new File(newPath);
			
			FileWriter fw = new FileWriter(file);
			BufferedWriter bw = new BufferedWriter(fw);
			bw.write(sDate+"<<=>>"+valCount);
			bw.close();
			fw.close();
			}catch(Exception e){e.printStackTrace();}
			}
		else
		{
			info("Script did not run top to bottom. No: of validations in the run script block:"+valCount);
		}
		
	}

	/************************************************************************************************************
	 * Function: closeQuerySelector
	 * Description: Closes Query Selector along with data browser window
	 * Created By:Govardhan
	 * Date: May 2012
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param Nil
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void closeQuerySelector() throws Exception	{
		if (web.exists("/web:window[@title='Data*']/web:document[@index='0']",5)){
			web.window("/web:window[@title='Data*']/web:document[@index='0']").close();
			while(web.exists("/web:window[@title='Data*']/web:document[@index='0']",2)) {
				info("DataBrowser is being closed...");
				Thread.sleep(1500);
			} // while
			info("The Existing Data Browser Closed !! ");
		} // if
		colNames.clear();
		tableNames.clear();
		bDB=false;
		if (web.exists("/web:window[@title='Query*']/web:document[@index='0']",5))		{
			web.window("/web:window[@title='Query*']/web:document[@index='0' or @name='Data*']").close();
			while(web.exists("/web:window[@title='Query*']/web:document[@index='0']",2)) {
				info("Query Selector is being closed...");
				Thread.sleep(1500);
			} // while
			info("The Existing Query Browser Closed !! ");
			qsFlag=false;
		} // if	
		printValidationCount();
	}

	/************************************************************************************************************
	 * Function: openDataBrowser
	 * Description: Used to launch queryselector tool and then open tables
	 * Created By: Prakruthi Ram
	 * Modified By: Sravan, Govardhan
	 * Date: Jan 2011
	 * To be incorporated:
	 * Input Parameters:
	 *          @param sTable - table name to be opened each is seperated string by a comma.
	 * Returns:
	 *                @return Nil
	 * **********************************************************************************************************
	 */

	public void openDataBrowser(@Arg("sTable") String sTable) throws Exception{
		info("Starting: Function OpenDataBrowser with these Tables Passed: " + sTable);
		int rsSize=0;
		ResultSet rs = null, rs1 = null;
		sTable=sTable.toUpperCase();
		closeDeadDataBrowsers();  // Only Databrowser table windows open, close Orphan data browser windows.
		if((sTable ==null)||(sTable.length()==0)){
			OSPreferences("Fail");
			fail("Failure: Invalid Table Name or No Tables passed in OpenDataBrowser, Exiting Function");
			return;            
		}
		info("Opening Data Browser");
		String sDataBrowser = "/web:window[@title='Query*']/web:document[@index='0' or @name='DataBrowser']";
		//Added By Govardhan.
		if(!qsFlag ||!(web.exists(sDataBrowser))) {
			fastPath("databrowser");
			Thread.sleep(5000);
			if(!web.window("/web:window[@title='Query*']").exists()){
				//web.textBox("//web:input_text[@id='TE_FAST_PATH_BOX']").focus();
				//web.textBox("//web:input_text[@id='TE_FAST_PATH_BOX']").pressEnter();
				web.link("//web:a[@id='fastPathButton']").focus();
				web.link("//web:a[@id='fastPathButton']").click();
				Thread.sleep(3000);
			}
			web.window("/web:window[@title='Query*']").maximize();
			if(web.exists(sDataBrowser,80)){
				//Set the Table radio button
				web.radioButton(sDataBrowser+"/web:form[@index='0']/web:input_radio[(@name='targetType' and @value='table') or @index='2']").select();
				info("Data browser Opened Successfully");
			}else{
				OSPreferences("Fail");
				getLogger().error("Failure: Data browser Failed To Open, Exiting Function");
				beginStep("[openDataBrowser]  Failed: Data browser Failed To Open, Exiting Function", 0);
				{
					fail("Failure: Data browser Failed To Open, Exiting Function");
				}endStep();
				return;              
			}
		}else {
			web.radioButton(sDataBrowser+"/web:form[@index='0']/web:input_radio[@index='0']").select();
			Thread.sleep(2000);
			web.radioButton(sDataBrowser+"/web:form[@index='0']/web:input_radio[(@name='targetType' and @value='table') or @index='2']").select();
		}
		qsFlag=true;

		sTableName=sTable.trim();
		String datasource="";
		Boolean bBadRecord = false;
		web.textBox(sDataBrowser+"/web:form[@index='0']/web:input_text[@id='tableName']").click();
		web.textBox(sDataBrowser+"/web:form[@index='0']/web:input_text[@id='tableName']").setText(sTableName);
		web.textBox(sDataBrowser+"/web:form[@index='0']/web:input_text[@id='tableName']").fireEvent("onBlur");
		web.textBox(sDataBrowser+"/web:form[@index='0']/web:input_text[@id='tableName']").pressTab();
		web.textBox(sDataBrowser+"/web:form[@index='0']/web:input_text[@id='dataSource']").click();
		think(5);
		int w=0;
		do {
			Thread.sleep(1000);
			w++;
			//info(w+ ": before checking for bad record");
			if(w==10 && web.textBox(sDataBrowser+"/web:form[@index='0']/web:input_text[@id='tableName']").getAttribute("OuterHTML").contains("BACKGROUND")){
				for(int i=0;i<4;i++){
					bBadRecord=(Boolean)TableQuery(sTableName);
					if(!bBadRecord){
						break;
					}
				}

			}
			if(w == 60){
				OSPreferences("Fail");
				getLogger().error("Failure: Table Open, DSN failed to default for table:" + sTableName);
				bBadRecord = true;
				beginStep("[openDataBrowser]  Failed Table Open, DSN failed to default for table:" + sTableName, 0);
				{
					fail("Failure: Table Open, DSN failed to default for table:" + sTableName);
				}endStep();
				return;
			}
			datasource=web.textBox(sDataBrowser+"/web:form[@index='0']/web:input_text[@id='dataSource']").getAttribute("value");
		}while(datasource==null);
		if(!bBadRecord){
			web.button(sDataBrowser+"/web:form[@index='0']/web:input_button[@value='OK']").focus();
			web.button(sDataBrowser+"/web:form[@index='0']/web:input_button[@value='OK']").click();
			w=0;
			while(w<100&&(!(web.exists("/web:window[@title='Data Browser - "+ sTableName.toUpperCase() +"*']",1)||web.exists("/web:window[@title='Data"+spaceChar+"Browser"+spaceChar+"-"+spaceChar+""+ sTableName.toUpperCase() +"*']",1)))){
				info("waiting "+w);
				if(web.exists("/web:window[@index='2']")){
					info("3rd window");
				}
				Thread.sleep(1000);
				w++;
			}
			if(web.exists(sDBBrowser+"/web:table[@className='JSGridQTPClass' and @id='jdeGrid*']",20)){
				info("Table Open, Table: " + sTable + " opened successfully");  
			}else{
				getLogger().error("Failure: Table Open , Table: " + sTable + " Never Opened");
				beginStep("[openDataBrowser]  Failed Table Open , Table: " + sTable + " Never Opened", 0);
				{
					getStepResult().setError("Failure: Table Open , Table: " + sTable + " Never Opened");
				}endStep();
			}
		}
		else {
			getLogger().error("Failure: Table Open, Table Name: " + sTable + " was invalid");
			bBadRecord = true;
			beginStep("[openDataBrowser]  Failed Table Open, Table Name: " + sTable + " was invalid", 0);
			{
				getStepResult().setError("Failure: Table Open, Table Name: " + sTable + " was invalid");
			}endStep();
		}

		/*if(tableNames.size()==0) {
			try {
				rs=DSNConnection("TableNames");
				if(rs!=null){
					while(rs.next()){
						//info("putting");
						String tabName = rs.getString(1);
						tabName=tabName.toUpperCase().trim();
						tableNames.put(tabName,tabName);	
					}
					//rs.close();
				}			
			}catch(Exception e) {e.printStackTrace();}finally {
				if(rs!=null) {
					rs.close();
				}
			}
		}*/
		//String DBsCaped[]={"F43C01","F40G02","F43C10","S40G03","F43C11","F43E11","F4311","F4301","F43121","F0911","F4111","F0101","F4211","F47046","F47047","F03B11","F4101","F4102","F0006","FF30L501","F0413","F0414","F03012","F03B11","F03B14","F03B13","F0101Z2","F03012Z1","F0902","F90CB020","F4812","F4801","F4201","F060116","F060118","F060119","F4801T","F1201","F1721","F06116","F75A9096","F75A0010","F06106","F07210","F0709","F07350","F0618","F0713","F0719","F06146","F06145","F06116Z1","F0627","F4602","F4960","F31B85","F31B65","F31B70","F4111","F40G03","F0411","F3711","F03B112","F4822","F4074","F41511","F52G11","F52G05","F31B93","F31B66","F4812H","F4822H","F5280W","F31B75","F31B31"};
		if(web.exists(sDBBrowser+"/web:form[@id='E1PaneForm']/web:select[(@id='gtab*' or @name='gtab*') and multiple mod 'False']",2)){
			if(web.exists(sDBBrowser+"/web:a[@text='Customize Grid']")){
				web.link(sDBBrowser+"/web:a[@text='Customize Grid']").click();
				think(5);
				int iWebListCount = web.selectBox("/web:window[@title='"+sTableName+"*']/web:document[@index='0']/web:form[@name='JDE' or @index='0']/web:select[(@id='selectedTab' or @index='0') and multiple mod 'False']").getOptions().size();                       
				for(int i=0;i<iWebListCount;i++){
					web.button("/web:window[@title='"+sTableName+"*']/web:document[@index='0']/web:form[@name='JDE']/web:input_button[@value='Delete' or @index='2']").click();
					think(10);
				}
				web.button("/web:window[@title='"+sTableName+"*']/web:document[@index='0']/web:form[@name='JDE']/web:input_button[@value=' Close ' or @index='3']").click();
				think(10);
			}             
		}
		int iDBGridColCnt = 0, isCaptured=0;
		String gridId="",gridIDNum="";
		/*if(!web.exists(sDBBrowser+"/web:table[@className='JSGridQTPClass' ]",60)){
			info("refreshing data browser window");
			web.window(sDBBrowserWindow).refresh();
		}*/
		if(web.exists(sDBBrowser+"/web:table[@className='JSGridQTPClass' ]",60)){
			gridId =web.table(sDBBrowser+"/web:table[@className='JSGridQTPClass' ]").getAttribute("id");
			gridIDNum =  gridId.substring(7);
			iDBGridColCnt=web.table(sDBBrowser+"/web:table[@id='jdeGridHeaderData"+gridIDNum+"']").getColumnCount();
		} else{
			getLogger().error("Failure:[openDataBrowser] Grid - Unable to identify the grid from table "+sTableName);
			beginStep("FAILED: [openDataBrowser]  Grid - Unable to identify the grid from table "+sTableName, 0);
			{
				getStepResult().setError("Failure: [openDataBrowser]  Grid - Unable to identify the grid from table "+sTableName);
			}endStep();
		} 
		if(tableNames.containsKey(sTableName)){
			isCaptured=1;
			bDB=true;
			try {
				rs1=DSNConnection(sTableName);
				while (rs1.next()){
					String colname=rs1.getString(1);
					colname=colname.replaceAll(" ", "");
					colname=colname.replaceAll("&#37;", "%");
					colname=colname.replaceAll("&#39;", "'");
					colname=colname.replaceAll("&#45;", "-");
					colname=colname.replaceAll("&#40;", "(");
					colname=colname.replaceAll("&#41;", ")");
					colname=colname.replaceAll("&#42;", "*");
					colname=colname.replaceAll("&#43;", "+");
					boolean keyExists=checkIfKeyExists(colname);
					int dup=1;
					String colmn=colname;
					while(keyExists) {
						colname=colmn+"_dup"+dup;
						keyExists=checkIfKeyExists(colname);
						dup++;
					}
					colNames.put(colname, rsSize++);
				}
				info("col names are"+colNames);
			}catch(Exception e) {
				info("Table "+sTableName+" not found in DBData.xls");
				isCaptured=0;
			}finally {
				if(rs1!=null)
					rs1.close();
			}
		}
		if(isCaptured == 0 ){
			setErrorRecovery(BasicErrorRecovery.ERR_FILE_NOT_FOUND, ErrorRecoveryAction.Fail);
			bDB=true;
			executeJSCode();
			colNames.clear();
			for(int ivx =0; ivx<iDBGridColCnt-1; ivx++){
				String col[]=web.document(sDBBrowser).executeJsFunction("getColLabel",gridIDNum,Integer.toString(ivx));
				col[0]=col[0].replaceAll(" ", "");
				col[0]=col[0].replaceAll("&#37;", "%");
				col[0]=col[0].replaceAll("&#39;", "'");
				col[0]=col[0].replaceAll("&#45;", "-");
				col[0]=col[0].replaceAll("&#40;", "(");
				col[0]=col[0].replaceAll("&#41;", ")");
				col[0]=col[0].replaceAll("&#42;", "*");
				col[0]=col[0].replaceAll("&#43;", "+");
				boolean keyExists=checkIfKeyExists(col[0]);
				int dup=1;
				String colmn=col[0];
				while(keyExists) {
					col[0]=colmn+"_dup"+dup;
					keyExists=checkIfKeyExists(col[0]);
					dup++;
				}
				colNames.put(col[0], ivx);
				if((ivx>0)&&(ivx%100==0)){//This will refresh the application after catching every 100 column headers
					info("Refreshing data browser after every 100 column ");
					browserRefresh();                            
				}
			}
			info("col names are"+colNames);
		}
		info("Finished: Function OpenDataBrowser ");

	}
	/*******************************************************************************************************
	 * @Function: checkIfKeyExists
	 * @Description: Used by OpenDataBrowser function, to check if a key exists in hashmap or not
	 * 
	 * ****************************************************************************************************
	 */
	private boolean checkIfKeyExists(String colname) {
		String s=""+colNames.get(colname);
		if(s.equals("null")) {
			return false;
		}else {
			return true;
		}
	}
	/*******************************************************************************************************
	 * @Function: TableQuery
	 * @Description: Used by OpenDataBrowser function, to check no errors exists after entering table name in query selector page
	 * 
	 * ****************************************************************************************************
	 */
	private boolean TableQuery(String sTableName) throws Exception{
		String sDataBrowser = "/web:window[@title='Query Selector']/web:document[@index='0' or @name='DataBrowser']";
		web.radioButton(sDataBrowser+"/web:form[@index='0']/web:input_radio[@index='0']").select();
		Thread.sleep(3000);
		web.radioButton(sDataBrowser+"/web:form[@index='0']/web:input_radio[(@name='targetType' and @value='table') or @index='2']").select();
		Thread.sleep(3000);
		web.textBox(sDataBrowser+"/web:form[@index='0']/web:input_text[@id='tableName']").click();
		web.textBox(sDataBrowser+"/web:form[@index='0']/web:input_text[@id='tableName']").setText(sTableName);
		web.textBox(sDataBrowser+"/web:form[@index='0']/web:input_text[@id='tableName']").fireEvent("onBlur");
		web.textBox(sDataBrowser+"/web:form[@index='0']/web:input_text[@id='tableName']").pressTab();
		web.textBox(sDataBrowser+"/web:form[@index='0']/web:input_text[@id='dataSource']").click();
		Thread.sleep(10000);
		if(web.textBox(sDataBrowser+"/web:form[@index='0']/web:input_text[@id='tableName']").getAttribute("OuterHTML").contains("BACKGROUND")){
			return true;
		}
		else{
			return false;
		}
	}

	/************************************************************************************************************
	 * Function: DSNConnection
	 * Description: Called by the OpenDataBrowser Function to read column names from DBData.xls
	 * Created By: Sravan
	 * Date: Apr 2011
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param sTable : Table name
	 * Returns: 
	 * 		@return ResultSet: result set with column names
	 * **********************************************************************************************************
	 */
	private ResultSet DSNConnection(String sTable) throws Exception{
		//info("Starting: Function DSNConnection ");
		Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
		Statement stmt=null;
		ResultSet rs=null;
		try{
			stmt= DriverManager.getConnection("jdbc:odbc:Databrowser","","").createStatement();
			rs = stmt.executeQuery("select ColNames from ["+sTable+"$]");
		}catch(SQLException s){

		}
		//info("Finished: Function DSNConnection ");
		return rs;
	}
	/************************************************************************************************************
	 * Function: validateDataBrowserData
	 * Description: This function validates large chunks of data browser data and returns all failures as Column=Value pairs along with row number 
	 * Created By: Praneetha Dodda
	 * Date: January  2013
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *       	@param exported : Location of actual Data sheet genarates from application in CSV format
	 *      	@param existing: Location of expected Data sheet stored by user in CSV format
	 * Returns: 
	 *          @return Nil
	 * **********************************************************************************************************
	 */
	public void validateDataBrowserData(@Arg("existing") String existing,@Arg("exported") String exported) throws Exception{
		String actL="",expL="",actLine = "",expLine = "",expColumns="",actColumns,actCell,expCell;
		String[] actCol,expCol;
		StringTokenizer act = null,exp = null;
		int actRow=0,expRow=0,row = 0, count=0,i;
		/*String scPath=getScriptPackage().getScriptPath();
		System.out.println(scPath);
		if(!existing.endsWith(".csv")){
			existing=existing+".csv";
		}
		String filePath=scPath+"\\resources\\"+existing;*/
		setErrorRecovery(BasicErrorRecovery.ERR_GENERIC_ERROR_CODE, ErrorRecoveryAction.Fail);
		setErrorRecovery(WebErrorRecovery.ERR_OBJECT_NOT_FOUND_ERROR,ErrorRecoveryAction.Fail);
		String sDBBrowserExport="/web:window[@index='2']/web:document[@index='0']";
		clickToolBarImage("Find");
		clickOnGotoEnd();
		syncFrame();
		while(web.exists(sDBBrowserExport+"/web:form[@name='JDEFETCHUPDATE']/web:input_button[@id='STOP' or @value='  Stop and view results  ']",10)){
			Thread.sleep(2000);
		}

		if(web.exists(sDBBrowser+	"/web:img[@alt='Export Grid Data (Ctrl + Shift + E)' or @id='jdehtmlExportData']")){
			web.image(sDBBrowser+	"/web:img[@alt='Export Grid Data (Ctrl + Shift + E)' or @id='jdehtmlExportData']").click();
			Thread.sleep(3000);
		}else{
			web.window(sDBBrowserWindow).capturePage();
			fail("Export to Grid Image not found");
		}
		if(web.exists(sDBBrowserExport+"/web:form[@name='JDE' or @index='1']/web:input_radio[@id='expImpFileType3']")){
			web.radioButton(sDBBrowserExport+"/web:form[@name='JDE' or @index='1']/web:input_radio[@id='expImpFileType3']").click();
			Thread.sleep(3000);
			web.radioButton(sDBBrowserExport+"/web:form[@name='JDE' or @index='1']/web:input_radio[@id='expImpFileType3']").select();
			Thread.sleep(3000);
		}else{
			web.window("/web:window[@index='2']").capturePage();
			fail(" Radio button export to CSV not found");
		}
		if(web.exists(sDBBrowserExport+"/web:img[@alt='Continue (Ctrl+Alt+E)' or @id='hc1']")){
			web.image(sDBBrowserExport+"/web:img[@alt='Continue (Ctrl+Alt+E)' or @id='hc1']").click();
			Thread.sleep(5000);
		}else{
			web.window("/web:window[@index='2']").capturePage();
			fail(" Continue to Grid Image not found");
		}
		File export=new File(exported);
		boolean success = export.delete();
		if (success) {
			info("[DeleteFile]:"+exported+"  found and Deleted successfully");
		}else {
			info("File not exists");
		}
		setErrorRecovery(WebErrorRecovery.ERR_OBJECT_NOT_FOUND_ERROR,ErrorRecoveryAction.Ignore);
		String version=getIEVersion();		 
		if(version.equals("8")||version.equals("7"))
		{
			while(web.exists("/web:dialog_unknown[@index='0' and @text='Do you want*']",10)){
				info("the dialog open CSV exist");
				String txt=web.dialog("/web:dialog_unknown[@index='0']").getAttribute("text");
				web.dialog("/web:dialog_unknown[@index='0']").focus();
				if(txt.equals("Do you want to open or save this file?")){
					web.dialog("/web:dialog_unknown[@index='0']").clickButton(1);
				}else{
					web.dialog("/web:dialog_unknown[@index='0']").clickButton(0);
				}

				Thread.sleep(6000);			
			}
			info("the dialog save CSV clicked");
			Thread.sleep(10000);
			if(web.exists("/web:dialog_unknown[@text='Save*' and @index='0']", 10)){
				info("the dialog save as exist");
				while(web.exists("/web:dialog_unknown[@text='Save*' and @index='0']", 10)){
					web.dialog("/web:dialog_unknown[@text='Save*' or @index='0']").setText(0,exported);
					web.dialog("/web:dialog_unknown[@text='Save*' or @index='0']").clickButton(0);
					Thread.sleep(5000);
				}
			}else{
				fail("save As dialog box does not exists");
			}
			Thread.sleep(4000);
			if(web.exists("/web:dialog_unknown[@text='Download Complete']",3)){
				web.dialog("/web:dialog_unknown[@text='Download Complete' ]").clickButton(2);
				Thread.sleep(1000);
			}	
		}else {
			while(web.notificationBar(sDBBrowserWindow).exists(10, TimeUnit.SECONDS)){
				info("the dialog open CSV exist");
				web.notificationBar(sDBBrowserWindow).selectOptionBy("Save", "Save as");
				/*web.notificationBar(sDBBrowserWindow)
			.selectOptionBy("Save", "Save as");*/
				Thread.sleep(6000);
				info("the dialog save CSV clicked");
				Thread.sleep(10000);

				if(web.exists("/web:dialog_unknown[@text='Save As' ]", 10)){
					info("the dialog save as exist");
					web.dialog(314,
					"/web:dialog_unknown[@text='Save As']")
					.setText(0, exported);
					web.dialog(343,
					"/web:dialog_unknown[@text='Save As']")
					.clickButton(0);
					info("Save as dialog box clicked");
					Thread.sleep(10000);


					web.notificationBar(sDBBrowserWindow).clickButton(4);

					break;
				}else{
					fail("save As dialog box does not exists");
				}

			}
		}
		setErrorRecovery(WebErrorRecovery.ERR_OBJECT_NOT_FOUND_ERROR,ErrorRecoveryAction.ReportErrorAndContinue);

		export=new File(exported);
		if(export.exists()){
			info("File Exported Successfully");
		}else{
			fail("Failed to export the file");
		}

		////		CSV Files validation starts here
		try	{
			//create BufferedReader to read csv file
			BufferedReader actualFile = new BufferedReader( new FileReader(exported));
			BufferedReader expectedFile = new BufferedReader( new FileReader(existing));
			//Two more reader instances to get the rows count
			BufferedReader actualFile1 = new BufferedReader( new FileReader(exported));
			BufferedReader expectedFile1 = new BufferedReader( new FileReader(existing));

			while((actL = actualFile1.readLine()) != null){actRow++;}
			while((expL = expectedFile1.readLine()) != null){expRow++;}

			if(actRow==expRow){                        

				//read comma separated file line by line
				while( ((actLine = actualFile.readLine())!= null)&&((expLine = expectedFile.readLine())!= null)){
					row++;

					if(row==1){
						expColumns=expLine;
						actColumns=actLine;
					}

					if(actLine.equalsIgnoreCase(expLine)){
						info(row+" Row Passed Successfully");
						continue;
					}else{
						act = new StringTokenizer(actLine, ",");
						exp = new StringTokenizer(expLine, ",");
						while((act.hasMoreTokens())){
							count++;
							actCell=act.nextToken().replace("\"", "");
							expCell=exp.nextToken().replace("\"", "");
							if(actCell.equalsIgnoreCase(expCell)){
								continue;
							}else{
								if(row==1){
									fail("Column "+actCell+" Not Found"); 
								}else{		                        					   
									expCol=expColumns.split(",");

									fail(expCol[count-1]+" = "+expCell+" failed at row : "+row+ " Actual Value is "+actCell);
								}//Cells content mismatch other than columns

							}//Else for Cell's content mismatch


						}//While Loop : Cell wise comparison
					}//Else :High level Row wise comparison

				}// FileReading Line by Line While Loop
				// System.out.println(row);   
			}else{ 
				setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.Fail);
				fail("Actual Row Count :"+actRow+""+" :And Expected Row Count :"+expRow+" : are not matching");

			}
		}catch(Exception E){
			info(E.getMessage());
		}
		count=count-1;
		valCount=valCount+(row*count);
		setErrorRecovery(BasicErrorRecovery.ERR_GENERIC_ERROR_CODE, ErrorRecoveryAction.ReportErrorAndContinue);
		//=============================================================================================
	}

	/************************************************************************************************************
	 * Function: closeDeadDataBrowsers
	 * Description: Called by the CloseEOneBrowsers Function to close All DataBrowsers when multiples are left
	 * 				open after a test completes
	 * Created By: Prakruthi Ram
	 * Modified By: Sravan, Govardhan
	 * Date: Jan 2011
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param Nil
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void closeDeadDataBrowsers() throws Exception	{
		info("Starting: Function CloseDeadDataBrowsers ");
		int i=0;
		while(web.exists("/web:window[@title='Data*']/web:document[@index='"+i+"']",5)){
			info("Data browser found.");
			web.window("/web:window[@title='Data*']").close();
			Thread.sleep(5000);
			while(web.exists("/web:window[@title='Data*']/web:document[@index='0']",2)) {
				info("DataBrowser is being closed...");
				Thread.sleep(1500);
			}
			info("The Existing Data Browser Closed.");
			i++;
		}
		if (web.exists("/web:window[@title='Query*']/web:document[@name='Data*']",5)&& qsFlag==false){
			info("Query browser found.");
			web.window("/web:window[@title='Query*']").close();
			Thread.sleep(5000);
			while(web.exists("/web:window[@title='Query*']/web:document[@index='0']",2)) {
				info("Query Selector is being closed...");
				Thread.sleep(1500);
			}
			qsFlag=false;
			info("The Existing Query Browser Closed."); 
		}
		bDB=false;
		colNames.clear();
		tableNames.clear();
		info("Finished: Function CloseDeadDataBrowsers ");
	}
	/************************************************************************************************************
	 * Function: clickOnImage
	 * Description: This Function Clicks the specified image on the page irrespective of componant.
	 * Created By: Govardhan
	 * Date: October 2012
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param imageDescription: Description of the image on the page.
	 * 		@param xPath: Complete path of the image.
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void clickOnImage(String imageDescription,String xPath) throws Exception {
		info("Starting: Function clickOnImage ");
		if (web.exists(xPath,15)){
			/*web.image(xPath).focus();
			web.image(xPath).mouseClick("<ENTER>",1,false);*/
			customClick(web.image(xPath));
			syncFrame();
			info("The Image "+imageDescription+" with X-Path "+xPath+" found and clicked");
		}
		else {
			getLogger().error("Failed: The image "+imageDescription+" with X-Path "+xPath+" is not found");
			web.window(e1BrowserWindow).capturePage();
			beginStep("[clickOnImage]  Failed ("+xPath+" Not Found)");
			{
				fail("The image with "+xPath+" is not found");
			}endStep();
			getLogger().error("Failed: The image "+imageDescription+" with X-Path "+xPath+" is not found");
		}
		//syncFrame();
		info("Finished: Function clickOnImage ");
	} //clickOnImage

	public void clickOnImage(String imageDescription,String attr,String value) throws Exception {
		checkFrame();
		info("Starting: Function clickOnImage ");			
		String path=e1Browser+"/web:img[@"+attr+"="+"'"+value+"']";
		if(web.exists(path)){
			/*web.image(path).focus();
			web.image(path).click();*/
			customClick(web.image(path));
			syncFrame();
			info(" The Image "+imageDescription+" with " + attr + " ' " + value + " ' was found and clicked ");
		}else {
			getLogger().error("Failed: The Image "+imageDescription+" with " + attr + " ' " + value + " ' was not found ");
			web.window(e1BrowserWindow).capturePage();
			beginStep("[clickOnImage]  Failed (" + attr + " ' " + value + " ' Not Found)");
			{
				fail("The Image "+imageDescription+" with " + attr + " ' " + value + " ' was not found ");
			}endStep();
			getLogger().error("Failed: The Image "+imageDescription+" with " + attr + " ' " + value + " ' was not found ");
		}
		info("Finished: Function clickOnImage ");
	}
	/************************************************************************************************************
	 * Function: clickToolBarImage
	 * Description: This function is used to click the specified images on the Tool bar
	 * Created By: Harashita
	 * Modified By: Sravan
	 * Date: June 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *          @param sImageName: Name of the Image which is there on the Tool Bar.
	 * Returns: 
	 *          @return Nil
	 * **********************************************************************************************************
	 */
	public void clickToolBarImage (@Arg("sImageName") String sImageName)throws Exception {       
        int i=0;
        boolean flag = false;
        String sImage=sImageName;
        sImage=sImage.replaceAll("'", "&apos;");
        do{
              if (!bDB){
                    checkFrame();
                    if(docIndex==null){
                          getDocIndex();
                    }
                    String bro;
                    if(isModalForm){
                          bro=e1Browser;
                    }else{
                          bro="/";
                    }
                    if(sImageName.equalsIgnoreCase("Delete")){
                          if (web.exists(bro+"/web:img[@alt='"+sImage+"*']",15)){
                          //web.image(bro+"/web:img[@alt='"+sImage+"*']").mouseClick(5,5);//click();
                                web.image(bro+"/web:img[@alt='"+sImage+"*']").click();
                                Thread.sleep(1000);
                                //syncFrame();
                                info("Tool Bar Image "+sImageName+" found and clicked");
                                flag = true;
                          }
                    }else{
                          if(sImage.equals("About")){
                                if(web.exists("//web:img[@alt='About (Ctrl+Shift+J)']",10)){
                                      customClick(web.image("//web:img[@alt='About (Ctrl+Shift+J)']"));
                                }else if(web.exists("//web:a[@text='About (Ctrl+Shift+J)']",10)){
                                      customClick(web.element("//web:a[@text='About (Ctrl+Shift+J)']"));
                                }else if(web.exists("//web:td[@text='About (Ctrl+Shift+J)']",10)){
                                      customClick(web.element("//web:td[@text='About (Ctrl+Shift+J)']"));
                                }
                                Thread.sleep(2000);
                                syncFrame();
                                info("Tool Bar Image "+sImageName+" found and clicked");
                                flag = true;                                    
                          }else{
                                if (web.exists(bro+"/web:img[@alt='"+sImage+"*']",15)){                                
                                      //customClick(web.image(bro+"/web:img[@alt='"+sImage+"*']"));                                                
                                      //Thread.sleep(2000);
                                      //syncFrame();
                                      //info("Tool Bar Image "+sImageName+" found and clicked");
                                      //flag = true;
                                      DOMElement toolBarEle = web.element(e1Browser+"/web:table[@id='WebMenuBarFrame']");
                                      List<DOMElement> eleUnderTable = toolBarEle.getElementsByTagName("img");
                                      for(DOMElement images : eleUnderTable){
                                            String alt =images.getAttribute("alt");
                                            if(alt!=null&&alt.contains(sImage)){
                                                  info("Image alt property : "+alt);
                                customClick(images);    
                                Thread.sleep(2000);
                                syncFrame();
                                info("Tool Bar Image "+sImageName+" found and clicked");
                                flag = true;
                                break;
                          }
                                      }//End for
                                } 
                          }
                    }
              } else {
                    if(sImage.equalsIgnoreCase("Close")){
                          closeDataBrowser();
                          return;
                    }
                    if (web.exists(sDBBrowser+"/web:img[@alt='"+sImage+"*']",10)){
                         customClick(web.image(sDBBrowser+"/web:img[@alt='"+sImage+"*']"));
                          syncFrame();
                          think(5);
                          info("Tool Bar Image "+sImageName+" found and clicked");
                          flag = true;
                    }     
              }
              if(i<3){
                    Thread.sleep(2000);
                    i++;
              }else{
                    break;
              }
        }while(!flag);
        if(!flag){
              OSPreferences("ReportErrorAndContinue");
              getLogger().error("Failed: Tool Bar image "+sImageName+" not found");
              if (!bDB){
                    web.window(e1BrowserWindow).capturePage();
              }else{
                    web.window(sDBBrowser).capturePage();
              }
              beginStep("[ClickToolBarImage]  Failed ("+sImageName+"Not Found)");
              {
                    fail("Tool Bar image "+sImageName+" not found");
              }endStep();
              getLogger().error("Tool Bar image "+sImageName+" not found");
        }
        //checkFrame();
  }


	/************************************************************************************************************
	 * Function: clickOnGotoEnd
	 * Description: This Function Clicks on the 'Go to end' image on the page 
	 * Created By: Vineetha
	 * Date: AUGUST 2014
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param Nil
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */

	public void clickOnGotoEnd() throws Exception{
		clickOnGotoEnd(0);
	}

	public void clickOnGotoEnd(int gridIndex) throws Exception{
		info("Starting: Function clickOnGotoEnd ");

		if (!bDB) {
			checkFrame();
			if(docIndex==null){
				getDocIndex();                     
			}
			if(web.exists(e1Browser+"/web:img[@alt='Go to end' or @id='jdehtmlGridDown']["+gridIndex+"]", 15))	{
				customClick(web.image(e1Browser+"/web:img[@alt='Go to end' or @id='jdehtmlGridDown']["+gridIndex+"]"));
				syncFrame();
				info("'Go to end' image is  found and clicked");
			}else{

				web.window(e1BrowserWindow).capturePage();

				warn("'Go to end' image is not found");

			}
		}else{
			if(web.exists(sDBBrowser+"/web:img[@alt='Go to end' or @id='jdehtmlGridDown']", 15)){
				customClick(web.image(sDBBrowser+"/web:img[@alt='Go to end' or @id='jdehtmlGridDown']"));
				syncFrame();
				info("'Go to end' image is  found in the DataBrowser and clicked");
			}else{
				web.window(sDBBrowserWindow).capturePage();

				warn("'Go to end' image is not found in the DataBrowser Window");

			}
		}
		info("Finished: Function clickOnGotoEnd");
	}

	/************************************************************************************************************
	 * Function: fastPath
	 * Description: Executes a fastPath statement in EnterpriseOne 9.0 and above
	 * Created By: M R Shafiquddin Ahmed
	 * Modified By: Sravan
	 * Date: July 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param appName: the Application ID and version of the app to be run
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void fastPath(String appName) throws Exception{
		//System.out.println(web.exists("//web:input_text[@id='TE_FAST_PATH_BOX' ]",5));
		//clearing the gridid's stored
		//info("In fastpath grid ids::::"+gridIds);
		gridIds.clear();
		if (!(web.exists("//web:input_text[@id='TE_FAST_PATH_BOX' ]",60))){
			info("Fastpath box not identified in 1st attempt...");
			//closeQuerySelector();
			if(web.exists("//web:div[@id='drop_mainmenu']")){
				web.element("//web:div[@id='drop_mainmenu']").click();
				Thread.sleep(1000);
			}
			Thread.sleep(2000);
			if (!(web.exists("//web:input_text[@id='TE_FAST_PATH_BOX' ]",5))){
				info("Fastpath box not identified in 2nd attempt...");
				String title=null,sTit;
				sTit="JD Edwards*";
				int cnt=0;
				do{
					title=web.document(e1Browser).getAttribute("title");
					cnt++;
					if(cnt>60){
						break;
					}
				}while(title==null);
				info("Application at : "+title);
				if(title!=null&&title.equalsIgnoreCase("JD Edwards*"))	{
					info("Application at homepage...logging out and logging in...");
					closeEOneBrowser();
					int appender=checkColumnExists("newUser");
					if(appender==0)
						startE1();
					else
					{
						appender=checkColumnExists("newPwd");
						if(appender==0)
						{
							newUserLogin((String)datatable.getGlobalDatatable().getValue("Global", 0, "newUser"));
						}
						else
						{
							newUserLogin((String)datatable.getGlobalDatatable().getValue("Global", 0, "newUser"),(String)datatable.getGlobalDatatable().getValue("Global", 0, "newPwd"));
						}

					}
					Thread.sleep(1000);
					web.textBox("//web:input_text[@id='TE_FAST_PATH_BOX']").click();
				}
				/*else{
					info("Not at home page...");
					//web.object(e1BrowserWindow+"/web:document[@name='E1MENUMAIN*']/web:form[@id='e1MFastpathForm']/web:input_text[@id='TE_FAST_PATH_BOX']").click();
					web.window(e1BrowserWindow).refresh();
					Thread.sleep(1000);
				}*/
			}

		}

		if (!(web.exists("//web:input_text[@id='TE_FAST_PATH_BOX']",10))){
			OSPreferences("Fail");
			getLogger().fatal("Function Fastpath Exiting. E1 page does not exist.");
			fail("E1 page does not exist. Exit Out");
			web.window(e1BrowserWindow).capturePage();
			beginStep("[FastPath]  Failed (E1 Session in Unknown State)", 0);
			{
				getStepResult().setError("Function Fastpath Exiting. E1 page does not exist.");
			}endStep();
		}
		if(!appName.equalsIgnoreCase("DataBrowser")){
			if(bDB){
				closeDataBrowser();
				//closeQuerySelector();
			}
			//aFldArry=new String[0];
		}
		for(int i=0; i<11; i++) {
			if(docIndex==null){
				if(web.window("/web:window[@title='HTTP*']").exists()){
					web.window("/web:window[@title='HTTP*']").back();
				}
				Thread.sleep(2000);
				web.textBox("//web:input_text[@id='TE_FAST_PATH_BOX']").click();
				DOMDocument e1doc=web.frame("//web:iframe[@id='e1menuAppIframe']").getContentDocument();

				docIndex=e1doc.getAttribute("DocumentIndex");


			}
			if(web.exists(e1Browser))
				preTitle=web.document(e1Browser).getAttribute("title");
			//System.out.println(preTitle);
			if(preTitle==null) {
				Thread.sleep(2000);
				continue;
			}
			preTitle=preTitle.replace(spaceChar, " ");
			if(docIndex!=null){
				break;
			}
		}// for
		int linkcount=0;
		if(preTitle!=null&&preTitle.startsWith("Batch Versions - ")){
			preTitle=preTitle.replace("Batch Versions - ", "");
		}
		//System.out.println(preTitle);
		for(int i=0;;i++) {
			///web:window[@index='0' or @title='JD Edwards*']/web:document[@name='E1MENUMAIN*']/web:a[@text='Work With Batch Versions - Available Versions 41' ]
			if(web.exists(e1BrowserWindow+"/web:document[@name='E1MENUMAIN*']/web:a[@text='"+preTitle+"*']["+i+"]",3)){
				++linkcount;
			} else {
				//info("linkcount : "+linkcount);
				break;
			}
		}
		setErrorRecovery(WebErrorRecovery.ERR_OBJECT_NOT_FOUND_ERROR,ErrorRecoveryAction.Ignore);
		web.textBox("//web:input_text[@id='TE_FAST_PATH_BOX']").click();
		Thread.sleep(1000);
		web.textBox("//web:input_text[@id='TE_FAST_PATH_BOX']").setText(appName);
		Thread.sleep(2000);
		web.link("//web:a[@id='fastPathButton']").focus();
		web.link("//web:a[@id='fastPathButton']").click();

		//web.textBox("//web:input_text[@id='TE_FAST_PATH_BOX']").pressEnter();
		info("fastpath image is clicked");
		setErrorRecovery(WebErrorRecovery.ERR_OBJECT_NOT_FOUND_ERROR,ErrorRecoveryAction.ReportErrorAndContinue);
		/*web.image("/web:window[@title='JD Edwards*']/web:document[@name='E1MENUMAIN*']/web:img[@alt='Fast Path']").focus();
		web.image("/web:window[@title='JD Edwards*']/web:document[@name='E1MENUMAIN*']/web:img[@alt='Fast Path']").click();*/
		Thread.sleep(1000);
		//web.window("/web:window[@title='JD Edwards*']").refresh();
		if (appName.equalsIgnoreCase("DataBrowser")||appName.startsWith("G")){ 
			info("Application " + appName + " launched from Fast Path.");
			return;        
		}
		int cnt=0;
		for (int waitTime=1;waitTime<31;waitTime++){			
			if (web.exists("/web:dialog_alert[@index='0']",3)) { //@index='0'
				String errText= web.alertDialog("/web:dialog_alert[@index='0']").getAttribute("text");
				//web.alertDialog("/web:dialog_alert[@index='0']").clickOk();
				getLogger().fatal(errText);
				OSPreferences("Fail");
				web.window("/web:window[@title='JD Edwards*']").capturePage();
				fail("FastPath Error.");
			}
			if (web.exists("//web:img[@alt='Help*']", 3) || web.exists("//web:img[@alt='About*']",3)||web.exists("//web:a[@text='About*']",3)){
				info("DocIndex From Fastpath:"+docIndex);
				if(docIndex==null){
					DOMDocument e1doc=web.frame("//web:iframe[@id='e1menuAppIframe']").getContentDocument();

					docIndex=e1doc.getAttribute("DocumentIndex");
					e1Document = "/web:document[@index='"+docIndex+"' or @name='e1menuAppIframe']";
					e1Browser=e1BrowserWindow+e1Document;

					String sTitle=web.document(e1Browser).getAttribute("title");
					if(sTitle!=null){
						sTitle=sTitle.replace(spaceChar, " ");
					}
					if(web.exists("//web:a[@text='*"+preTitle+"*']["+linkcount+"]",5)){
						//info("Hyper Link existed   "+web.object("/web:window[@title='JD Edwards*']/web:document[@name='*E1MENUMAIN*']/web:a[@text='"+preTitle+"*']["+i+"]").getAttribute("text"));//E1MENUMAIN
						break;
					}				
					if(sTitle==null)
						continue;
					if((sTitle.equalsIgnoreCase(preTitle))){
						cnt++;
						if(cnt>11){
							break;
						}
						continue;
					}
				}
				else
				{break;}

				/********************************This code is needed to wait until form is fully loaded***************************/
				try{
					setErrorRecovery(WebErrorRecovery.ERR_OBJECT_NOT_FOUND_ERROR, ErrorRecoveryAction.Ignore);
					DOMElement ele=web.element(e1BrowserWindow+"/web:document[@index='0' or @name='E1MENUMAIN*']/web:div[@id='OpenIndicatorFloatLyr']");
					while((ele!=null)&&(ele.exists())){
						String isVisible=ele.getAttribute("style");
						System.out.println(isVisible);
						if((isVisible!=null)&&(!isVisible.replace(" ", "").contains("display:none"))  ) {
							//System.out.println(isVisible);
							info("Page is still loading");
						}else{
							break;
						}
						DOMElement newele=web.element(e1BrowserWindow+"/web:document[@index='0' or @name='E1MENUMAIN*']/web:div[@id='OpenIndicatorFloatLyr']");
						if(newele!=null && newele.exists()){
							ele=newele;
						}
					}
				}catch (oracle.oats.scripting.modules.webdom.common.api.exception.PlaybackException e) {
					info("Exception "+e.getMessage());
				}
				setErrorRecovery(WebErrorRecovery.ERR_OBJECT_NOT_FOUND_ERROR, ErrorRecoveryAction.ReportErrorAndContinue);
				/********************************End***************************/

				/********************************This code is needed wait intil adf or jet forms are fully loaded***************************/
				DOMFrame extFrame=web.frame("//web:iframe[@id='e1ExternalAppIframe']");
				if(extFrame!=null && extFrame.exists()){
					String extFrameDisplay=extFrame.getAttribute("display");

					if(extFrameDisplay!=null&&(!extFrameDisplay.equalsIgnoreCase("none"))){
						DOMDocument e1doc=extFrame.getContentDocument();
						e1Document = "/web:document[@index='"+e1doc.getAttribute("DocumentIndex")+"'or @name='e1ExternalAppIframe']";
						e1Browser = e1BrowserWindow + e1Document;
						//System.out.println(e1Browser);
						List<DOMElement> frames= web.document(e1Browser).getElementsByTagName("iframe");
						//System.out.println(frames.size());
						for(DOMElement frame:frames){
							if(frame.getTag().equalsIgnoreCase("iframe")){
								DOMDocument dummyDoc=web.frame("//web:iframe[@id='"+frame.getAttribute("id")+"']").getContentDocument();
								//System.out.println(dummyDoc.getAttribute("DocumentIndex"));		

								String documentPath="/web:document[@index='"+dummyDoc.getAttribute("DocumentIndex")+"']";
								DOMElement parentDiv= web.element(e1BrowserWindow+documentPath+"/web:div[@id='loading']");
								//System.out.println(parentDiv);

								if(parentDiv!=null && parentDiv.exists()){
									String isVisible=parentDiv.getAttribute("style");
									System.out.println(isVisible);
									while((isVisible!=null)&&(!isVisible.replace(" ", "").contains("display:none"))  )     {
										info("Loading not completed");
										isVisible=parentDiv.getAttribute("style");
									}
									info("Loading completed");

								}
							}
						}
						for(DOMElement frame:frames){
							if(frame.getTag().equalsIgnoreCase("iframe")){
								DOMDocument dummyDoc=web.frame("//web:iframe[@id='"+frame.getAttribute("id")+"']").getContentDocument();
								//System.out.println(dummyDoc.getAttribute("DocumentIndex"));		

								String documentPath="/web:document[@index='"+dummyDoc.getAttribute("DocumentIndex")+"']";
								DOMElement parentDiv= web.element(e1BrowserWindow+documentPath+"/web:div[@id='loading']");
								//System.out.println(parentDiv);

								if(parentDiv!=null && parentDiv.exists()){
									String isVisible=parentDiv.getAttribute("style");
									System.out.println(isVisible);
									while((isVisible!=null)&&(!isVisible.replace(" ", "").contains("display:none"))  )     {
										info("Loading not completed");
										isVisible=parentDiv.getAttribute("style");
									}
									info("Loading completed");

								}
							}
						}
					}
				}

				DOMElement loadingStatus=web.element("//web:div[@id='ariaLog']");
				if(loadingStatus!=null && loadingStatus.exists()){
					String pageLoadingStatus=loadingStatus.getAttribute("text");
					if(loadingStatus==null || loadingStatus.equals("null")){
						info("Page is still loading");
					}else{
						syncFrame();
						if(!web.document(e1Browser).exists()){
							continue;
						}
						preTitle=web.document(e1Browser).getAttribute("title");
						if(preTitle!=null){
							preTitle=preTitle.replace(spaceChar, " ");
						}
						info("Application " + appName + " launched from Fast Path.");
						return;
					}
				}
			}
			/***************************************END*******************************************************/

			if (waitTime >= 30) {
				web.window(e1BrowserWindow).capturePage();
				beginStep("[FastPath]  Failed (E1 Session in Unknown State)", 0);
				{
					fail("fastPath Application " + appName + " failed to load with in " + (waitTime*6) + " seconds.");
				}endStep();
				getLogger().fatal("fastPath Application " + appName + " failed to load with in " + (waitTime*6) + " seconds.");
				info( "E1 Session in Unknown State. E1 Logging out and then Logging In Again");
				closeEOneBrowser();
				int appender=checkColumnExists("newUser");
				if(appender==0)
					startE1();
				else{
					appender=checkColumnExists("newPwd");
					if(appender==0)	{
						newUserLogin((String)datatable.getGlobalDatatable().getValue("Global", 0, "newUser"));
					}else{
						newUserLogin((String)datatable.getGlobalDatatable().getValue("Global", 0, "newUser"),(String)datatable.getGlobalDatatable().getValue("Global", 0, "newPwd"));
					}

				}
				fastPath(appName);
			}
		}
		//return false;
	}
	/************************************************************************************************************
	 * Function: setHeaderTextById
	 * Description: Used to enter data in a text field by passing its id(HTML Property) as identifying property
	 *************************************************************************************************************/
	public void setHeaderTextById(@Arg("id") String id, @Arg("fldName") String fldName, @Arg("sVal") String sVal)throws Exception {
		setHeaderText(id,fldName,sVal);
	}

	/************************************************************************************************************
	 * Function: setHeaderTextByName
	 * Description: Used to enter data in a text field by passing its name(HTML Property) as identifying property
	 *************************************************************************************************************/
	public void setHeaderTextByName(@Arg("name") String name, @Arg("fldName") String fldName, @Arg("sVal") String sVal)throws Exception {
		String modName="name="+name;
		setHeaderText(modName,fldName,sVal);
	}
	/************************************************************************************************************
	 * Function: setheadertext
	 * Description: Used to enter data in web edits present in the header part on the basis of index when Modal Form Exists
	 * Note: Following Attributes are present for input_text : class, id, name, value
	 * Created By: Sravan
	 * Date: April 2012
	 * Modified By: Yashin
	 * Date: September 2016
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *          @param id : HTML id of the text field 
	 *          @param fldName : Name/label of the text field
	 *          @param sVal :  value to be set in given text field
	 * Returns: 
	 *          @return Nil
	 * **********************************************************************************************************
	 */
	public void setHeaderText(@Arg("id") String id, @Arg("fldName") String fldName, @Arg("sVal") String sVal)throws Exception {
        checkFrame();
        if(docIndex==null){
              getDocIndex();
        }


        String objVal;
        String sVal1;
        String htmlId = null;
        String attr="id";
        DOMText txt=null,txt1=null;
        boolean isPresent = false;
        if(id.contains("name="))
        {
              id=id.split("=")[1];
              attr="name";
        }
        else
        {
              try{
                    int index=Integer.parseInt(id);
                    attr="index";
              }
              catch(NumberFormatException n)
              {
                    attr="id";
              }
        }
        sVal1=sVal.trim();
        String bro="";
        if((attr.equals("id")||attr.equals("name"))&&(isModalForm==false)&&(isADF==false)){
              bro="/";
        }else{
              bro=e1Browser;
        }


        isPresent= web.exists(bro+"/web:input_text[@"+attr+"='"+id+"']", 5);
        info("isPresent : "+isPresent);
        if (isPresent==true)
        {
              if(attr.equals("name"))
                    txt=web.textBox(bro+"/web:input_text[@"+attr+"='"+id+"']");
              else
              {
                    txt=web.textBox(bro+"/web:input_text[@"+attr+"='"+id+"']");
                    htmlId=txt.getAttribute("id");
                    info("ID for field "+fldName+" is "+htmlId);
              }
        }
        if (isPresent==true){   
              //Ensuring that the id passed corresponds to an editable text field



              String isDisabled=null;
              String readonly=null;
              try{
                    isDisabled=txt.getAttribute("disabled");
                    readonly=txt.getAttribute("readonly");
              }catch(Exception e){
                    //e.printStackTrace();
                    info("Exception Messgage : "+e);
              }
              info("isDisabled : "+isDisabled);
              info("readonly : "+readonly);
              if ((isDisabled==null||isDisabled.equalsIgnoreCase("false"))&&(readonly==null||readonly.equalsIgnoreCase("false"))){
                    info("text field with "+attr+" "+id+" corresponds to an editable field");
                    txt.click();
                    txt.setText(sVal);
                    txt.pressTab();
                    // web.textBox(e1Browser+"/web:form[]")
                    objVal=txt.getAttribute("value");info("objVal:::"+objVal);
                    try{ if ((browser.getBrowser() instanceof ChromeBrowser) || (browser.getBrowser() instanceof FireFoxBrowser) ||(browser.getBrowser() instanceof MicrosoftEdgeBrowser)){
                          DOMDocument document = web.document(e1Browser);
                          info("chrome");
                          //DOMDocument document = web.document("/web:window[@index='0']/web:document[@index='11']");

                          String curVal[]=null;

                          document.executeJavaScript("function getCurrentValue(){return document.getElementById('"+id+"').value;}");
                          //document.executeJavaScript("function getCurrentValue(){return top.document.getElementById('FavoriteName').value;}");
                          //document.executeJavaScript("function getCurrentValue(){return document.title;}");
                          curVal = web.document(e1Browser).executeJsFunction("getCurrentValue");   
                          info("current value :"+curVal[0]);
                          //objVal="";
                          objVal=curVal[0];
                    }
                    /*else{
                          if(objVal==null){
                                objVal="";
                          }
                    }*/}catch(Exception e){info("e.printStackTrace()");}
                    //info("objVal outside:::"+objVal);   
                    if(objVal==null){
                        objVal="";
                    }

                    if((objVal.startsWith("-")) || (objVal.endsWith("-"))){
                          if( (sVal1.startsWith("-"))||(sVal1.endsWith("-"))){
                                sVal1=sVal1.replace("-", ""); 
                                objVal=objVal.replace("-", "");
                          }
                    }
                    try{
                          double d1=Double.parseDouble(objVal);
                          double d2=Double.parseDouble(sVal1);
                          objVal=Double.toString(d1);
                          sVal1=Double.toString(d2);
                    }
                    catch(NumberFormatException e){        
                    }
                    info("sVal1 is: " +sVal1 +" objVal is: " +objVal);
                    if (sVal1.trim().length()>0&&objVal.trim().equalsIgnoreCase(sVal1))
                    {     
                          info("Text "+sVal+" is set in the web edit "+fldName+" with "+attr+"  "+id+"");      
                    }
                    else 
                       if(sVal1.trim().length()==0&&(objVal.trim().equals("*")||(objVal.trim().length()==0)))
                          {
                                info("Text "+sVal+" is set in the web edit "+fldName+" with "+attr+"  "+id+"");         
                          }
                          else 
                          {
                                CapturePage();
                                warn("WARNING:Text "+sVal+" was targeted to set in the web edit with "+attr+"  "+id+", however the values seen in the web edit after setting is "+objVal);
                          }
              }
              else 
              {
                    CapturePage();
                    testFailure("The "+attr+" , at which user is trying to set text, corresponds to an un-editable text field");
              }   
        }
        else 
        {
              CapturePage();
              testFailure("The "+attr+" , at which user is trying to set text, is not present on the displayed page");
        } 
  }

	 /************************************************************************************************************	
	  * @Function: validateVAExistsInHeaderText
	  * Description: This function is used to validate whether visual assist exists in particular header text field
	  * Created By: Spurthi 	 			
	  * Input Parameters: 
	  *          @param id - id of the header text field to be validated for visual assist        
	  *          @param sExist - (true/false) true for presence and false for abscense
	  * Returns:Nil 
	  * Example: validateVAExistsInHeaderText("C0_198", false);    
	 ****************************************************************************************************************/
	public void validateVAExistsInHeaderText (@Arg("id")String id, @Arg("sExist")boolean isExist) throws Exception{
		info("Starting :Function validateVAExistsInHeaderText");
		
		if(web.exists("//web:input_text[@id='"+id+"']", 5)){
			String VAid="";
			if (id.startsWith("C0_")){//PO for Procession options page
				VAid = id.replaceAll("" +
					"C", "va");
			}else if(id.startsWith("PO")){
				VAid = id.replaceAll("" +
					"P", "va");
			}
			
			boolean ispresent = web.exists("//web:img[@id='"+VAid+"' and @alt='Visual Assist (F2)']", 5);
			if(ispresent){
				
				if(isExist)
              {info("validateVAExistsInHeaderText PASSED : Visual Assist is present for the the test field with id "+VAid);	
              }
				else {
              CapturePage();
              reportFailure("validateVAExistsInHeaderText FAILED : Visual Assist is not present for  the text field with id "+VAid);
              }
				
			}else{
				if(!isExist)
              {info("validateVAExistsInHeaderText PASSED : Visual Assist is not present for the text field with id "+VAid);	
              }
				else {
              CapturePage();
              reportFailure("validateVAExistsInHeaderText FAILED : Visual Assist is present for the text field with id "+VAid);
              }				
			}
		}else{
			CapturePage();
			reportFailure("[validateVAExistsInHeaderText] FAILED : The textfield with id "+id+" is not present on the page");

		}
		incrementValidationCount(1);
		info("Finished :Function validateVAExistsInHeaderText");
	}	
	
	/************************************************************************************************************
	 * Function: clickHeaderTextVA
	 * Description: Used to click visual assist for web edits present in the header part on the basis of index
	 * Note: Following Attributes are present for input_text : class, id, name, value
	 * Created By: Prakruthi
	 * Date: July 2011
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param index: index of web edit
	 * 		@param fldName: web edit box name
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void clickHeaderTextVA (String id,String fldName) throws Exception{
		checkFrame();
		if(docIndex==null){
			getDocIndex();
		}
		String objClass; 
		String objVal;
		String htmlId = null;
		String attr="id";
		DOMText txt=null,txt1=null;
		try{
			int index=Integer.parseInt(id);
			attr="index";
		}catch(NumberFormatException n){
			attr="id";
		}
		boolean isPresent = false;
		String bro="";
		if((attr.equals("id"))&&(isModalForm==false)){
			bro="/";
		}else{
			bro=e1Browser;
		}
		isPresent= web.exists(bro+"/web:input_text[@"+attr+"='"+id+"']", 5);
		if (isPresent==true){
			txt=web.textBox(bro+"/web:input_text[@"+attr+"='"+id+"']");
			htmlId=txt.getAttribute("id");
			info("ID for field "+fldName+" is "+htmlId);
			//htmlId=web.textBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_text[@"+attr+"='"+id+"']").getAttribute("id");
			if ((htmlId.startsWith("C0_"))||(htmlId.startsWith("PO"))||(htmlId.startsWith("LIT"))){//PO for Procession options page & LIT for literal
				isPresent=true;
			}else{
				isPresent=false;
			}
		}
		if (isPresent==true){
			//Ensuring that the index passed corresponds to an editable text field
			if(htmlId.startsWith("C0_")){
				objClass=txt.getAttribute("className");
			}else{
				objClass=txt.getAttribute("type");
			}
			//objClass=web.textBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_text[@id='"+id+"']").getAttribute("className");
			if (((objClass.contains("textfield"))&&(htmlId.startsWith("C0_")))||((objClass.equalsIgnoreCase("text"))&&((htmlId.startsWith("PO"))||(htmlId.startsWith("LIT"))))){
				info("id "+id+" corresponds to an editable field");
				txt.click();
				Thread.sleep(4000);
				pressKeyChar("F2");
				Thread.sleep(2000);
				//info("Pressed F2 key");
				syncFrame();
			}else {
				web.window(e1BrowserWindow).capturePage();
				beginStep("[clickHeaderTextVA]  Failed (Invalid Index: Un-editable field)");
				{
					testFailure("The "+attr+"  "+id+", at which user is trying to click visual assist, corresponds to an un-editable text field");
				}
				endStep();
				getLogger().error("The "+attr+"  "+id+", at which user is trying to click visual assist, corresponds to an un-editable text field");
			}			
		}
	}
	/************************************************************************************************************
     * Function: getFrameName
     * Description: This Function returns the title of the current application frame 
      * Created By: Praneetha Dodda
     * Date: October 2013
     * Modified By: Yashin Bidar
     * 
      *Date: July 2016
     *Modified By: Rupa
     *Date: Sept  2017
     * To be incorporated: Nil
     * Input Parameters: 
      *          @Nil 
      * Returns: 
      *          @return  Title of the current Frame
     * **********************************************************************************************************
     */
     public String getFrameName() throws Exception {

           checkFrame();
           if(isCITRun)
                 OSPreferences("Fail");
           String title;
           if(isADF)
           {
                 title=web.document("/web:window[@index='0']/web:document[@index='10' or @name='e1menuAppIframe']").getTitle();
                 if(title==null||title.equalsIgnoreCase(""))
                 {

                       if(web.element("/web:window[@index='0']/web:document[@index='"+docIndex+"']/web:div[@id='pgl1']").exists())
                             title=(String) web.element("//web:div[@id='pgl1']").getAttribute("innertext");
                       else
                             title=(String) web.element("//web:span[@id='jdeFormTitle*']").getAttribute("text");    
                 }

           }
           else 
                 //System.out.println("isModalForm"+isModalForm);
                 if(isModalForm)
                 {
                       title=web.document(e1Browser).getAttribute("title");

                 }

                 else
                 {
                       getDocIndex();
                       if(web.element("//web:span[@id='jdeFormTitle*']").exists()){						
                             title=web.element("//web:span[@id='jdeFormTitle*']").getAttribute("text");  
							
                       }else if(web.element("/web:window[@index='0']/web:document[@index='10']/web:span[@id='jdeFormTitle*']").exists()){
						   title=web.element("/web:window[@index='0']/web:document[@index='10']/web:span[@id='jdeFormTitle*']").getAttribute("text"); 
					   }else{   
                       //Changes done  for identifying homePage
						   if(web.exists("//web:span[@className='appname'][1]",10))
						   {
							   info("Checking main page title as frame title was not found");
							   title=web.element("//web:span[@className='appname'][1]").getAttribute("text");
							}
						   else
                             title=web.document(e1Browser).getAttribute("title");
                            //title=web.document(e1Browser).getElementsByTagName("title").get(0).getDisplayText();
                      
                       }
                       if(title==null)
                       {

                             Thread.sleep(2000);
                             title=web.document(e1Browser).getAttribute("title");
                       }
                       if(title!=null)
                       {
                             //info( "[getFrameName] Passed: Navigated to Frame with title: " + title);
                             title=title.replace(spaceChar, " ").trim();

                       }
                       else
                       {
                             CapturePage();
                             testFailure("Actual Frame : "+ title);


                       }
                 }
           /*if(title.equalsIgnoreCase("Select Application Failure Header Label")){
                 OSPreferences("Fail");
                 CapturePage();
                 fail("Application ended in [Select Application Failure Header Label], terminating execution");                  
           }*/
		  
           return title;
     }

	/************************************************************************************************************
	 * Function: validateFrame
	 * Description: This Function validates the title of the current application frame 
	 * Created By: Sravan Jonnadula
	 * Date: September 2010
	 * Modified By: Yashin Bidar
	 * Date: July 2016
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param sTitle: Expected Title of the Frame
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void validateFrame(@Arg("sTitle") String sTitle) throws Exception {
		info("Starting function validateFrame");
		boolean failure=false;

		String title=null;
		title=(String)getFrameName();
		info("title:"+title);
		if(title!=null)
		{
			title=title.replace(spaceChar, " ").replace("  ", " ");
			
			sTitle=sTitle.replace(spaceChar, " ").replace("  ", " ");
			
			if(sTitle.trim().equalsIgnoreCase("JD Edwards EnterpriseOne")||sTitle.trim().equalsIgnoreCase("JD Edwards")||sTitle.trim().contains("JD Edwards"))
			{
				if(title.trim().equalsIgnoreCase("JD Edwards EnterpriseOne")||title.trim().equalsIgnoreCase("JD Edwards"))
				{
					// passed
				}
				else
				{
					failure=true;
				}
			}
			else 
				if(title.trim().equalsIgnoreCase(sTitle.trim()))
				{
					// passed			
				}
				else
				{		
					failure=true;
				}
		}
		else
		{
			failure=true;
		}

		if(failure==false){
			info( "[validateFrame] Passed: Navigated to Frame with title: " + title);
		}
		else{
			web.window(e1BrowserWindow).capturePage();
			beginStep("[validateFrame]  Failed: Expected Frame Title not exist");
			{
				testFailure("Expected Frame Title: "+ sTitle + " Actual Frame Title: "+ title);
			}
			endStep();
			getLogger().error(" validateFrame  Failed, Expected Frame Title: "+ sTitle + " Actual Frame Title: "+ title);

		}
		valCount=valCount+1;
	}

	/************************************************************************************************************
	 * Function: clickOk
	 * Description: This function is used to click on the OK button name in the dialog box.
	 * Created By: M R Shafiquddin Ahmed
	 * Date: September 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param Nil
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void clickOk() throws Exception{
		if (web.exists("/web:dialog_alert[@index='0']",2)){
			web.alertDialog("/web:dialog_alert[@index='0']").clickOk();
			info("Web Button Ok Clicked");
		}else{
			web.window(e1BrowserWindow).capturePage();
			beginStep("[clickOk]  Failed: Alert Dialog box does not Exists");
			{
				testFailure("Dialog Box does not Exist");
			}
			endStep();
			info(" [clickOk]  Failed:, Dialog Box does not Contain Button");
		}
	}

	/************************************************************************************************************
	 * Function: clickOkCancel
	 * Description: This function is used to click on the specified button name in the dialog box.
	 * Created By: M R Shafiquddin Ahmed
	 * Date: September 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param sButtonName: The button name on the dialog box that needs to be clicked.
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void clickOkCancel(String sButtonName) throws Exception{
		if ((sButtonName.toLowerCase().equals(("Cancel").toLowerCase()))){
			if (web.confirmDialog("/web:dialog_confirm[@index='0']").exists()){
				web.confirmDialog("/web:dialog_confirm[@index='0']").clickCancel();
				info("WebButton "+sButtonName +" Clicked   ");				
			}else{
				web.window(e1BrowserWindow).capturePage();
				beginStep("[clickOkCancel]  Failed: Confirmation box does not Exists");
				{
					testFailure("Confirmation Box does not Exist");
				}
				endStep();
				info(" [clickOkCancel]  Failed:, Confirmation Box does not Contain ' "+sButtonName +" ' Button");
			}
		}else{
			if (web.confirmDialog("/web:dialog_confirm[@index='0']").exists()){
				web.confirmDialog("/web:dialog_confirm[@index='0']").clickOk();
				info("WebButton "+sButtonName +" Clicked   ");
			}else{
				web.window(e1BrowserWindow).capturePage();
				beginStep("[clickOkCancel]  Failed: Confirmation box does not Exists", 0);
				{
					testFailure("Confirmation Box does not Exist");
				}
				endStep();
				info(" [clickOkCancel]  Failed:, Confirmation Box does not Contain ' "+sButtonName +" ' Button");
			}
		}
	}	



	/************************************************************************************************************
	 * Function: clickWebButton
	 * Description: This Function Clicks the given WebButton avaliable on page.
	 * Created By: Sravan Jonnadula
	 * Date: October 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param iIndex: index of the button.if there is two button on a same name then 
	 * 						index would be 0 for the first button and 1 for the second button
	 * 		@param sButtonName: Label of the button.
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void clickWebButton(@Arg("iIndex") int iIndex,@Arg("sButtonName") String sButtonName) throws Exception {
		checkFrame();
		info("Starting clickWebButton");
		if(docIndex==null){
			getDocIndex();
		}
		String bro;
		if(isModalForm){
			bro=e1Browser;
		}else{
			bro="/";
		}
		if(web.exists(bro+"/web:input_button[@value='"+sButtonName+"']["+iIndex+"]" ,20)){
			info("WebButton with index "+iIndex+" Exists");
			//String getisDisabled=web.button(bro+"/web:input_button[@value='"+sButtonName+"']["+iIndex+"]").getAttribute("isDisabled");
			String getisDisabled=web.button(bro+"/web:input_button[@value='"+sButtonName+"']["+iIndex+"]").getAttribute("disabled");
			info("getisDisabled: "+getisDisabled);
			if(getisDisabled!=null&&getisDisabled.toUpperCase().equals("FALSE")){ //assuming button is the value of attribute class
				if(sButtonName.equalsIgnoreCase("Delete")||sButtonName.equalsIgnoreCase("Remove")){
					web.button(bro+"/web:input_button[@value='"+sButtonName+"']["+iIndex+"]").focus();
					//web.button(bro+"/web:input_button[@value='"+sButtonName+"']["+iIndex+"]").mouseClick(5, 5);
					web.button(bro+"/web:input_button[@value='"+sButtonName+"']["+iIndex+"]").click();
				}else{
					web.button(bro+"/web:input_button[@value='"+sButtonName+"']["+iIndex+"]").focus();
					customClick(web.button(bro+"/web:input_button[@value='"+sButtonName+"']["+iIndex+"]"));
				}
				syncFrame();
				info("WebButton "+sButtonName+" Clicked");
			}
			else{
				web.window(e1BrowserWindow).capturePage();				
				testFailure("[clickWebButton] Failed: WebButton "+sButtonName+" not enabled");
			}

		} else{
			web.window(e1BrowserWindow).capturePage();			
			testFailure("[clickWebButton] Failed: WebButton "+sButtonName+" not found");
		}
		//checkFrame();
		info("Finished clickWebButton");
	}

	/************************************************************************************************************
	 * Function: clickOnButton 
	 * Description: This function is used to click on button in script 'User_defined_favorite_and_reports'.
	 * Created By: Ghulam Quadir 
	 * Date: Sep 2016 
	 * Modified By: 
	 * To be incorporated: Nil 
	 * InputParameters:
	 * @param sWindowTitle :Title of the popup window in which button is present
	 * @param sButtonId :HTML id of that button
	 * @param sAttributeValue: Avlue of that attribute
	 * @param sButtonName : Name of the button for automator reference.
	 * @return Nil 
	 * Example: 
	 * clickOnButton("Remove Favorite","button_1","OK")//To click on button in popuwindow 'Remove Favorite' having id=button_1 and name=OK
	 *         ****************************************
	 */
	//This is a local function for "User_defined_favorite_and_reports' Script.
	public void clickOnButton(String sWindowTitle,String sButtonId,String sButtonName) throws Exception
	{
		info("Starting:Function clickOnButton ");
		if (docIndex == null) {
			getScript("EOneUtility").callFunction("getDocIndex");             }
		sWindowTitle=sWindowTitle.trim();
		sButtonId=sButtonId.trim();
		sButtonName=sButtonName.trim();


		String browser1 = e1BrowserWindow+"/web:document[@name='E1MENUMAIN*']";
		DOMElement popupDiv=null;
		String elePath=browser1+"/web:div[@TITLE='"+sWindowTitle+"' ]";//Validating popup windows asssciated with Favorites.        
		//info("elePath="+elePath); 
		boolean popupNotFound=false;
		if(!web.exists(elePath,10))
		{
			popupNotFound=true;

		}
		String parentDivId="";
		if(sWindowTitle.equalsIgnoreCase("Add to Favorites"))
		{
			parentDivId="0_1_Fav_Add";
		}else if(sWindowTitle.equalsIgnoreCase("Manage Favorites")){
			parentDivId="0_1_Fav_Mang";
		}else if(sWindowTitle.equalsIgnoreCase("Remove All Favorites")){
			parentDivId="0_1_Fav_Remv_All5";
		}else if(sWindowTitle.equalsIgnoreCase("Remove Favorite")){
			parentDivId="0_1_Fav_Remv5";
		}else if(sWindowTitle.equalsIgnoreCase("Favorite Properties")){
			parentDivId="0_1_Fav_Pro";
		}

		if(popupNotFound==false)//Window is peresent
		{
			popupDiv=web.element(elePath); 
			if(popupDiv.exists() && popupDiv!=null)
			{
				Map<String, String> attr =popupDiv.getAttributes();

				String style=attr.get("style").toString();
				//String style=popupDiv.getAttribute("style");
				info("Style="+style); 
				if( ! style.contains("display: block")){
					popupNotFound=true;     
				}
			}else
			{
				popupNotFound=true;
			}
		}
		if(popupNotFound)
		{
			web.window(e1Browser).capturePage();
			testFailure("FAILED : Expected popup window "+sWindowTitle+" Not found on the page");
			return;
		}

		DOMElement ele=web.element(browser1+"/web:div[@id='"+parentDivId+"']/web:input_button[@id='"+sButtonId+"']");
		if((ele!=null) && (ele.exists()))
		{
			ele.click();
			info("PASSED : Element "+sButtonName+" Found and Clicked");
		}else
		{
			web.window(e1Browser).capturePage();
			testFailure("FAILED : Element "+sButtonName+" Not Found on the page");
			return;
		}
		Thread.sleep(4000);
		info("End:Function clickOnButton ");
	}

	/************************************************************************************************************
	 * Function: validateHeaderRadioButtonById
	 * Description: Used to Validate a radio button present in a radio group in the header is checked or not
	 * Created By: Yashin Bidar
	 * Date: September 2016
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *          @param id: html id of the radio buttion(index will also work)
	 *          @param fldName:Name of the radio button
	 *          @param isSel:Expected Status of radio button
	 * Returns: 
	 *          @return Nil
	 * **********************************************************************************************************
	 */
	public void validateHeaderRadioButtonById(@Arg("id")String id, @Arg("fldName")      String fldName, @Arg("isSel")boolean isSel) throws Exception {
		checkFrame();
		if(docIndex==null){
			getDocIndex();
		}
		String attr="id";
		try{
			int index=Integer.parseInt(id);
			attr="index";
		}
		catch(NumberFormatException n)
		{
			attr="id";
		}


		String bro="";
		if((attr.equals("id"))&&(isModalForm==false)&&(isADF==false))
		{
			bro="/";
		}
		else
		{
			bro=e1Browser;
		}

		if(web.exists(bro+"/web:input_radio[@"+attr+"='"+id+"']",20))
		{
			info("Radio Button with "+attr+" "+id+" found");
			boolean status=web.radioButton(bro+"/web:input_radio[@"+attr+"='"+id+"']").isSelected();                
			if(status==isSel)
			{                       
				if(isSel==true)
				{                             
					info("Radio Button '"+fldName+"' with "+attr+" "+id+" is set to ON");
				}
				else
				{
					info("Radio Button '"+fldName+"' "+attr+" "+id+" is set to OFF");
				}
			}
			else{
				if(isSel==true)
				{
					CapturePage();
					testFailure("Radio Button '"+fldName+"' with "+attr+" "+id+" is not set ON");

				}
				else
				{
					CapturePage();
					testFailure("Radio Button '"+fldName+"' with "+attr+" "+id+"  is not set to OFF");
				}
			}                 
		}
		else
		{
			CapturePage();    
			testFailure("Radio Button '"+fldName+"' with "+attr+" "+id+" not found on the page");
		}
		incrementValidationCount(1);
	}


	/************************************************************************************************************
	 * Function: validateHeaderRadioButton
	 * Description: Used to Validate a radio button present in a radio group in the header is checked or not
	 * Created By: Sravan Jonnadula
	 * Date: October 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *          @param iIndex: Index of the radio buttion
	 *          @param fldName:Name of the radio button
	 *          @param isSel:Expected Status of radio button
	 * Returns: 
	 *          @return Nil
	 * **********************************************************************************************************
	 */
	public void validateHeaderRadioButton(@Arg("iIndex")int iIndex, @Arg("fldName")      String fldName, @Arg("isSel")boolean isSel) throws Exception {
		validateHeaderRadioButtonById(""+iIndex, fldName, isSel);
	}


	/************************************************************************************************************
	 * Function: setHeaderCheckBoxByIdDescription: Used to Set the check box as on or off present in headerCreated By: Yashin BidarDate: September 2016To be incorporated: NilInput Parameters:
	 *          @param id 
	 * @param fldName 
	 * @param sStatus 
	 * @return Nil
	 * **********************************************************************************************************
	 */
	public void setHeaderCheckBoxById(@Arg("id")
	String id, @Arg("fldName")
	String fldName, @Arg("sStatus")
	boolean sStatus)throws Exception {
		checkFrame();
		if(docIndex==null){
			getDocIndex();
		}
		String attr="id";
		String htmlId="";
		if(id.contains("name="))
		{
			id=id.split("=")[1];
			attr="name";
		}
		else
		{
			try
			{
				int index=Integer.parseInt(id);
				attr="index";
			}
			catch(NumberFormatException n)
			{
				attr="id";
			}
		}
		String prevAttr=attr;
		int flag=0;
		boolean chS;
		String bro;
		if((isModalForm==false)&&(isADF==false))
		{
			bro="/";
		}
		else
		{
			bro=e1Browser;
		}

		//for exisiting function calls that utilise index of checkboxes
		if(attr.equalsIgnoreCase("index"))
		{
			if(web.exists(e1Browser+"/web:input_checkbox[@"+attr+"='"+id+"']",20))
			{
				htmlId=web.checkBox(e1Browser+"/web:input_checkbox[@"+attr+"='"+id+"']").getAttribute("id");
				attr="id";
			}
			else
			{
				CapturePage();
				testFailure("Header CheckBox with "+attr+" "+id+" not found on page");
				return;
			}
		}
		else
		{
			htmlId=id;
		}

		if(web.exists(bro+"/web:input_checkbox[@"+attr+"='"+htmlId+"']",20)){               
			info("HeaderCheckBox "+fldName+" with "+prevAttr+" "+id+" found");

			web.checkBox(bro+"/web:input_checkbox[@"+attr+"='"+htmlId+"']").focus();
			web.checkBox(bro+"/web:input_checkbox[@"+attr+"='"+htmlId+"']").check(sStatus);
			syncFrame();
			String chStatus=web.checkBox(bro+"/web:input_checkbox[@"+attr+"='"+htmlId+"']").getAttribute("checked");
			if(chStatus.equalsIgnoreCase("True"))
			{
				chS=true;
			}
			else
			{
				chS=false;
			}

			if(chS==sStatus)
			{
				flag=1;                       
			}
			if(Boolean.toString(chS).equalsIgnoreCase(Boolean.toString(sStatus))) 
			{
				flag=1;
			}

			if(flag==1)
			{
				info("[setHeaderCheckBox] Passed: HeaderCheckBox "+fldName+" Set to "+chStatus);
			}
			else
			{
				CapturePage();    
				testFailure("[setHeaderCheckBox] Failed:Expected HeaderCheckBox "+fldName+" was not set to "+sStatus);
			}
		}
		else
		{
			CapturePage();    
			testFailure("[setHeaderCheckBox] Failed:HeaderCheckBox with "+prevAttr+" "+id+" found");

		}

	}


	/************************************************************************************************************
	 * Function: setHeaderCheckBox
	 * Description: Used to Set the check box as on or off present in header
	 * Created By: Sravan Jonnadula
	 * Date: September 2010
	 * Modified By: Yashin Bidar
	 * Date: September 2016
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *          @param iIndex: Index of the checkbox
	 *          @param fldName:Name of the checkbox field
	 *          @param sStatus:status to set true/false
	 * Returns: 
	 *          @return Nil
	 * **********************************************************************************************************
	 */
	public void setHeaderCheckBox(@Arg("iIndex")int iIndex, @Arg("fldName")String fldName, @Arg("sStatus")boolean sStatus)throws Exception {

		setHeaderCheckBoxById(""+iIndex,fldName,sStatus);
	}


	/************************************************************************************************************
	 * Function: setHeaderRadioButton
	 * Description: Used to Set a radio button present in a radio group in the header
	 * Created By: Sravan Jonnadula
	 * Date: October 2010
	 * Modified By:Yashin Bidar
	 * Date: September 2016
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *          @param iIndex: Index of the radio button to select
	 *          @param sButtonName:Name of the radio button
	 * Returns: 
	 *          @return Nil
	 * **********************************************************************************************************
	 */
	public void setHeaderRadioButton(@Arg("iIndex") int iIndex, @Arg("sButtonName") String sButtonName) throws Exception {
		String sArg=""+iIndex;
		setHeaderRadioButtonById(sArg, sButtonName);
	}

	/************************************************************************************************************
	 * Function: setHeaderRadioButtonById
	 * Description: Used to Set a radio button present in a radio group in the header
	 * Created By: Yashin Bidar
	 * Date: September 2016
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *          @param id: HTML ID of the radio button to select(will work even if index on the page is passed)
	 *          @param sButtonName:Name of the radio button
	 * Returns: 
	 *          @return Nil
	 * **********************************************************************************************************
	 */
	public void setHeaderRadioButtonById(@Arg("id") String id,  @Arg("sButtonName") String sButtonName) throws Exception {
		checkFrame();
		if(docIndex==null){
			getDocIndex();
		}
		String attr="id";
		try{
			int index=Integer.parseInt(id);
			attr="index";
		}
		catch(NumberFormatException n)
		{
			attr="id";
		}


		String bro="";
		if((attr.equals("id"))&&(isModalForm==false)&&(isADF==false))
		{
			bro="/";
		}
		else
		{
			bro=e1Browser;
		}

		if(web.exists(bro+"/web:input_radio[@"+attr+"='"+id+"']",20))
		{
			info("WebRadioButton with "+attr+" "+id+" found");
			boolean s=web.radioButton(bro+"/web:input_radio[@"+attr+"='"+id+"']").isSelected();
			web.radioButton(bro+"/web:input_radio[@"+attr+"='"+id+"']").click();
			Thread.sleep(1000);
			String status=web.radioButton(bro+"/web:input_radio[@"+attr+"='"+id+"']").getAttribute("status");
            if(status==null||status.isEmpty()||status=="")
                status=web.radioButton(bro+"/web:input_radio[@"+attr+"='"+id+"']").getAttribute("checked");
          
			if(status.toLowerCase().equals("true"))
			{
				info("Header Radio Button with "+attr+" "+id+" is selected");
			}
			else
			{
				CapturePage();
				testFailure("Header Radio Button with "+attr+" "+id+" is not selected");
			}
		}
		else
		{
			CapturePage();
			testFailure("Header Radio Button with "+attr+" "+id+" not found");
		}
	}


	/************************************************************************************************************
	 * Function: validateCheckBoxDisabled
	 * Description: Used to validate if the given checkbox is enabled or disabled
	 * Created By: Sravan Jonnadula
	 * Date: April 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param iIndex: Index of the checkbox field 
	 * 		@param fldName:Name of the given checkbox field
	 * 		@param sStatus:Status of the field
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void validateCheckBoxDisabled(@Arg("iIndex")int iIndex, @Arg("fldName")String fldName, @Arg("sStatus")boolean sStatus) throws Exception {
		checkFrame();
		info("Starting function [validateCheckBoxDisabled]");
		String disabled = "";
		int flag=0;
		if(web.exists(e1Browser+"/web:form[@id='E1PaneForm' or @index='2']/web:input_checkbox[@index='"+iIndex+"']",10)) {
			disabled = web.checkBox(e1Browser+"/web:form[@id='E1PaneForm' or @index='2']/web:input_checkbox[@index='"+iIndex+"']").getAttribute("disabled");
			if(disabled.equalsIgnoreCase(""+sStatus)) {
				if(disabled.equalsIgnoreCase("false"))
					info("Passed: CheckBox with index "+iIndex +" is enabled");
				else
					info("Passed: CheckBox with index "+iIndex +" is disabled");
			}
			else{
				web.checkBox(e1Browser+"/web:form[@id='E1PaneForm' or @index='2']/web:input_checkbox[@index='"+iIndex+"']").focus();
				web.window(e1BrowserWindow).capturePage();
				beginStep("[validateCheckBoxDisabled]  Failed: Expected CheckBox is Enabled", 0);
				{
					if(disabled.equalsIgnoreCase("true"))
						testFailure("Expected CheckBox with index "+iIndex +" is Disabled");
					else
						testFailure("Expected CheckBox with index "+iIndex +" is Enabled");
				}
				endStep();
				getLogger().error(" [validateCheckBoxDisabled]  Failed:, Expected Check Box Enabled");
			}
		}
		valCount=valCount+1;
		info("Finishing function [validateCheckBoxDisabled]");
	}
	/************************************************************************************************************
	 * Function: validateHeaderBorderColor  
	 * Description: This function is used to validate the border color of the specified header
	 * Created By: Praneetha
	 * Modified By: Anusha Bonam
	 * Date: August 2014
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *      @param id - Id of the field from application which starts with C0_ or P0
	 *          @param fldName   - Name of the Heder filed 
	 *          @param sColor - Border color of the cell in the webpage,
	 * Returns: 
	 *          @return Nil
	 * **********************************************************************************************************
	 */
	public void validateHeaderBorderColor(@Arg("id") String id,@Arg("fldName") String fldName, @Arg("sColor") String sColor) throws Exception {
		String bColor,bgColor,OHTML;
		String disabledColor[]=null;
		boolean failure=false;
		info("Starting:Function validateHeaderBorderColor "); 
		checkFrame();
		DOMText txt=web.textBox("//web:input_text[@id='"+id+"']"); 
		if(web.exists("//web:input_text[@id='"+id+"']",3)){
			bColor=txt.getAttribute("borderColor"); 
			bgColor=txt.getAttribute("backgroundColor"); 
			OHTML=txt.getAttribute("OuterHTML");  
			//info("OHTML:"+OHTML);
			try{	//info("in try");
				if (bColor!=null){
					//info("in b if");
					if (sColor.equalsIgnoreCase("red")){ 
						if ((bColor.equalsIgnoreCase("#ff0000"))||(bColor.equalsIgnoreCase("rgb(255, 0, 0)"))||(bColor.equalsIgnoreCase("rgb(255, 124, 124)"))||(bColor.equalsIgnoreCase("#ff7c7c"))){
							info("validateHeaderBorderColor Passed: Expected and Actual Color Matched");
						}else{
							web.window(e1BrowserWindow).capturePage();
							beginStep("[validateHeaderBorderColor] Failed: Mismatch in expected and actul color");
							{ 
								reportFailure("validateHeaderBorderColor:Expected color is: "+sColor+" but actual color is: "+bColor);
							}endStep(); 
						}
					}else if (sColor.equalsIgnoreCase("blue")){
						if ((bColor.equalsIgnoreCase("#00ffff"))||(bColor.equalsIgnoreCase("rgb(0, 255, 255)"))){
							info("validateHeaderBorderColor Passed: Expected and Actual Color Matched");
						}else{
							web.window(e1BrowserWindow).capturePage();
							beginStep("[validateHeaderBorderColor] Failed: Mismatch in expected and actul color");
							{ 
								reportFailure("validateHeaderBorderColor:Expected color is: "+sColor+" but actual color is: "+bColor);
							}endStep(); 
						}
					}else if (sColor.equalsIgnoreCase("yellow")){
						if ((bColor.equalsIgnoreCase("#ffff00"))||(bColor.equalsIgnoreCase("rgb(255, 255, 0)")) ||(bColor.equalsIgnoreCase("#ffff01"))||(bColor.equalsIgnoreCase("rgb(255, 255, 1)"))){
							info("validateHeaderBorderColor Passed: Expected and Actual Color Matched");
						}else{
							web.window(e1BrowserWindow).capturePage();
							beginStep("[validateHeaderBorderColor] Failed: Mismatch in expected and actul color");
							{ 
								reportFailure("validateHeaderBorderColor:Expected color is: "+sColor+" but actual color is: "+bColor);
							}endStep(); 
						}
					}else if (sColor.equalsIgnoreCase("green")){
						if ((bColor.equalsIgnoreCase("#00ff00"))||(bColor.equalsIgnoreCase("rgb(0, 255, 0)"))){
							info("validateHeaderBorderColor Passed: Expected and Actual Color Matched");
						}else{
							web.window(e1BrowserWindow).capturePage();
							beginStep("[validateHeaderBorderColor] Failed: Mismatch in expected and actul color");
							{ 
								reportFailure("validateHeaderBorderColor:Expected color is: "+sColor+" but actual color is: "+bColor);
							}endStep(); 
						}
					}
					else if ((sColor.equalsIgnoreCase("grey"))||(sColor.equalsIgnoreCase("gray"))){
						if ((bColor.equalsIgnoreCase("#DDDDDD"))||(bColor.equalsIgnoreCase("rgb(221, 221, 221)"))){
							info("validateHeaderBorderColor Passed: Expected and Actual Color Matched");
						}else{
							web.window(e1BrowserWindow).capturePage();
							beginStep("[validateHeaderBorderColor] Failed: Mismatch in expected and actul color");
							{ 
								reportFailure("validateHeaderBorderColor:Expected color is: "+sColor+" but actual color is: "+bColor);
							}endStep(); 
						}
					}
					else if (sColor.equalsIgnoreCase("pink")){
						if ((bColor.equalsIgnoreCase("#ff00ff"))||(bColor.equalsIgnoreCase("rgb(255, 0, 255)"))){
							info("validateHeaderBorderColor Passed: Expected and Actual Color Matched");
						}else{
							web.window(e1BrowserWindow).capturePage();
							beginStep("[validateHeaderBorderColor] Failed: Mismatch in expected and actul color");
							{ 
								reportFailure("validateHeaderBorderColor:Expected color is: "+sColor+" but actual color is: "+bColor);
							}endStep(); 
						}
					}else if (sColor.equalsIgnoreCase("purple")){
						if ((bColor.equalsIgnoreCase("#8e236b"))||(bColor.equalsIgnoreCase("rgb(142, 35, 107)"))){
							info("validateHeaderBorderColor Passed: Expected and Actual Color Matched");
						}else{
							web.window(e1BrowserWindow).capturePage();
							beginStep("[validateHeaderBorderColor] Failed: Mismatch in expected and actul color");
							{ 
								reportFailure("validateHeaderBorderColor:Expected color is: "+sColor+" but actual color is: "+bColor);
							}endStep(); 
						}
					}
					else if (sColor.equalsIgnoreCase("white")){
						if ((bColor.equalsIgnoreCase("#FFFFFF"))||(bColor.equalsIgnoreCase("rgb(255, 255, 255)"))){
							info("validateHeaderBorderColor Passed: Expected and Actual Color Matched");
						}else{
							web.window(e1BrowserWindow).capturePage();
							beginStep("[validateHeaderBorderColor] Failed: Mismatch in expected and actul color");
							{ 
								reportFailure("validateHeaderBorderColor:Expected color is: "+sColor+" but actual color is: "+bColor);
							}endStep(); 
						}
					}


					else{
						web.window(e1BrowserWindow).capturePage();
						beginStep("[validateHeaderBorderColor] Failed: Mismatch in expected and actul color");
						{ 
							reportFailure("validateHeaderBorderColor:Expected color is: "+sColor+" but actual color is: "+bgColor);
						}endStep(); 
					}
				}
				else if(bgColor!=null){
					//info("in bg if");
					if (sColor.equalsIgnoreCase("red")){ 
						if ((bgColor.equalsIgnoreCase("#ff0000"))||(bgColor.equalsIgnoreCase("rgb(255, 0, 0)"))||(bgColor.equalsIgnoreCase("rgb(255, 124, 124)"))||(bgColor.equalsIgnoreCase("#ff7c7c"))){
							info("validateHeaderBorderColor Passed: Expected and Actual Color Matched");
						}else{
							web.window(e1BrowserWindow).capturePage();
							beginStep("[validateHeaderBorderColor] Failed: Mismatch in expected and actul color");
							{ 
								reportFailure("validateHeaderBorderColor:Expected color is: "+sColor+" but actual color is: "+bgColor);
							}endStep(); 
						}
					}else if (sColor.equalsIgnoreCase("blue")){
						if ((bgColor.equalsIgnoreCase("#00ffff"))||(bgColor.equalsIgnoreCase("rgb(0, 255, 255)"))){
							info("validateHeaderBorderColor Passed: Expected and Actual Color Matched");
						}else{
							web.window(e1BrowserWindow).capturePage();
							beginStep("[validateHeaderBorderColor] Failed: Mismatch in expected and actul color");
							{ 
								reportFailure("validateHeaderBorderColor:Expected color is: "+sColor+" but actual color is: "+bgColor);
							}endStep(); 
						}
					}else if (sColor.equalsIgnoreCase("yellow")){
						if ((bColor.equalsIgnoreCase("#ffff00"))||(bColor.equalsIgnoreCase("rgb(255, 255, 0)")) ||(bColor.equalsIgnoreCase("#ffff01"))||(bColor.equalsIgnoreCase("rgb(255, 255, 1)"))){
							info("validateHeaderBorderColor Passed: Expected and Actual Color Matched");
						}else{
							web.window(e1BrowserWindow).capturePage();
							beginStep("[validateHeaderBorderColor] Failed: Mismatch in expected and actul color");
							{ 
								reportFailure("validateHeaderBorderColor:Expected color is: "+sColor+" but actual color is: "+bgColor);
							}endStep(); 
						}
					}else if (sColor.equalsIgnoreCase("green")){
						if ((bgColor.equalsIgnoreCase("#00ff00"))||(bgColor.equalsIgnoreCase("rgb(0, 255, 0)"))){
							info("validateHeaderBorderColor Passed: Expected and Actual Color Matched");
						}else{
							web.window(e1BrowserWindow).capturePage();
							beginStep("[validateHeaderBorderColor] Failed: Mismatch in expected and actul color");
							{ 
								reportFailure("validateHeaderBorderColor:Expected color is: "+sColor+" but actual color is: "+bgColor);
							}endStep(); 
						}
					}
					else if ((sColor.equalsIgnoreCase("grey"))||(sColor.equalsIgnoreCase("gray"))){
						if ((bgColor.equalsIgnoreCase("#DDDDDD"))||(bgColor.equalsIgnoreCase("rgb(221, 221, 221)"))){
							info("validateHeaderBorderColor Passed: Expected and Actual Color Matched");
						}else{
							web.window(e1BrowserWindow).capturePage();
							beginStep("[validateHeaderBorderColor] Failed: Mismatch in expected and actul color");
							{ 
								reportFailure("validateHeaderBorderColor:Expected color is: "+sColor+" but actual color is: "+bgColor);
							}endStep(); 
						}

					}
					else if (sColor.equalsIgnoreCase("pink")){
						if ((bgColor.equalsIgnoreCase("#ff00ff"))||(bgColor.equalsIgnoreCase("rgb(255, 0, 255)"))){
							info("validateHeaderBorderColor Passed: Expected and Actual Color Matched");
						}else{
							web.window(e1BrowserWindow).capturePage();
							beginStep("[validateHeaderBorderColor] Failed: Mismatch in expected and actul color");
							{ 
								reportFailure("validateHeaderBorderColor:Expected color is: "+sColor+" but actual color is: "+bgColor);
							}endStep(); 
						}
					}
					else if (sColor.equalsIgnoreCase("purple")){
						if ((bgColor.equalsIgnoreCase("#8e236b"))||(bgColor.equalsIgnoreCase("rgb(142, 35, 107)"))){
							info("validateHeaderBorderColor Passed: Expected and Actual Color Matched");
						}else{
							web.window(e1BrowserWindow).capturePage();
							beginStep("[validateHeaderBorderColor] Failed: Mismatch in expected and actul color");
							{ 
								reportFailure("validateHeaderBorderColor:Expected color is: "+sColor+" but actual color is: "+bgColor);
							}endStep(); 
						}
					}
					else if (sColor.equalsIgnoreCase("white")){
						if ((bgColor.equalsIgnoreCase("#FFFFFF"))||(bgColor.equalsIgnoreCase("rgb(255, 255, 255)"))){
							info("validateHeaderBorderColor Passed: Expected and Actual Color Matched");
						}else{
							web.window(e1BrowserWindow).capturePage();
							beginStep("[validateHeaderBorderColor] Failed: Mismatch in expected and actul color");
							{ 
								reportFailure("validateHeaderBorderColor:Expected color is: "+sColor+" but actual color is: "+bgColor);
							}endStep(); 
						}
					}

					else{
						web.window(e1BrowserWindow).capturePage();
						beginStep("[validateHeaderBorderColor] Failed: Mismatch in expected and actul color");
						{ 
							reportFailure("validateHeaderBorderColor:Expected color is: "+sColor+" but actual color is: "+bgColor);
						}endStep(); 
					}
				}
				else if((bColor==null)&&(bgColor==null)&&(sColor.equalsIgnoreCase("white"))){
					info("validateHeaderBorderColor Passed: Expected and Actual Color is white color which is matched");
				}
				else if((bColor==null)&&(bgColor==null)&&((sColor.equalsIgnoreCase("grey"))||(sColor.equalsIgnoreCase("gray")))){
					e1Document = "/web:document[@index='"+docIndex+"' or @name='e1menuAppIframe']";
					e1Browser=e1BrowserWindow+e1Document;
					DOMDocument document = web.document(e1Browser);
					/*web.element(bro+"/web:"+eleType+"[@id='"+id+"']").setSelectedJSElement();
                    document.executeJavaScript("function getDisColor(){return selectedOATSWebDomElement.currentStyle.backgroundColor;}");
                    disabledColor = web.document(e1Browser).executeJsFunction("getDisColor");  */ 
					document.executeJavaScript("function getDisColor(){return window.getComputedStyle(document.getElementById('"+id+"'),null).getPropertyValue('background-color');}");
					disabledColor = web.document(e1Browser).executeJsFunction("getDisColor");
					info("disabledColor:"+disabledColor[0]);
					if (disabledColor[0]!=null){
						//info("in b if");
						if ((sColor.equalsIgnoreCase("grey"))||(sColor.equalsIgnoreCase("gray"))){
							if ((disabledColor[0].equalsIgnoreCase("#DDDDDD"))||(disabledColor[0].equalsIgnoreCase("rgb(221, 221, 221)"))||(disabledColor[0].equalsIgnoreCase("rgb(244, 246, 247)"))||(disabledColor[0].equalsIgnoreCase("#f4f6f7"))){
								info("validateHeaderBorderColor Passed: Expected and Actual Color Matched");
							}else{
								CapturePage();
								reportFailure("validateHeaderBorderColor Failed:Expected color is: "+sColor+" and actual color is: "+disabledColor[0]);
							}
						} 
						else{
							CapturePage();
							reportFailure("validateHeaderBorderColor Failed:Expected color is: "+sColor+" and actual color is: "+disabledColor[0]);
						}
					}
					else{//info("in else");
						CapturePage();
						reportFailure("validateHeaderBorderColor:Color is null");
					}

				}
				else{//info("in else");
					web.window(e1BrowserWindow).capturePage();
					beginStep("[validateHeaderBorderColor] Failed: Border color  is null");
					{ 
						reportFailure("validateHeaderBorderColor:Border color  is null");
					}endStep();
				}

			}catch(NullPointerException e){info("NPE is caught");}
		}else{
			web.window(e1BrowserWindow).capturePage();
			beginStep("[validateHeaderBorderColor] Failed: Text field: "+fldName+" with id: "+id+" does not exist");
			{ 
				reportFailure("validateHeaderBorderColor:Text field: "+fldName+" with id: "+id+" does not exist");
			}endStep(); 
		}
		valCount=valCount+1;
		info("Finished:Function validateHeaderBorderColor"); 
	}


	/************************************************************************************************************
	 * Function: validateHeaderFieldEnabledById
	 * Description: Used to enter data in a text field by passing its name(HTML Property) as identifying property
	 *************************************************************************************************************/
	public void validateHeaderFieldEnabledById(@Arg("id") String id,@Arg("Enabled") boolean Enabled, @Arg("fldName")String fldName)throws Exception {
		validateHeaderFieldEnabled(id,Enabled,fldName);
	}

	/************************************************************************************************************
	 * Function: validateHeaderFieldEnabledByName
	 * Description: Used to enter data in a text field by passing its name(HTML Property) as identifying property
	 *************************************************************************************************************/
	public void validateHeaderFieldEnabledByName(@Arg("name") String name,@Arg("Enabled") boolean Enabled, @Arg("fldName")String fldName)throws Exception {
		String modName="name="+name;
		validateHeaderFieldEnabled(modName,Enabled,fldName);
	}


	/************************************************************************************************************
	 * Function: validateHeaderFieldEnabled
	 * Description: Used to validate if the text field is enabled or disabled
	 * Created By: Sravan Jonnadula
	 * Date: April 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *          @param id : HTML id of the text field 
	 *          @param Enabled : is the field editable i.e Y/N
	 *          @param fldName : Name/label of the text field
	 * Returns: 
	 *          @return Nil
	 * **********************************************************************************************************
	 */
	public void validateHeaderFieldEnabled(@Arg("id") String id,@Arg("Enabled") boolean Enabled, @Arg("fldName") String fldName)throws Exception {
		if(docIndex==null){
			getDocIndex();
		}
		String attr="id";
		boolean isPresent = false;
		DOMText txt=null;
		if(id.contains("name="))
		{
			id=id.split("=")[1];
			attr="name";
		}
		else
		{
			try{
				int index=Integer.parseInt(id);
				attr="index";
			}
			catch(NumberFormatException n)
			{
				attr="id";
			}
		}


		String bro="";
		if((attr.equals("id")||attr.equals("name"))&&(isModalForm==false)&&(isADF==false)){
			bro="/";
		}else{
			bro=e1Browser;
		}
		isPresent= web.exists(bro+"/web:input_text[@"+attr+"='"+id+"']", 5);
		if(isPresent)
		{
			txt=web.textBox(bro+"/web:input_text[@"+attr+"='"+id+"']");
			String isDisabled=null;
			String readonly=null;
			isDisabled=txt.getAttribute("disabled");
			//readonly=txt.getAttribute("readonly");
			readonly=txt.getAttribute("readOnly");
			if ((isDisabled==null||isDisabled.equalsIgnoreCase("false"))&&(readonly==null||readonly.equalsIgnoreCase("false")))
			{
				if(Enabled)
				{
					info("validateHeaderFieldEnabled Passed: Header field "+fldName+" with "+attr+" "+id+"is enabled");
				}
				else
				{
					CapturePage();                      
					testFailure("validateHeaderFieldEnabled Failed: Header field "+fldName+" with "+attr+" "+id+" is enabled");    
				}
			}
			else
			{
				if(Enabled)
				{
					CapturePage();                      
					testFailure("validateHeaderFieldEnabled Failed: Header field "+fldName+" with "+attr+" "+id+" is not enabled");

				}
				else
				{
					info("validateHeaderFieldEnabled Passed: Header field "+fldName+" with "+attr+" "+id+"is not enabled");
				}
			}
		}
		else
		{
			CapturePage();                      
			testFailure("validateHeaderFieldEnabled Failed:Header Text Field with "+attr+"  "+id+" not found");                   
		}                 



		valCount=valCount+1;
	}


	/************************************************************************************************************
	 * Function: selectFormMenu
	 * Description: This function is used to click the Form Menu link and the specifed Exit buttons under the Form link
	 * Created By: M R Shafiquddin Ahmed
	 * Date: October 2010
	 * Update By: Ghulam Quadir
	 * Date: March 2017
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param formItems: The sub menu item  available  under the Form  menu.
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void selectFormMenu(String formMenuPath) throws Exception
	{
		info("Strting function selectFormMenu");
		checkFrame();
		if (docIndex == null) {
			docIndex = getDocIndex();
		}
		formMenuPath=formMenuPath.replace(";;", ",");
		formMenuPath=formMenuPath.replace(";", ",");
		Pattern pat = Pattern.compile("[,]");
		//String strs[] = pat.split(sItem);
		String[] formMenuItem = pat.split(formMenuPath);					
		String element = null;
		String[] elementItems = null;
		List<DOMElement> nobrList=null;

		DOMDocument doc=null;
		DOMElement eleDom=null;

		if ((web.exists("//web:img[@id='FORM_EXIT_BUTTON' ]",60))) {//This ensures presence of "Form Menu icon" on the page 
			customClick(web.element("//web:img[@id='FORM_EXIT_BUTTON' ]"));
			info("Form menu clicked");
			doc=web.document(e1Browser);

			String currId=web.element("//web:img[@id='FORM_EXIT_BUTTON' ]").getAttribute("launchmenuid");//Row menu div id is different for all application.

			for(int i=0;i<formMenuItem.length;i++)
			{
				int itemIndex=0;
				element=formMenuItem[i].trim();//First Item of path
				//info("Element="+element);
				elementItems=Pattern.compile("[|]").split(element);
				String elementValue="";
				//info("element items length="+elementItems.length);
				if(elementItems.length==2)//Index is present with from menu item
				{
					itemIndex=Integer.parseInt(elementItems[0]); 
					elementValue=elementItems[1];
				}else
				{
					elementValue=elementItems[0];
				}
				//info("Each elemnt="+element+"  Element value="+elementValue);
				eleDom=web.element("//web:div[@id='"+currId+"']");
				nobrList=eleDom.getElementsByTagName("nobr");
				//info("nobr list obtained");
				int count=-1;
				String innerHTML="";
				String divId="";
				boolean flag=false;
				for(DOMElement tempDom:nobrList)
				{
					innerHTML=tempDom.getAttribute("innerHTML");
					//info("Inner HTML="+innerHTML);//System Function Call&nbsp;&nbsp;&nbsp;
					if(innerHTML.contains(elementValue))
					{
						count++;
					}
					if(itemIndex==count)//This is the element to select
					{// in this block Hover/Click over the item and find the id of next div.

						//Get the First div element.
						DOMElement temp=tempDom;
						for(int j=0;;j++)
						{
							temp=temp.getParent(); 
							if((temp!=null)&&(temp.getTag().contains("DIV")))//getTag() return tag name in capital letter
							{
								divId=temp.getAttribute("id");
								//info("Parent div id="+divId);
								currId=divId.replace("-Show","");//This will be id of div of next path item
								if(i==formMenuItem.length-1)//It is last element. So click on it.
								{
									if(divId.contains("outer"))//Every last ite parent div has id starting with "outer"
									{
										tempDom.click();
										info("PASSED : Form menu '"+elementValue+"' found and clicked");
										flag=true;
										Thread.sleep(2000);
										syncFrame();
										break;
									}else// It indicates the path given by user is not complete.
									{
										//OSPreferences("Fail");
										web.window(e1BrowserWindow).capturePage();
										testFailure("FAILED : Function selectFormMenu Exiting. Form menu is not Complete.");
										return;
									}
								}else//mouse over element.
								{
									temp.getChildren().get(0).mouseOver();             
									info("Form sub menu '"+elementValue+"' found on the page");
									flag=true;
									break;
								}
							}
							if(j==100)//Find upto hundred parent element only
							{
								break;
							}
						}
						if(flag==true)//Element found. So come out of outer loop also;
						{
							break;
						}
						//info("MOUSE OVER and currId="+currId);
					}
				}
				if(flag==false)//If item did not fid in <nobr> tag
				{
					//OSPreferences("Fail");
					web.window(e1BrowserWindow).capturePage();
					testFailure("FAILED : Form menu "+elementValue+" not found.");
					return;
				}
			}
		}else
		{
			//OSPreferences("Fail");
			web.window(e1BrowserWindow).capturePage();
			testFailure("FAILED : Function selectFormMenu Exiting. Form menu not found.");
			return;
		}
		info("End function selectFormMenu");
	}

	/************************************************************************************************************
	 * Function: selectFormMenu
	 * Description: This function is used to click the Form Menu link and the specifed Exit buttons under the Form link
	 * Created By: M R Shafiquddin Ahmed
	 * Date: October 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param formItems: The sub menu item  available  under the Form  menu.
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */


	/************************************************************************************************************
	 * Function: validateHeaderCheckBox
	 * Description: Used to Validate a web check box present in the headeris checked or not
	 * Created By: Sravan Jonnadula
	 * Date: October 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param iIndex:Index of the check box
	 * 		@param fldName: Name of the Checkbox
	 * 		@param sStatus: Status of the checkbox (true/false)
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void validateHeaderCheckBox(@Arg("iIndex") int iIndex,@Arg("fldName") String fldName, @Arg("sStatus") boolean sStatus)throws Exception {
		checkFrame();
		if(docIndex==null){
			getDocIndex();
		}
		String chStatus;
		boolean chS;
		if(web.exists(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@index='"+iIndex+"']",20)){
			info("HeaderCheckBox with the index "+iIndex+" found");			
			chStatus=web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@index="+ iIndex +"]").getAttribute("checked");
			//info(chStatus);
			if(chStatus.toLowerCase().equals("true")){				
				chS=true;
			}else{
				chS=false;
			}			
			if(chS==sStatus){
				if(sStatus){
					info("HeaderCheckBox "+fldName+"is set to ON as desired");
				}else{
					info("HeaderCheckBox "+fldName+"is set to OFF as desired");
				}
			}else{
				if(sStatus){
					web.window(e1BrowserWindow).capturePage();
					beginStep("[validateHeaderCheckBox] Failed: "+fldName+"is set to OFF, which is not desired");
					{
						testFailure(fldName+chStatus+"is set to OFF, which is not desired");
					}
					endStep();
				}else{
					web.window(e1BrowserWindow).capturePage();
					beginStep("[validateHeaderCheckBox] Failed: "+fldName+"is set to ON, which is not desired");
					{
						testFailure(fldName+chStatus+"is set to ON, which is not desired");
					}
					endStep();
				}
			}
		}else{
			web.window(e1BrowserWindow).capturePage();
			beginStep("[validateHeaderCheckBox] Failed: HeaderCheckBox "+fldName+" not found");
			{
				testFailure("HeaderCheckBox "+fldName+" not found");
			}
			endStep();
		}
		valCount=valCount+1;
	}

	/************************************************************************************************************
	 * Function: validateArrowAdjTo
	 * Description: Used to validate where arrow icon is located in current step
	 * Created By: Sravan Jonnadula
	 * Date: May 2011
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param stepName: Step name where arrow mark is expected
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void validateArrowAdjTo(@Arg("stepName") String stepName)throws Exception {
		if(docIndex==null){
			getDocIndex();
		}
		info("Start Function: validateArrowAdjTo");
		String tableText;
		if(web.exists("//web:img[@alt='Current Step']",20)){
			tableText=web.table("//web:table[@id='FormAboveGridTable']").getAttribute("innerhtml");
			if(tableText.indexOf('&')!=0){
				tableText=tableText.replace("&amp;","&");
			}
			int curStepPos=tableText.indexOf("Current Step",1);
			int curStepStartPos=tableText.indexOf(";",curStepPos);
			int curStepEndPos=tableText.indexOf("<",curStepStartPos);
			String actStepName=tableText.substring(curStepStartPos+1, curStepEndPos).trim();
			if(actStepName.equals(stepName.trim())){
				beginStep("validateArrowAdjTo: Passed");
				{
					info("Passed: The arrow icon is adjacent to " + actStepName);
					getStepResult().isPassed();
				}
				endStep();
			}else{
				web.window(e1BrowserWindow).capturePage();
				beginStep("[validateArrowAdjTo] Failed: Expected arrow icon adjacent to "+stepName+", But in Actual arrow icon is adjacent to " + actStepName);
				{
					testFailure("Expected arrow icon adjacent to "+stepName+", But in Actual arrow icon is adjacent to " + actStepName);
				}
				endStep();
			}			
		}else{
			web.window(e1BrowserWindow).capturePage();
			beginStep("[validateArrowAdjTo] Failed: Arrow Icon is not present");
			{
				testFailure("Arrow Icon is not present");
			}
			endStep();
		}
		valCount=valCount+1;
		info("End Function: validateArrowAdjTo");
	}

	/************************************************************************************************************
	 * Function: validateFormText
	 * Description: Used to validate a text is present in a form above the grid.
	 * Created By: Sravan Jonnadula
	 * Date: May 2011
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param valText: Text to be validated
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void validateFormText(@Arg("valText") String valText)throws Exception {
        if(docIndex==null){
                        getDocIndex();
        }
        info("Start Function: validateFormText");
        String tableText=null;
        if ((browser.getBrowser() instanceof FireFoxBrowser)||(browser.getBrowser() instanceof ChromeBrowser) || (browser.getBrowser() instanceof MicrosoftEdgeBrowser ))
{
                        tableText=web.table("//web:table[@id='FormAboveGridTable']").getAttribute("textContent");
info("tableText ="+tableText);
        }
        else{
                        tableText=web.table("//web:table[@id='FormAboveGridTable']").getAttribute("outertext");
info("tableText ="+tableText);
        }
        //info("All attributes:="+web.table("//web:table[@id='FormAboveGridTable']").getAttributes());

        if(tableText.indexOf('&')!=0){
                        tableText=tableText.replace("&amp;","&");
        }
        tableText=tableText.replaceAll(newline, "");
        tableText=tableText.replaceAll(" ", "");
        valText=valText.replaceAll(" ", "");
        if(!(tableText.indexOf(valText,0)<0)){
                        beginStep("validateFormText: Passed");
                        {
                                        info("The text "+valText+" is present");
                                        getStepResult().isPassed();
                        }
                        endStep();
        }else{
                        web.window(e1BrowserWindow).capturePage();
                        beginStep("[validateFormText] Failed: The text "+valText+" is not present");
                        {
                                        reportFailure("The text "+valText+" is not present");
                        }
                        endStep();
        }
        valCount=valCount+1;
        info("End Function: validateFormText");
}


	/************************************************************************************************************
	 * Function: validateFormTextByIndex
	 * Description:Used to validate if the text is present in the form for specified index (Occurance) above the grid.
	 * Created By: Sravan Jonnadula
	 * Date: May 2011
	 * To be incorporated: Nil
	 * Input Parameters:
	 * 		@param valText  Text to be validated
	 * 		@param iIndex Occurance of the text
	 * @return Nil
	 * **********************************************************************************************************
	 */
	public void validateFormTextByIndex(@Arg("valText")String valText, @Arg("iIndex")int iIndex)throws Exception {
		if(docIndex==null){
			getDocIndex();
		}
		info("Start Function: validateFormTextByIndex");
		int count=0;
		boolean found=false;
		//String tableText=web.table("//web:table[@id='FormAboveGridTable']").getAttribute("outertext");
		String tableText=web.table("//web:table[@id='FormAboveGridTable']").getAttribute("textContent");
		info("tableText ="+tableText);
		
		if(tableText==null)
			tableText=web.table("//web:table[@id='FormAboveGridTable']").getAttribute("outerText");
		String tableText1=tableText;
		if(tableText.indexOf('&')!=0){
			tableText=tableText.replace("&amp;","&");
		}
		tableText=tableText.replaceAll(newline, "");
		tableText=tableText.replaceAll(" ", "");
		valText=valText.replaceAll(" ", "");
		int pos=tableText.indexOf(valText,1);
		while(pos>=0){
			if(count==iIndex){
				found=true;
				break;
			}
			pos=tableText.indexOf(valText,pos+valText.length());
			if(pos<0){
				found=false;
				break;
			}
			count++;;
		}
		if(found){
			beginStep("validateFormText: Passed");
			{
				info("The text "+valText+"is present at Position : "+(iIndex+1)+" as expected");
				getStepResult().isPassed();
			}
			endStep();
		}else{
			web.window(e1BrowserWindow).capturePage();			
			testFailure("[validateFormText] Failed: The text "+valText+" is not present at Position : "+(iIndex+1)+" in the following main string  :  \n\n" + tableText1);
			endStep();
		}
		valCount=valCount+1;
		info("End Function: validateFormTextByIndex");
	}
	/************************************************************************************************************
	 * Function: ValidateESSReport
	 * Description:Used to validate data in an ESS Report for HCM module
	 * Created By: Sravan Jonnadula
	 * Date: May 2011
	 * To be incorporated: Nil
	 * Input Parameters:
	 *          @param checkVal:  Text to be validated
	 * @return Nil
	 * Example: ValidateESSReport("0-Cost Per Pay Period:;Employee Cost(per pay period)=$ 172.42|Employer Cost(per pay period)=$ 173.42");
	 * **********************************************************************************************************
	 */
	public void validateESSReport(@Arg("checkVal") String checkVal)throws Exception {
		if(docIndex==null){
			getDocIndex();
		}
		info("Start Function: validateESSReport");
		DOMDocument document = web.document(e1Browser);
		String arrSplitVal[] = Pattern.compile("[;]").split(checkVal);
		String arrSplit1[] = Pattern.compile("[-]").split(arrSplitVal[0]);
		int iRowValIndex=Integer.parseInt(arrSplit1[0]);
		String iRowIndexVal=arrSplit1[1];
		String arrSplitVal2[] = Pattern.compile("[|]").split(arrSplitVal[1]);
		for(int loop=0;loop<arrSplitVal2.length;loop++){
			String arrSplitNext[] = Pattern.compile("[=]").split(arrSplitVal2[loop]);
			String iColName=arrSplitNext[0];
			info("Expected Cloun name: " +iColName);
			String iRowVal;
			if(arrSplitNext.length==2){
				iRowVal=arrSplitNext[1];
			}else{
				iRowVal=null;
			}
			info("Expected Row name: " +iRowVal);
			boolean colFlag=false,rowFlag=false;
			int colNo=0;			
			DOMTable colTable, rowTable;
			colTable=web.table(e1Browser+"/web:table[@index='"+7+"']");
			rowTable=web.table(e1Browser+"/web:table[@index='"+6+"']");
			if((colTable==null)||(rowTable==null)){
				web.window(e1BrowserWindow).capturePage();
				beginStep("[validateESSReport] Failed: ESS Report not exists");
				{
					testFailure("Failed: ESS report not exists");
				}
				endStep();
				return;
			}

			int rows=colTable.getRowCount();
			int cols=colTable.getColumnCount();
			int rows1=rowTable.getRowCount();
			int cols1=rowTable.getColumnCount();
			for(int ir=1;ir<rows1+1;ir++){
				if(colFlag){
					break;
				}
				for(int ic=1;ic<cols1+1;ic++){
					try{
						String colValue=rowTable.getCell(ir, ic);
						//info("colname "+colValue);
						if(colValue==null){
							colValue="";
						}
						if(colValue.trim().equals(iColName.trim())){
							colFlag=true;
							colNo=ic;
							break;
						}
					}catch(Exception e){

					}
				}
			}
			if(!colFlag){
				for(int ir=1;ir<rows+1;ir++){
					if(colFlag)
						break;
					for(int ic=1;ic<cols+1;ic++){
						try{
							String colValue=colTable.getCell(ir, ic);
							//info("colname "+colValue);
							if(colValue==null){
								colValue="";
							}
							if(colValue.trim().equals(iColName.trim())){
								colFlag=true;
								colNo=ic;   
								break;
							}
						}catch(Exception e){

						}
					}
				}
				if(!colFlag){
					web.window(e1BrowserWindow).capturePage();
					beginStep("[validateESSReport] Failed: Invalid Column Name : " + iColName);
					{
						testFailure("Failed: Invalid Column Name : " + iColName);
					}
					endStep();
				}
			}                 
			for(int ir=0;ir<rows;ir++){
				if(rowFlag)
					break;
				for(int ic=1;ic<cols;ic++){
					String actValue="";
					try{
						if(iRowVal==null){
							rowFlag=true;
							beginStep("ValidateESSReport: Passed");
							{
								info("Validation for "+ iColName +" at row : "+ ir +" is :" + actValue + " has passed.");
								getStepResult().isPassed();
							}
							break;
						}
						actValue=colTable.getCell(ir, ic);
						//info("Actname "+actValue);
						if(actValue==null){
							actValue="";
						}
						if(actValue.trim().equals(iRowVal.trim())){
							rowFlag=true;
							beginStep("ValidateESSReport: Passed");
							{
								info("Validation for "+ iColName +" at row : "+ ir +" is :" + actValue + " has passed.");
								getStepResult().isPassed();
							}
							break;
						}
					}catch(Exception e){

					}
				}                     
			}
			if(!rowFlag){
				for(int ir=0;ir<rows1;ir++){
					if(rowFlag)
						break;
					for(int ic=1;ic<cols1;ic++){
						String actValue="";
						try{
							if(iRowVal==null){
								rowFlag=true;
								beginStep("ValidateESSReport: Passed");
								{
									info("Validation for "+ iColName +" at row : "+ ir +" is :" + actValue + " has passed.");
									getStepResult().isPassed();
								}
								break;
							}
							actValue=rowTable.getCell(ir, ic);
							//info("Actname "+actValue);
							if(actValue==null){
								actValue="";
							}
							if(actValue.trim().equals(iRowVal.trim())){
								rowFlag=true;
								beginStep("ValidateESSReport: Passed");
								{
									info("Validation for "+ iColName +" at row : "+ ir +" is :" + actValue + " has passed.");
									getStepResult().isPassed();
								}
								break;
							}
						}catch(Exception e){

						}
					}                     
				}
				if(!rowFlag){
					web.window(e1BrowserWindow).capturePage();
					beginStep("[validateESSReport] Failed: Failed: The value "+iRowVal+" not found on the ESS report");
					{
						testFailure("Failed: The value "+iRowVal+" not found on the ESS report");
					}
					endStep();
				}
			}
		}
		valCount=valCount+arrSplitVal2.length;
		info("End Function: validateESSReport");
	}

	/************************************************************************************************************
	 * Function: clickHyperLink
	 * Description: This Function clicks the specified Link available on a page.
	 * Created By: Sravan Jonnadula
	 * Date: October 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param iIndex: Index of the link and if there is two links with a same name then the index 
	 * 						will be 0 for the first one and 1 for the second one.
	 * 		@param sLinkName: Text of the Link
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void clickHyperLink(@Arg("iIndex") int iIndex,@Arg("sLinkName") String sLinkName) throws Exception {
		checkFrame();
		if(docIndex==null){
			getDocIndex();
		}
		DOMLink link=null;                              
		if(web.exists(e1Browser+"/web:a[@text='"+sLinkName+"']["+iIndex+"]",3)){
			
			link=web.link(e1Browser+"/web:a[@text='"+sLinkName+"']["+iIndex+"]");
			String id=link.getAttribute("id");
			String clssName=link.getAttribute("className");
			/*link.focus();

			link.mouseClick("<ENTER>", 1, false);//click();
			 */			
			customClick(link);
			syncFrame();


			int i=0;
			while(web.exists("/"+e1Document+"/web:a[@text='"+sLinkName+"']["+iIndex+"]",3)){
				i++;
				if(web.exists("/"+e1Document+"/web:span[@text='Processing Options*']")){
					break;
				}
				if(i==30){
					break;
				}
				DOMLink link1=web.link("/"+e1Document+"/web:a[@text='"+sLinkName+"']["+iIndex+"]");
				if(id!=null){
					if((link1.exists())&&(link1.getAttribute("id").equals(id))){
						//continue;
					}else{
						break;
					}
				}
				if(clssName!=null){
					if(clssName.equalsIgnoreCase("tablink")){
						if(link1.getAttribute("className").equalsIgnoreCase("activetablink")){
							break;
						}else{
							continue;
						}
					}else if(clssName.equalsIgnoreCase("activetablink")){
						break;
					}
				}
			}

			info("[clickHyperLink]: "+sLinkName +" found and clicked successfully");

		}else{
			web.window(e1BrowserWindow).capturePage();
			
			testFailure("[clickHyperLink] Failed: HyperLink "+sLinkName+" not found");
			endStep();

		}
	}

	/************************************************************************************************************
	 * Function: selectToolsMenu Description: This function is used to click row menu 
	 * Created By: Ghulam Quadir
	 * Modified By: 
	 * Date: Jan 2017 
	 * To be incorporated: Nil Input
	 * Parameters:
	 * @param toolsMenuPath :Semi colon separated path of the row menu
	 * Example:
	 *         selectToolsMenu("Order;Attachments;Detail Attachment")
	 *         *****************************************************************
	 */
	public void selectToolsMenu(String toolsMenuPath) throws Exception
	{
		info("Strting function selectToolsMenu");
		checkFrame();

		String[] toolsMenuItem = toolsMenuPath.split(";");
		String element = null;
		String[] elementItems = null;
		List<DOMElement> nobrList=null;

		DOMDocument doc=null;
		DOMElement eleDom=null;

		if ((web.exists("//web:img[@id='TOOLS_EXIT_BUTTON' ]",60))) {//This ensures presence of "Tools Menu icon" on the page 
			customClick(web.element("//web:img[@id='TOOLS_EXIT_BUTTON' ]"));
			info("Tools menu clicked");
			doc=web.document(e1Browser);

			String currId=web.element("//web:img[@id='TOOLS_EXIT_BUTTON' ]").getAttribute("launchmenuid");//Row menu div id is different for all application.

			for(int i=0;i<toolsMenuItem.length;i++)
			{
				int itemIndex=0;
				element=toolsMenuItem[i].trim();//First Item of path
				elementItems=Pattern.compile("[|]").split(element);
				String elementValue="";
				if(elementItems.length==2)//Index is present with from menu item
				{
					itemIndex=Integer.parseInt(elementItems[0]); 
					elementValue=elementItems[1];
				}else
				{
					elementValue=elementItems[0];
				}

				eleDom=web.element("//web:div[@id='"+currId+"']");
				nobrList=eleDom.getElementsByTagName("nobr");

				int count=-1;
				String innerHTML="";
				String divId="";
				boolean flag=false;
				for(DOMElement tempDom:nobrList)
				{
					innerHTML=tempDom.getAttribute("innerHTML");

					if(innerHTML.contains(elementValue))
					{
						count++;
					}
					if(itemIndex==count)//This is the element to select
					{// in this block Hover/Click over the item and find the id of next div.

						DOMElement temp=tempDom;
						for(int j=0;;j++)
						{
							temp=temp.getParent(); 
							if((temp!=null)&&(temp.getTag().contains("DIV")))//getTag() return tag name in capital letter
							{
								divId=temp.getAttribute("id");
								currId=divId.replace("-Show","");//This will be id of div of next path item
								if(i==toolsMenuItem.length-1)//It is last element. So click on it.
								{
									if(divId.contains("outer"))//Every last ite parent div has id starting with "outer"
									{
										tempDom.click();
										info("PASSED : Tools menu '"+elementValue+"' found and clicked");
										flag=true;
										Thread.sleep(2000);
										syncFrame();
										break;
									}else// It indicates the path given by user is not complete.
									{
										CapturePage();
										testFailure("FAILED : Function selectToolsMenu Exiting. Row menu is not Complete.");
										return;
									}
								}else//mouse over element.
								{
									temp.getChildren().get(0).mouseOver();	
									info("Tools sub menu '"+elementValue+"' found on the page");
									flag=true;
									break;
								}
							}
							if(j==100)//Find upto hundred parent element only
							{
								break;
							}
						}
						if(flag==true)//Element found. So come out of outer loop also;
						{
							break;
						}
					}
				}
				if(flag==false)//If item did not fid in <nobr> tag
				{
					CapturePage();
					testFailure("FAILED : Tools menu "+elementValue+" not found.");
					return;
				}
			}
		}else
		{
			CapturePage();
			testFailure("FAILED : Function selectToolsMenu Exiting. Row menu not found.");
			return;
		}
		info("End function selectToolsMenu");
	}

	/************************************************************************************************************
	 * Function: validateColumnPresent
	 * Description: This function will check for the presence of column(s) in the given grid
	 * Created By: Megha K
	 * Date: Sep 2016
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *                           @param iIndex :Iindex of the grid in the webpage starting from 0.
	 *                           @param sColName :semicolon separated list of columns to be verified.
	 *                            @param present :true/false.
	 * Returns: 
	 *                           @return Nil
	 * **********************************************************************************************************
	 */
	public void validateColumnPresent(@Arg("gridIndex") int gridIndex, @Arg("paramcolName") String paramcolName, boolean present) throws Exception {		
		checkFrame();
		Pattern pat = Pattern.compile("[;]");
		String param[] = pat.split(paramcolName);
		int paramCount = param.length;
		String colName="";
		boolean colflag=false;
		String gridId=null,fldName=null;
		String[] output=null;
		String fieldName=null,isColHidden=null;
		int colCount=0,i=0;
		incrementValidationCount(paramCount);
		for (int j=0;j<paramCount;j++){
			colflag=false;
			colName=param[j];
			colName=colName.replaceAll("~", "=");
			colName=colName.replaceAll(" ", "");
			colName=colName.replaceAll("&#37;", "%");
			colName=colName.replaceAll("&#39;", "'");
			colName=colName.replaceAll("&#45;", "-");
			colName=colName.replaceAll("&#40;", "(");
			colName=colName.replaceAll("&#41;", ")");
			colName=colName.replaceAll("&#42;", "*");
			colName=colName.replaceAll("&#43;", "+");
			colName=colName.replaceAll("&#38;", "&");

			if (!bDB) {
				gridId=getGridObjReference(gridIndex);
				if (gridId != null) {
					output = web.document(e1Browser).executeJsFunction("getColLen", gridId);
					try{colCount=Integer.parseInt(output[0]);}catch (NumberFormatException e) {
						warn("numberformat exception "+output[0]);
					}

					for(i=-2;i<(colCount);i++){
						output = web.document(e1Browser).executeJsFunction("getColLabel", gridId,Integer.toString(i));
						fieldName=output[0];
						if(fieldName!=null){
							fldName=fieldName.replaceAll(newline, "");
							fldName=fldName.replaceAll(" ", "");
							fldName=fldName.replaceAll("&#37;", "%");
							fldName=fldName.replaceAll("&#39;", "'");
							fldName=fldName.replaceAll("&#45;", "-");
							fldName=fldName.replaceAll("&#40;", "(");
							fldName=fldName.replaceAll("&#41;", ")");
							fldName=fldName.replaceAll("&#42;", "*");
							fldName=fldName.replaceAll("&#43;", "+");
							fldName=fldName.replaceAll("&#38;", "&");
							isColHidden=web.document(e1Browser).executeJsFunction("gridCellIsHidden",gridId,Integer.toString(i))[0];
							if(colName.trim().equals(fldName.trim()) && isColHidden.equalsIgnoreCase("false")){
								colflag=true;
								break;
							}									
						}
					}
				}
			}else{
				gridId=getDataBrowserGridObjReference();
				if (gridId != null) {
					output = web.document(sDBBrowser).executeJsFunction("getColLen", gridId);				

					try{colCount=Integer.parseInt(output[0]);}catch (NumberFormatException e){
						warn("numberformat exception "+output[0]);
					}
					for(i=-2;i<(colCount);i++){
						output = web.document(sDBBrowser).executeJsFunction("getColLabel", gridId,Integer.toString(i));
						fieldName=output[0];
						if(fieldName!=null){
							fldName=fieldName.replaceAll(newline, "");
							fldName=fldName.replaceAll(" ", "");
							fldName=fldName.replaceAll("&#37;", "%");
							fldName=fldName.replaceAll("&#39;", "'");
							fldName=fldName.replaceAll("&#45;", "-");
							fldName=fldName.replaceAll("&#40;", "(");
							fldName=fldName.replaceAll("&#41;", ")");
							fldName=fldName.replaceAll("&#42;", "*");
							fldName=fldName.replaceAll("&#43;", "+");
							fldName=fldName.replaceAll("&#38;", "&");
							isColHidden=web.document(sDBBrowser).executeJsFunction("gridCellIsHidden",gridId,Integer.toString(i))[0];

							if(colName.trim().equals(fldName.trim()) && isColHidden.equalsIgnoreCase("false")){
								colflag=true;
								break;
							}
						}
					} 
				}
			}
			if(present==true){
				if(colflag==true){
					info("column with Name " +colName+ " is present in the grid" );
				}else{
					CapturePage();
					testFailure("Column with name " +colName+ " is not present in the grid");
				}
			}else{
				if(colflag==false){
					info("Column with name " +colName+ " is not present in the grid");
				}else{
					CapturePage();
					testFailure("Column with name " +colName+ " is present in the grid");
				}
			}
		}
	}

	/************************************************************************************************************
	 * Function: validateDialogBoxPresent
	 * Description: This function is used to validate presence of dialog box
	 * Created By: Megha K
	 * Date: Sep 2016
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param dialogName: Name of the dialog box
	 * Returns: 
	 * 		@return Nil
	 * Examples: 1. validateDialogBoxPresent(Insert Object)
	 *           2. validateDialogBoxPresent(Open)
	 * **********************************************************************************************************
	 */
	public void validateDialogBoxPresent(@Arg("dialogName") String dialogName) throws Exception{

		info("Starting:Function validateDialogBoxPresent");		
		checkFrame();
		//info("in-----> ");
		//if(web.dialog("/web:dialog_unknown[@text='*']/web:accDialog[@name='"+dialogName+ "']").exists()){
		if(web.dialog("/web:dialog_unknown[@text='*']").exists()){
			info("validateDialogBoxPresent Passed: Dialog Box with name " +dialogName+" is present");
		}
		//else if(web.dialog("/web:dialog_confirm[@text='*']/web:accDialog[@name='"+dialogName+ "']").exists()){
		else if(web.confirmDialog("/web:dialog_confirm[@text='*']").exists()){ //info("--->confdialog");
			info("validateDialogBoxPresent Passed: Dialog Box with name " +dialogName+" is present"); 
		}
		else{
			CapturePage();
			testFailure("validateDialogBoxPresent Failed: Dialog Box with name " +dialogName+ " is not present");
		}
		info("Ending: Function validateDialogPresent");
		incrementValidationCount(1);
	}

	/************************************************************************************************************
	 * Function: validateGridColClickable
	 * Description: This function checks if text in the specified cell is clickable(link)
	 * Created By: Yashin Bidar
	 * Date: September 2016
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *                      @param iIndex : index of the Grid starting from 0
	 *                      @param iRowIndex:index of the row starting from 0
				 						@param sColName:Name of column ot be verified
				 						@param isClickable:  Boolean value

	 * Returns:  
	 *                      @return nil
	 * Example:validateGridColClickable(0,0,"AlphaName",true)->Function will pass if the AlphaName cell in the first row of the gird with index 0 has clickable text
	 * **********************************************************************************************************/

	public void validateGridColClickable(int iIndex,int iRowIndex,String sColName,Boolean isClickable)throws Exception  {
        
        String gridId=getGridObjReference(iIndex);
		info("GridID="+gridId);
        int rowIndex;
        incrementValidationCount(1);
        if(gridId!=null)
        {		
				
              String colIndex=getColIndexForColName(gridId, sColName);
			  //isGridColIntoView = scrollGridColumnIntoView(gridId,colIndex);			
              rowIndex = getRowIndexForVisibleRow(gridId, iRowIndex);
              if(colIndex!=null)
              {		
            	  	isGridRowIntoView = scrollGridRowIntoView(gridId,iRowIndex);
                    String isCellClickable[]=web.document(e1Browser).executeJsFunction("isGridCellClickable", gridId,colIndex);
                    //info("isCellClickable="+isCellClickable[0]);
                    String isCellDisabled[]=web.document(e1Browser).executeJsFunction("isGridCellDisabled",gridId,Integer.toString(rowIndex),colIndex);
                    //info("isCellDisabled[]="+isCellDisabled[0]+"  "+isCellDisabled[1]+"   "+isCellDisabled[2]);
                    String cellName="gce"+gridId+"."+iRowIndex+"."+colIndex;
                    info("cellName:"+cellName);
                    boolean cellLink=false;   
                    String divID=""; DOMElement temp = web.element("//web:a[@name='"+cellName+"']");
                    if(web.element("//web:a[@name='"+cellName+"']").exists())
                    {
                          web.link("//web:a[@name='"+cellName+"']").mouseOver();
                          divID = temp.getAttribute("id");
                          info("divID:"+divID);
                         /* web.link("//web:a[@name='"+cellName+"']").setSelectedJSElement();
                                DOMDocument document = web.document(e1Browser);
                                document.executeJavaScript("function getStyle(){return document.activeElement.currentStyle.cursor;}");
                                String style[] = web.document(e1Browser).executeJsFunction("getStyle");*/
                          DOMDocument document = web.document(e1Browser);
                          document.executeJavaScript("function getStyle(){return window.getComputedStyle(document.getElementById('"+divID+"')).getPropertyValue('cursor');}");
                          //document.executeJavaScript("function getStyle(){return document.getElementsByName('"+cellName+"').contentStyle.cursor;}");
                          String style[] = web.document(e1Browser).executeJsFunction("getStyle");

                          info("style:"+style[0]);
                          info("");
                          if(isClickable)
                          {
                                if(((style[0].equalsIgnoreCase("auto"))||(style[0].equalsIgnoreCase("pointer")))&&(isCellDisabled[2].equalsIgnoreCase("false")))
                                {
									if(isCellClickable[0].equalsIgnoreCase("true")){
                                      info("validateGridColClickable Passed:Text in "+sColName+" column of row "+(iRowIndex+1)+" is clickable and mouse pointer properties are as expected");
									}
                                }
                                else
                                {
                                      CapturePage();
                                      testFailure("validateGridColClickable Failed:Text in "+sColName+" column of row "+(iRowIndex+1)+"is uneditable or does not show expectedd change in mouse pointer");
                                }
                          }
                          else
                          {
                                
                                if(((style[0].equalsIgnoreCase("auto"))||(style[0].equalsIgnoreCase("pointer")))&&(isCellDisabled[2].equalsIgnoreCase("true")))
                                {
                                    info("validateGridColClickable Passed:Text in "+sColName+" column of row "+(iRowIndex+1)+" is uneditable or does not show expected change in mouse pointer");
                                        
                                }
                                else
                                {
                                    testFailure("validateGridColClickable Failed:Text in "+sColName+" column of row "+(iRowIndex+1)+"is clickable and mouse pointer properties are as expected");
                                    CapturePage();
                                      
                                }
                          }

                    }
                    else
                    {
                    	
                          if(isClickable)
                          {
                                CapturePage();
                                testFailure("validateGridColClickable Failed:Clickable text not found in "+sColName+" column of row "+(iRowIndex+1));
                          }
                          else
                          {
                                info("validateGridColClickable Passed:Text in "+sColName+" column of row "+(iRowIndex+1)+" is uneditable or does not show expected change in mouse pointer");     
                          }
                    }
              }
              else
              {
                    CapturePage();
                    testFailure("validateGridColClickable Failed:Column not found");    
              }
        }
        else
        {
              CapturePage();
              testFailure("validateGridColClickable Failed:Grid Not Found");      
        }
		
  }




	/************************************************************************************************************
     * Function: validateGridExportData
     * Description: This function exports Grid data from application,then validates the same with the previously captured grid data. 
      * Created By: Spurthi P
     * Date: Oct 2016
     * Updated By:SUNIL K
     * Update Date:5.9.17
     * Input Parameters: 
      *          @param captured : Location of captured Data sheet from grid stored by user in CSV format
     *          @param exported : Location of exported Data sheet exported from application in CSV format
     * Returns: 
      *          @return Nil
     * Example: validateGridExportData("C:\Capture.csv","C:\Exported.csv")       
      * **********************************************************************************************************
     */
     public void validateGridExportData(@Arg("captured") String captured,@Arg("exported") String exported) throws Exception{
           info("Starting: Function validateGridExportData");
           String osName = System.getProperty("os.name");
           int colCount = 0, rowCount = 0;
           //to delete existing exported csv file,if already exists
           File export=new File(exported);
           boolean success = export.delete();
           if (success) {
                 info("[DeleteFile]:"+exported+"  found and Deleted successfully");
           }else {
                 info("File "+exported+" does not exist");
           }           
           //File f3 = new File("C:\\Exportedtemp.csv"); 
           File f3 = null;
           if(osName.equalsIgnoreCase("Windows 8.1") || osName.equalsIgnoreCase("Windows 10") || osName.equalsIgnoreCase("Windows 10.0")){
               f3 = new File("\\\\den00bwk.us.oracle.com\\OATS_ToolsRepository\\OATS_ToolsRepository_"+sBrowser+"\\ScriptResources\\Exportedtemp.csv");
           }else{
               f3 = new File("C:\\Exportedtemp.csv");
           }
           if (f3.exists()) {
                 f3.delete();
           }

           //to export csv file rom application
           clickToolBarImage("Continue");
           Thread.sleep(20000);    


           if(browser.getBrowser() instanceof ChromeBrowser){
               if(osName.equalsIgnoreCase("Windows 8.1") || osName.equalsIgnoreCase("Windows 10") || osName.equalsIgnoreCase("Windows 10.0")){
                     web.dialog(103, "/web:dialog_unknown[@text='Save As' or @index='0']").setText(0, "\\\\den00bwk.us.oracle.com\\OATS_ToolsRepository\\OATS_ToolsRepository_"+sBrowser+"\\ScriptResources\\Exportedtemp.csv");
                     web.dialog(104, "/web:dialog_unknown[@text='Save As' or @index='0']")
                   .clickButton(1);
               }else{
                     web.dialog(103, "/web:dialog_unknown[@text='Save As' or @index='0']").setText(0, "C:\\Exportedtemp.csv");
                     web.dialog(104, "/web:dialog_unknown[@text='Save As' or @index='0']")
                   .clickButton(0);
               }

                  
           }else if(browser.getBrowser() instanceof FireFoxBrowser){
                 web.dialog(105,
                       "/web:dialog_unknown[@text='Download' or @index='0']").selectRadio(0);
                 web.dialog(105,
                 "/web:dialog_unknown[@text='Download' or @index='0']").selectRadio(1);  

                 web.dialog(105,
                 "/web:dialog_unknown[@text='Download' or @index='0']")
                 .clickButton(0);
                 if(osName.equalsIgnoreCase("Windows 8.1") || osName.equalsIgnoreCase("Windows 10") || osName.equalsIgnoreCase("Windows 10.0")){
                   web.dialog(121,   "/web:dialog_unknown[@text='Enter name of file to save to…' or @index='0']").setText(0, "\\\\den00bwk.us.oracle.com\\OATS_ToolsRepository\\OATS_ToolsRepository_"+sBrowser+"\\ScriptResources\\Exportedtemp.csv");
                   web.dialog(122,
                     "/web:dialog_unknown[@text='Enter name of file to save to…' or @index='0']")
                     .clickButton(1); 
                 }else{
                   web.dialog(121, "/web:dialog_unknown[@text='Enter name of file to save to…' or @index='0']").setText(0, "C:\\Exportedtemp.csv");
                   web.dialog(122,
                     "/web:dialog_unknown[@text='Enter name of file to save to…' or @index='0']")
                     .clickButton(0); 
                 }
                 
           }else{
                 /* web.dialog(81,
                       "/web:dialog_unknown[@text='Download' or @index='0']")
                       .clickButton(0);
                       web.dialog(83,
                       "/web:dialog_unknown[@text='Enter name of file to save to…' or @index='0']")
                       .setText(0, "C:\\Exportedtemp.csv");
                       web.dialog(87,
                       "/web:dialog_unknown[@text='Enter name of file to save to…' or @index='0']")
                       .clickButton(0);*/
                 if(web.notificationBar(e1BrowserWindow).exists()){
                       web.notificationBar(4,e1BrowserWindow).selectOptionBy("Save", "Save as");
                       Thread.sleep(10000);                      
                       if(osName.equalsIgnoreCase("Windows 8.1") || osName.equalsIgnoreCase("Windows 10") || osName.equalsIgnoreCase("Windows 10.0")){
                           web.dialog("/web:dialog_unknown[@text='Save*' or @index='0']").setText(0, "\\\\den00bwk.us.oracle.com\\OATS_ToolsRepository\\OATS_ToolsRepository_"+sBrowser+"\\ScriptResources\\Exportedtemp.csv");
                       }else{
                           web.dialog("/web:dialog_unknown[@text='Save*' or @index='0']").setText(0, "C:\\Exportedtemp.csv");
                       }
                       web.dialog("/web:dialog_unknown[@text='Save*' and @index='0']").clickButton(0);
                       /*web.notificationBar(4,e1BrowserWindow).clickButton("Save as");*/                  
                       Thread.sleep(5000);                 
                 }else{
                       info("save dialog doesn't exist !!");
                 }
           }

           //save csv

           Thread.sleep(5000);                 


           //to remove 'character space issue during validation', the data is written into Exported.csv from Exportedtemp.csv        
           if(f3.exists()){                                
                 info("File "+exported+" Exported Successfully from Grid");              
                 FileReader frv = new FileReader(f3.getAbsoluteFile());
                 BufferedReader brv = new BufferedReader(frv);
                 String line = brv.readLine();
                 line = line.replaceAll(" ", "");          

                 for(int z=0;z<line.length();z++){
                       if(line.charAt(z)==',')
                             colCount++; 
                 }

                 File f4 = new File(exported);             
                 FileWriter fwv = new FileWriter(f4.getAbsoluteFile());
                 BufferedWriter bwv = new BufferedWriter(fwv);

                 while(line!=null){                        
                       bwv.write(line);
                       bwv.newLine();                      
                       line = brv.readLine();              
                 }

                 frv.close();
                 brv.close();                  
                 bwv.close();
                 fwv.close();
           }
           else{             
                 CapturePage();          
                 testFailure("[validateGridExportData] Failed: Unable to export from Grid");                                                
                 return;
           }     


           try   {
                 File f1 = new File(captured);
                 File f2 = new File(exported);

                 BufferedReader reader1 = new BufferedReader(new FileReader(f1));
                 BufferedReader reader2 = new BufferedReader(new FileReader(f2));

                 String line1 = null;
                 String line2 = null;
                 int flag = 1;
                 //Line by line csv file validation
                 while ((flag == 1) && ((line1 = reader1.readLine()) != null)
                             && ((line2 = reader2.readLine()) != null)) {
                       if (!line1.equalsIgnoreCase(line2))
                       {     
                             flag = 0;
                             info("line1 : "+line1+"  \nline2 : "+line2);
                       }
                       rowCount++;
                 }

                 incrementValidationCount(rowCount*colCount);

                 reader1.close();
                 reader2.close();  
                 if(flag == 1)
                 {     

                       info("[validateGridExportData] Passed: The csv files "+captured+" and "+exported+" are matching");
                 }
                 else{
                       CapturePage();          
                       testFailure("[validateGridExportData] Failed: The csv files "+captured+" and "+exported+" are NOT matching");                                               
                       return;
                 }
           }catch(Exception E){
                 info(E.getMessage());
           }           
           info("Finished: Function validateGridExportData");
     }



	/************************************************************************************************************
	 * Function: validateGridQBEDisabled 
	 * Description: This function will validate whether the QBE field is present and if it is disbaled
	 * Created By: Yashin
	 * Date: Nov 2016
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *      @param iIndex : Index of the Grid,
	 *      @param sParam : semicolon separated grid  column headers                       
	 * Returns: 
	 *          @return Nil
	 * Example :  validateGridQBEDisabled(0,"BlockCode;HarvestPeriod");
	 * **********************************************************************************************************
	 */
	public void validateGridQBEDisabled(@Arg("iIndex") int iIndex, @Arg("sColName")  String sColName) throws Exception {
		info("Starting:Function validateGridQBEDisabled ");

		String param[] = Pattern.compile("[;]").split(sColName);
		incrementValidationCount(param.length);
		checkFrame();
		String gridID = getGridObjReference(iIndex);
		String sColIndex;
		if(gridID!=null)
		{
			for(int idx=0;idx<(param.length);idx++){
				String tempFld=param[idx];
				//Keeping column header intact as given by automator for addition in datatable 
				//String dtPar=param[idx];
				sColIndex=getColIndexForColName(gridID, tempFld);

				if(sColIndex != null){
					String tempVal =null;
					//info("colIndex "+sColIndex);
					//String[] qbeFld = web.document(e1Browser).executeJsFunction("getQBEFldId", gridID,sColIndex); 
					//info("qbeFld:"+qbeFld[0]);

					String[] bDisabled = web.document(e1Browser).executeJsFunction("isQBEDisabled", gridID,sColIndex);
					info("checking if disabled = "+bDisabled[0]);
					if(bDisabled[0].equalsIgnoreCase("True")){

						info("validateGridQBEDisabled passed:QBE field for column " +tempFld + " is Disabled");
					} else{
						CapturePage();
						testFailure("validateGridQBEDisabled Failed:QBE field for column " +tempFld + " is not Disabled");
					}
				} else
				{

					CapturePage();	
					testFailure("Failed: Column " + iIndex + " not present on page");

				}
			}
		}
		else
		{
			CapturePage();	
			testFailure("Failed: Grid with index " + iIndex+ " not present in grid");	
		}

		info("Finished:Function validateGridQBEDisabled ");
	}

	/************************************************************************************************************
	 * Function: validateGridQBEExists
	 * Description: This function checks if the specified grid has a visible qbe line
	 * Created By: Yashin Bidar
	 * Date: September 2016
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *                      	@param iIndex : index of the Grid starting from 0
									 @param isExist:  Boolean value

	 * Returns: 
	 *                      @return nil
	 *
	 *Example:validateGridQBEExists(0,true)->Function will pass if grid with index 0 has a visible QBE line
	 * 
	 * **********************************************************************************************************
	 */

	public void validateGridQBEExists(int iIndex,boolean isExist)throws Exception{
		info("Starting funciton validateGridQBEExists");
		incrementValidationCount(1);
		String gridId=getGridObjReference(iIndex);
		if(gridId!=null)
		{
			String isQBE[] = web.document(e1Browser).executeJsFunction("checkGridQBE", gridId);

			if(isExist)
			{
				if(isQBE[0].equalsIgnoreCase("true"))
				{
					info("validateGridQBEExists Passed:Grid has a visible QBE Line");
				}
				else
				{
					CapturePage();
					testFailure("validateGridQBEExists Failed:Grid does not have a visible QBE Line");
				}
			}
			else
			{
				if(isQBE[0].equalsIgnoreCase("false"))
				{
					info("validateGridQBEExists Passed:Grid does not have a visible QBE Line");
				}
				else
				{
					CapturePage();
					testFailure("validateGridQBEExists Failed:Grid has a visible QBE Line");
				}
			}
		}
		else
		{
			CapturePage();
			testFailure("validateGridQBEExists Failed:Grid not found"); 
		}
		info("Ending function validateGridQBEExists");
	}

	/************************************************************************************************************
	 * Function: validateGridRowColEditable
	 * Description: This function checks if the specified cell is editable
	 * Created By: Yashin
	 * Date: Nov 2016
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *      @param iIndex : Index of the Grid,
	 *      @param iRow : visible row index of the row
	 *      @param colName:name of the column 
	 *      @param isEditable:true/false                     
	 * Returns: 
	 *          @return null
	 *Example:validateGridRowColEditable(0,0,"ALphaName",true)->FUnction will pass if alpha name column in first row of first grid is editable.
	 * 
	 * **********************************************************************************************************
	 */
	public void validateGridRowColEditable(@Arg("iIndex") int iIndex, @Arg("iRow") int iRow, String colName,Boolean isEditable) throws Exception {
		boolean colEdit=isGridRowColEditable(iIndex, iRow, colName);
		incrementValidationCount(1);
		if(colEdit)
		{
			if(isEditable)
			{
				info("validateGridRowColEditable Passed:Column "+colName+" at row "+iRow+" is editable");
			}
			else
			{
				testFailure("validateGridRowColEditable Failed:Column "+colName+" at row "+iRow+" is editable");
				CapturePage();
			}
		}
		else
		{
			if(isEditable)
			{
				testFailure("validateGridRowColEditable Failed:Column "+colName+" at row "+iRow+" is not editable");
				CapturePage();
			}
			else
			{
				info("validateGridRowColEditable Passed:Column "+colName+" at row "+iRow+" is not editable");	 
			}
		}
	}

	/************************************************************************************************************
	 * Function: validateGridRowImageToolTipText  
	 * Description: This function will validate the tool tip Text for the image in the cell
	 * Created By:Rupa 
	 * Date: August  2016
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *      @param iIndex - index of the grid in the webpage starting from 0,
	 *      @param iRow -  Visible row number starting from 0     
	 *      @param sColName - column header of the cell .
	 *      @param toolTipText  - Tool tip text that needs to be validated .              		
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void validateGridRowImageToolTipText(@Arg("iIndex") int iIndex,	@Arg("iRow") int iRow,@Arg("sColName")  String sColName ,@Arg("toolTipText")String toolTipText) throws Exception
	{
		info("Starting:Function validateGridRowImageToolTipText");

		String gridId;
		int flag=0;
		if(!bDB){
			checkFrame();
			gridId = getGridObjReference(iIndex);
			if(gridId!=null){
				int rCount=getGridRowCountByIndex(iIndex);
				if(iRow>(rCount-1)){

					testFailure(" validateGridRowImageToolTipText at grid row "+(iRow+1)+" Failed:  grid only has "+rCount+" rows");
					valCount =valCount+1;
					return;
				}			
				String colIndex=getColIndexForColName(gridId,sColName);
				if(colIndex!=null){

					int rowIndex=getRowIndexForVisibleRow(gridId,iRow);
					String[] gridCellId = web.document(e1Browser).executeJsFunction("clickGridImgByIndex", gridId,""+rowIndex,colIndex, "0");
					info("gridCellId : "+gridCellId[0]);
					String toolTip =web.image(e1Browser+"/web:form[@id='E1PaneForm']/web:img[@id='"+gridCellId[0]+"']").getAttribute("title");
					info("toolTip : "+toolTip);
					if(toolTip == null){	
						toolTip =web.image(e1Browser+"/web:form[@id='E1PaneForm']/web:img[@id='"+gridCellId[0]+"']").getAttribute("tooltip");
					}
					info("toolTip : "+toolTip);
					//The blank space in code "toolTip.contains(" ")" is not normal blank space. It is a special kind of space (may be &nbsp;)
					//This is appearing in only some of the titles.
					/*if(toolTip.contains(" ")){
								toolTip = toolTip.replaceAll(" ", " ");
							}*/
					//info("toolTipText : "+toolTipText);
					if(toolTip!=null){
						if(toolTip.trim().equalsIgnoreCase(toolTipText.trim())){
							flag=1;
						}else{
							flag=0;
						}
					}
					else
					{   
						if((toolTipText==""))
						{
							flag=1;
						}
						else{
							flag=0;	
						}
					}
					if(flag==1)
					{
						info("The validation of tool tip text is successful");	
					}
					else
					{
						testFailure("The validation of tool tip text failed since expected is "+toolTipText +" and actual is "+toolTip);
						CapturePage();
					} 

				}
				else
				{
					testFailure("Failed to identify column "+sColName);
					CapturePage();
				} 


			}

		}

		valCount =valCount+1;
		info("Finished:Function validateGridRowImageToolTipText");
	}

	/************************************************************************************************************
	 * Function: validateHeaderElementBorderColor  
	 * Description: This function is used to validate the border color of the specified header element
	 * Created By: Anusha Bonam
	 * Date: Sep 2016
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *          @param type   - type of the element(i.e.,textfield/text, button, radiobutton/radio, checkbox) 
	 *      	@param id - HTML id of the element
	 *          @param eleName   - Name of the Haeder element 
	 *          @param sColor - Border color of the element
	 * Returns: 
	 *          @return Nil
	 * **********************************************************************************************************
	 */
	public void validateHeaderElementBorderColor(@Arg("type") String type, @Arg("id") String id,@Arg("eleName") String eleName, @Arg("sColor") String sColor) throws Exception {
		info("Starting:Function validateHeaderElementBorderColor "); 
		checkFrame();
		incrementValidationCount(1);
		String bColor,bgColor,OHTML,eleType="";
		String disabledColor[]=null;
		if(((type.trim()).equalsIgnoreCase("textfield"))||((type.trim()).equalsIgnoreCase("text"))){
			//eleType="input_text";
			validateHeaderBorderColor(id,eleName,sColor);
			return;
		}
		else if((type.trim()).equalsIgnoreCase("button")){
			eleType="input_button";
		}
		else if(((type.trim()).equalsIgnoreCase("radiobutton"))||((type.trim()).equalsIgnoreCase("radio"))){
			//eleType="input_radio";
			validateRadioButtonBGColor(type,id,eleName,sColor);
			return;
		}
		else if(type.equalsIgnoreCase("weblist")||type.equalsIgnoreCase("dropdown"))
		{
			eleType="select";
		}
		else if((type.trim()).equalsIgnoreCase("checkbox")){
			//eleType="input_checkbox";
			validateRadioButtonBGColor(type,id,eleName,sColor);
			return;
		}
		else{
			CapturePage();
			testFailure("Type "+type+" is not present");
			return;
		}
		String attr="id", bro="";
		boolean isPresent = false;
		DOMElement ele=null;
		if(id.contains("name="))
		{
			id=id.split("=")[1];
			attr="name";
		}
		else
		{
			try{
				int index=Integer.parseInt(id);
				attr="index";
			}
			catch(NumberFormatException n)
			{
				attr="id";
			}
		}

		if((attr.equals("id")||attr.equals("name"))&&(isModalForm==false)&&(isADF==false)){
			bro="/";
		}else{
			bro=e1Browser;
		}

		ele=web.element(bro+"/web:"+eleType+"[@id='"+id+"']"); 
		if((ele!=null) && (ele.exists())){
			bColor=ele.getAttribute("borderColor"); 
			bgColor=ele.getAttribute("backgroundColor"); 
			OHTML=ele.getAttribute("OuterHTML");  
			info("bColor:"+bColor); 
			info("bgColor:"+bgColor);
			//info("OHTML:"+OHTML);
			try{  //info("in try");
				if (bColor!=null){
					//info("in b if");
					if (sColor.equalsIgnoreCase("red")){ 
						if ((bColor.equalsIgnoreCase("#ff0000"))||(bColor.equalsIgnoreCase("rgb(255, 0, 0)"))||(bColor.equalsIgnoreCase("rgb(255, 124, 124)"))||(bColor.equalsIgnoreCase("#ff7c7c"))){
							info("validateHeaderElementBorderColor Passed: Expected and Actual Color Matched");
						}else{
							CapturePage();
							testFailure("validateHeaderElementBorderColor:Expected color is: "+sColor+" but actual color is: "+bColor);
						}
					}
					else if ((sColor.equalsIgnoreCase("grey"))||(sColor.equalsIgnoreCase("gray"))){
						if ((bColor.equalsIgnoreCase("#DDDDDD"))||(bColor.equalsIgnoreCase("rgb(221, 221, 221)"))||(bColor.equalsIgnoreCase("rgb(244, 246, 247)"))||(bColor.equalsIgnoreCase("#f4f6f7"))){
							info("validateHeaderElementBorderColor Passed: Expected and Actual Color Matched");
						}else{
							CapturePage();
							testFailure("validateHeaderElementBorderColor:Expected color is: "+sColor+" but actual color is: "+bColor);
						}
					}
					else{
						CapturePage();
						testFailure("validateHeaderElementBorderColor:Expected color is: "+sColor+" but actual color is: "+bColor);
					}
				}
				else if(bgColor!=null){
					//info("in bg if");
					if (sColor.equalsIgnoreCase("red")){ 
						if ((bgColor.equalsIgnoreCase("#ff0000"))||(bgColor.equalsIgnoreCase("rgb(255, 0, 0)"))||(bgColor.equalsIgnoreCase("rgb(255, 124, 124)"))||(bgColor.equalsIgnoreCase("#ff7c7c"))){
							info("validateHeaderElementBorderColor Passed: Expected and Actual Color Matched");
						}else{
							CapturePage();
							testFailure("validateHeaderElementBorderColor:Expected color is: "+sColor+" but actual color is: "+bgColor);
						}
					}
					else if ((sColor.equalsIgnoreCase("grey"))||(sColor.equalsIgnoreCase("gray"))){
						if ((bgColor.equalsIgnoreCase("#DDDDDD"))||(bgColor.equalsIgnoreCase("rgb(221, 221, 221)"))||(bgColor.equalsIgnoreCase("rgb(244, 246, 247)"))||(bgColor.equalsIgnoreCase("#f4f6f7"))){
							info("validateHeaderElementBorderColor Passed: Expected and Actual Color Matched");
						}else{
							CapturePage();
							testFailure("validateHeaderElementBorderColor:Expected color is: "+sColor+" but actual color is: "+bgColor);
						}
					}
					else{
						CapturePage();
						testFailure("validateHeaderElementBorderColor:Expected color is: "+sColor+" but actual color is: "+bgColor);
					}
				}
				else if((bColor==null)&&(bgColor==null)&&((sColor.equalsIgnoreCase("plain"))||(sColor.equalsIgnoreCase("white")))){
					info("validateHeaderElementBorderColor Passed: Expected and Actual Color is white color which is matched");
				}
				else if((bColor==null)&&(bgColor==null)&&((sColor.equalsIgnoreCase("grey"))||(sColor.equalsIgnoreCase("gray")))){
					e1Document = "/web:document[@index='"+docIndex+"' or @name='e1menuAppIframe']";
					e1Browser=e1BrowserWindow+e1Document;
					DOMDocument document = web.document(e1Browser);
					/*web.element(bro+"/web:"+eleType+"[@id='"+id+"']").setSelectedJSElement();
		                          document.executeJavaScript("function getDisColor(){return selectedOATSWebDomElement.currentStyle.backgroundColor;}");
		                          disabledColor = web.document(e1Browser).executeJsFunction("getDisColor");  */ 
					document.executeJavaScript("function getDisColor(){return window.getComputedStyle(document.getElementById('"+id+"'),null).getPropertyValue('background-color');}");
					disabledColor = web.document(e1Browser).executeJsFunction("getDisColor");
					info("disabledColor:"+disabledColor[0]);
					if (disabledColor[0]!=null){
						//info("in b if");
						if ((sColor.equalsIgnoreCase("grey"))||(sColor.equalsIgnoreCase("gray"))){
							if ((disabledColor[0].equalsIgnoreCase("#DDDDDD"))||(disabledColor[0].equalsIgnoreCase("rgb(221, 221, 221)"))||(disabledColor[0].equalsIgnoreCase("rgb(244, 246, 247)"))||(disabledColor[0].equalsIgnoreCase("#f4f6f7"))){
								info("validateHeaderElementBorderColor Passed: Expected and Actual Color Matched");
							}else{
								CapturePage();
								testFailure("validateHeaderElementBorderColor Failed:Expected color is: "+sColor+" and actual color is: "+disabledColor[0]);
							}
						}
						else{
							CapturePage();
							testFailure("validateHeaderElementBorderColor Failed:Expected color is: "+sColor+" and actual color is: "+disabledColor[0]);
						}
					}
					else{//info("in else");
						CapturePage();
						testFailure("validateHeaderElementBorderColor:Color is null");
					}

				}
				else{//info("in else");
					CapturePage();
					testFailure("validateHeaderElementBorderColor:Border color  is null");
				}

			}catch(NullPointerException e){info("NPE is caught");}
		}else{
			CapturePage();
			testFailure("validateHeaderElementBorderColor:Element: "+eleName+" with id: "+id+" does not exist");
		}

		info("Finished:Function validateHeaderElementBorderColor"); 
	}

	/**
	 * Function: validateHeaderElementEnabled
	 * Description: Used to validate if the element passed on the header is enabled or disabledCreated By: Anusha BonamDate: Sep 2016To be incorporated: NilInput Parameters:
	 * @param type : type of the element(i.e.,textfield/text, button, radiobutton/radio, checkbox, combobox/weblist/dropdown, image)
	 * @param id : HTML id/index/name of the element
	 * @param Enabled : is the element editable i.e true/false
	 * @param eleName : Name/label of the element Returns:
	 */
	public void validateHeaderElementEnabled(@Arg("type") String type,
			@Arg("id") String id, @Arg("Enabled") boolean Enabled,
			@Arg("eleName") String eleName) throws Exception {
		checkFrame();
		getScript("EOneUtility").callFunction("incrementValidationCount","1");
		info("Starting : Function validateHeaderElementEnabled");
		String eleType=""; 
		if(((type.trim()).equalsIgnoreCase("textfield"))||((type.trim()).equalsIgnoreCase("text"))){
			eleType="input_text";
		}
		else if((type.trim()).equalsIgnoreCase("button")){
			eleType="input_button";
		}
		else if(((type.trim()).equalsIgnoreCase("radiobutton"))||((type.trim()).equalsIgnoreCase("radio"))){
			eleType="input_radio";
		}
		else if((type.trim()).equalsIgnoreCase("checkbox")){
			eleType="input_checkbox";
		}
		else if(((type.trim()).equalsIgnoreCase("combobox"))||((type.trim()).equalsIgnoreCase("weblist"))||((type.trim()).equalsIgnoreCase("dropdown"))){
			eleType="select";
		}
		else if((type.trim()).equalsIgnoreCase("image")){
			eleType="img";
		}
		else{
			web.window(e1BrowserWindow).capturePage();
			testFailure("Type "+type+" is not present");
			return;
		}
		String attr="id", bro="";
		boolean isPresent = false;
		DOMElement ele=null;
		if(id.contains("name="))
		{
			id=id.split("=")[1];
			attr="name";
		}
		else
		{
			try{
				int index=Integer.parseInt(id);
				attr="index";
			}
			catch(NumberFormatException n)
			{
				attr="id";
			}
		}
		if((attr.equals("id")||attr.equals("name"))&&(isModalForm==false)&&(isADF==false)){
			bro="/";
		}else{
			bro=e1Browser;
		}
		ele= web.element(bro+"/web:"+eleType+"[@"+attr+"='"+id+"']");
		
		String isDisabled = null;
		String readonly = null;
		String src, enabImg=null;
		if((ele!=null) && (ele.exists()))
		{
			//info("if ele exists");
			if(eleType.equalsIgnoreCase("img")){
				//info("element is an image");
				src = ele.getAttribute("src");
				//info("src ="+src);
				if((src.contains("ena.png"))||(src.contains("ena.gif"))||(src.contains("ena.bmp"))||(src.contains("ena.jpeg"))){
					enabImg = "true";
					isDisabled = "false";
				}
				else if((src.contains("dis.png"))||(src.contains("dis.gif"))||(src.contains("dis.bmp"))||(src.contains("dis.jpeg"))){
					enabImg = "false";
					isDisabled = "true";
				}
				else{
					CapturePage();
					testFailure("image is neither enabled nor disabled");
				}
				
			}
			else{
			isDisabled=ele.getAttribute("disabled");
			readonly=ele.getAttribute("readonly");
			info("isDisabled: "+isDisabled   +"     readonly ="+readonly );
			/*Block added on 15.3.18. Spurthi P. To check readonly/disabled attribute specifically on chrome or firefox*/
			if(sBrowser.equalsIgnoreCase("chrome") || sBrowser.equalsIgnoreCase("firefox") || sBrowser.equalsIgnoreCase("Edge")){                                                         
                DOMDocument document = web.document(e1Browser);
                document.executeJavaScript("function checkReadonly(){return document.getElementById('"+id+"').hasAttribute('readonly')}");
                String[] status = web.document(e1Browser).executeJsFunction("checkReadonly");    
                if(status[0].equals("true")){
                              readonly = "true";
                }
			}
			//readonly=ele.getAttribute("readOnly");
			info("Captured disable and readonly property values"+ isDisabled+"  "+readonly);
			}
		}else
		{
			CapturePage();
			testFailure("validateHeaderElementEnabled Failed: Element \'"+eleName+"\' with "+attr+" "+id+" is NOT Found");
			return;
		}
		if (((enabImg!=null)&&(enabImg.equalsIgnoreCase("true")))||((isDisabled.equalsIgnoreCase("false"))&&(readonly==null||readonly.equalsIgnoreCase("false"))))
		//if ((isDisabled.equalsIgnoreCase("false"))&&(readonly.equalsIgnoreCase("false")))
		{	
			
			
			if(Enabled)
			{
				info("validateHeaderElementEnabled Passed: "+type+" \'"+eleName+"\' with "+attr+" "+id+" is enabled");
			}
			else
			{
				CapturePage();                      
				testFailure("validateHeaderElementEnabled Failed: "+type+" \'"+eleName+"\' with "+attr+" "+id+" is enabled");   
			}
		}
		else if(((enabImg!=null)&&(enabImg.equalsIgnoreCase("false")))||((isDisabled.equalsIgnoreCase("true"))||(readonly.equalsIgnoreCase("true"))))
		{
			if(Enabled)
			{
				CapturePage();                      
				testFailure("validateHeaderElementEnabled Failed: "+type+" \'"+eleName+"\' with "+attr+" "+id+" is disabled");

			}
			else
			{
				info("validateHeaderElementEnabled Passed: "+type+" \'"+eleName+"\' with "+attr+" "+id+" is disabled");
			}
		}
		else{
			CapturePage();                      
			testFailure("validateHeaderElementEnabled Failed: "+type+" \'"+eleName+"\' with "+attr+" "+id+" not exists");
		}
		info("Finished:Function validateHeaderElementEnabled");
	}


	/************************************************************************************************************
	 * Function: validateMediaObject
	 * Description: The function validates whether a media object type and media object name added by a user is present.
	 * Created By: Rupa
	 * Date: August 2016
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 	@param mediaObjectType  : The type of Media Object(Text,Image etc)
	 *     @param mediaObjectName   : The name of the Media Object.
	 *     @param present: media object is expected to be present or not(True if it should be present, False otherwise)
	 * 		
	 * Returns: 
	 * 	 @return Nil
	 * **********************************************************************************************************
	 */

	public  void validateMediaObject(@Arg("mediaObjectType") String mediaObjectType,@Arg("mediaObjectName") String mediaObjectName, @Arg("present")boolean present) throws Exception {
		info("Started:Function validateMediaObject");
		checkFrame();
		if(docIndex==null){
			getDocIndex();
		}
		String bro;
		if(isModalForm==true){
			bro=e1Browser;
		}else{
			bro="/";
		}
		boolean isPresent= false;
		DOMTable tableDetails = web.table(bro+"/web:table[@id='NavBarInner']");
		List<DOMElement> tableColumns = tableDetails.getElementsByTagName("td");
		int columnsize= tableColumns.size();
		DOMElement eachcolumn=null;
		List<DOMElement> imagePart=null;
		List<DOMElement> textPart=null;
		String imageArea=null;
		String textArea=null;


		for(int j=0 ;j<columnsize;j++)
		{
			eachcolumn=(DOMElement) tableColumns.get(j);
			imagePart  =eachcolumn.getElementsByTagName("img");
			textPart  =eachcolumn.getElementsByTagName("span");
			imageArea= imagePart.get(0).getAttribute("alt");
			textArea=textPart.get(0).getDisplayText();

			if(imageArea.trim().contains(mediaObjectType) && textArea.trim().equalsIgnoreCase(mediaObjectName))
			{
				isPresent=true;
				break;
			}
		}

		if(present==true){
			if(isPresent==true)
			{
				info("media object of type "+mediaObjectType+" and name " +mediaObjectName+" is present");
			}else{
				testFailure("media object of type "+mediaObjectType+" and name " +mediaObjectName+" is not present");
				CapturePage();
			}
		}else{
			if(isPresent==false)
			{
				info("media object of type "+mediaObjectType+" and name " +mediaObjectName+" is not present");
			}else{
				testFailure("media object of type "+mediaObjectType+" and name " +mediaObjectName+" is present");
				CapturePage();
			}					     	
		}
		incrementValidationCount(1);
		info("Finished:Function validateMediaObject");

	}
	/************************************************************************************************************
     * Function: setTextArea
     * Description: Used to enter data in textarea present in the header part on the basis of id 
      * Note: Following Attributes are present for textarea : class, id, name, value
     * Created By: Sachin B K
     * Modified By: Megha K
     * Date: December 2015
     * Modified Date: Feb 2018
     * To be incorporated: Nil
     * Input Parameters: 
      *          @param id : HTML id of the textarea
     *          @param fldName : Name/label of the textarea
     *          @param sVal :  value to be set in given textarea
     * Returns: 
      *          @return Nil
     * **********************************************************************************************************
     */


     public void setTextArea(@Arg("id") String id, @Arg("fldName") String fldName, @Arg("sVal") String sVal)throws Exception {
           checkFrame();
           if(docIndex==null){
                 getDocIndex();
           }
           String objClass=""; 
           String objVal;
           String sVal1;
           DOMTextArea txt=null;
           boolean isPresent = false;

           sVal1=sVal.trim();
           String bro="";
           if(isModalForm==false){
                 bro="/";
           }else{
                 bro=e1Browser;
           }

           isPresent= web.exists(bro+"/web:textarea[@id='"+id+"']", 5);
           if (isPresent==true){

                 txt=web.textArea(bro+"/web:textarea[@id='"+id+"']");
                 if ((id.startsWith("C0_"))|| id.equals("SPNameEntered") ||id.equals("E1PDescription")){
                       isPresent=true;
                 }else{
                       isPresent=false;
                 }
           }
           if (isPresent==true){
                 //Ensuring that the id passed corresponds to an editable text field
                 
                 if ((id.startsWith("C0_"))){
                       objClass=txt.getAttribute("className");
                 }else {
                       objClass=txt.getAttribute("type");
                 }
                 if ((objClass.contains("textfield"))&&(id.startsWith("C0_")) || (objClass.contains("textarea"))&&(id.equals("SPNameEntered"))|| (objClass.contains("textarea"))&&(id.equals("E1PDescription"))){
                       info("id "+id+" corresponds to an editable field");
                       //Setting text
                       txt.click();
                       txt.setText(sVal);
                       txt.pressTab();
                       syncFrame();

                       objVal=txt.getAttribute("value");
                       if(objVal==null){
                             objVal="";
                       }
                       try{
                             double d1=Double.parseDouble(objVal);
                             double d2=Double.parseDouble(sVal1);
                             objVal=Double.toString(d1);
                             sVal1=Double.toString(d2);
                       }
                       catch(NumberFormatException e){        
                       }
                       if ((sVal1.trim().length()>0)&&(objVal.trim().equalsIgnoreCase(sVal1))){     
                             info("Text "+sVal+" is set in the web edit "+fldName+" with ID  "+id+"");      
                       }else if((sVal1.trim().length()==0)&&((objVal.trim().equals("*"))||(objVal.trim().length()==0))){
                             info("Text "+sVal+" is set in the web edit "+fldName+" with ID  "+id+"");  
                       }else {
                             CapturePage();
                             reportFailure("Text "+sVal+" was targeted to set in the textarea with ID  "+id+", however the values seen in the textarea after setting is "+objVal);
                       }
                 }else {
                       CapturePage();
                       reportFailure("The ID , at which user is trying to set text, corresponds to an un-editable text area");
                 }   
           }else {
                 CapturePage();
                 reportFailure("The ID "+id+" , at which user is trying to set text, is not present on the displayed page");
           }
     }

	/************************************************************************************************************
	 * @Function: validateTextArea
	 * @Description: Used to Validate data in textarea (editable as well as uneditable) present in 
	 *                      the header part on the basis of id
	 * @author : Sachin B K
	 * Date: December 2015
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *          @param id : HTML id of the textarea 
	 *          @param fldName : Name/label of the textarea
	 *          @param sVal :  Expected value
	 * Note: Following Attributes are present for textarea : class, id, name, value
	 * Returns: 
	 *          @return Nil
	 * **********************************************************************************************************
	 */

	public void validateTextArea (String id,String fldName,String sVal) throws Exception{
		checkFrame();
		info("Starting:Function validateTextArea ");
		if(docIndex==null){
			getDocIndex();
		} 
		String objVal;
		String sVal1;

		DOMTextArea txt=null;
		sVal1=sVal.trim();
		boolean isPresent = false;
		String bro="";
		if(isModalForm==false){
			bro="/";
		}else{
			bro=e1Browser;
		}

		isPresent= web.exists(bro+"/web:textarea[@id='"+id+"']", 5);

		if (isPresent==true){

			txt=web.textArea(bro+"/web:textarea[@id='"+id+"']");
			if ((id.startsWith("C0_"))|| id.equals("motext")){
				isPresent=true;
			}else{
				isPresent=false;
			}
		}
		if (isPresent==true){               
			//Validating the text once the field type is checked

			objVal=txt.getAttribute("value");
			if (objVal ==null) {
				objVal="";
			}
			try{

				double d1=Double.parseDouble(objVal);
				double d2=Double.parseDouble(sVal1);
				objVal=Double.toString(d1);
				sVal1=Double.toString(d2);
			}
			catch(NumberFormatException e){                                     
			}
			if (objVal.trim().equalsIgnoreCase(sVal1)){
				info("  PASSED  validateTextArea  Text "+sVal+" is seen in the textarea "+fldName+" with id "+id+"");
				beginStep("[validateTextArea]  Passed", 0);
				{
					getStepResult().isPassed();
				}
				endStep();
			}else {
				getLogger().error("  FAILED  validateTextArea  Expected value to be seen in textarea "+fldName+" was "+sVal+", however the value seen in the textarea is "+objVal);
				web.window(e1BrowserWindow).capturePage();
				beginStep("[Validate]  Failed (text not matching)");
				{
					fail("  FAILED validateTextArea  Expected value to be seen in textarea "+fldName+" was "+sVal+", however the value seen in the textarea is "+objVal);
				}
				endStep();     
			}

		}else {     
			getLogger().error("ERROR The id  "+id+", at which user is trying to validate text "+sVal+", for the field "+fldName+" is not present on the displayed page");
			web.window(e1BrowserWindow).capturePage();
			beginStep("[validateTextArea]  Failed (id  dosent exist)");
			{
				fail("ERROR The id  "+id+", at which user is trying to validate text "+sVal+", for the field "+fldName+" is not present on the displayed page");
			}
			endStep();    
		}   
		valCount=valCount+1;
		info("Finished:Function validateTextArea "); 
	}

	//--------------------------------------------------MEDIA OBJECT FUNCTION STARTS--------------------------------------------

	/************************************************************************************************************
	 * Function: setActiveXText
	 * Description: used to set text in the media object activeX Control for long text descriptions 
	 * Created By: Sravan Jonnadula
	 * Date: November 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param iIndex : index of the ActiveX refered 
	 * 		@param sText : text data that needs to be present in ActiveX
	 * Returns:
	 * 		@return Nil
	 * **********************************************************************************************************
	 */	
	public void setActiveXText( @Arg("iIndex") int iIndex, @Arg("sText") String sText) throws Exception {
		checkFrame();
		if(docIndex==null){
			getDocIndex();
		}
		String bro;
		if(isModalForm){
			bro=e1Browser;
		}else{
			bro="/";
		}
		if(web.exists(bro+"/web:object[@id='jdeRTF*']["+iIndex+"]",10)){
			info("ActiveX Text Area is Found");
			web.object(bro+"/web:object[@id='jdeRTF*']["+iIndex+"]").textBox("/web:accText[@index='0']").focus();
			web.object(bro+"/web:object[@id='jdeRTF*']["+iIndex+"]").textBox("/web:accText[@index='0']").mouseClick(1,2);			
			web.object(bro+"/web:object[@id='jdeRTF*']["+iIndex+"]").textBox("/web:accText[@index='0']").setText(sText);
			Robot robot = new Robot();
			robot.delay(1000);
			robot.keyPress(KeyEvent.VK_SPACE);
			robot.keyRelease(KeyEvent.VK_SPACE);
			Thread.sleep(2000);
			robot.keyPress(KeyEvent.VK_BACK_SPACE);
			robot.keyRelease(KeyEvent.VK_BACK_SPACE);
			info(sText+" is set to ActiveX Text Area");
		}else{
			web.window(e1BrowserWindow).capturePage();
			beginStep("[setActiveXText] Failed: ActiveX TextArea "+iIndex+" not found");
			{
				testFailure("ActiveX TextArea with index "+iIndex+" not found");
			}
			endStep();
		}	
	}
	/************************************************************************************************************
	 * Function: getActiveXText
	 * Description: Get the text data present in the ActiveX
	 * Created By: Prakruthi Ram
	 * Date: November 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param iIndex : index of the ActiveX refered 
	 * Returns:
	 * 		@return String value of the text data
	 * **********************************************************************************************************
	 */
	public String getActiveXText(@Arg("iIndex") int iIndex) throws Exception { 
		checkFrame();
		if(docIndex==null){
			getDocIndex();
		}
		//Check if ActiveX is present and get value accordingly, else through error message
		String bro;
		if(isModalForm){
			bro=e1Browser;
		}else{
			bro="/";
		}
		if(web.exists(bro+"/web:object[@id='jdeRTF*']["+iIndex+"]",5)){

			info("ActiveX Text Area is Found");
			web.object(bro+"/web:object[@id='jdeRTF*']["+iIndex+"]").textBox("/web:accText[@index='0']").mouseClick(1,2);
			String sText = web.object(bro+"/web:object[@id='jdeRTF*']["+iIndex+"]").textBox("/web:accText[@index='0']").getAttribute("value");
			info("ActiveX object with Index"+iIndex+" has text : "+sText);
			return sText;

		}else{
			web.window(e1BrowserWindow).capturePage();
			beginStep("[setActiveXText] Failed: ActiveX TextArea "+iIndex+" not found");
			{
				testFailure("ActiveX TextArea with index "+iIndex+" not found. Unable to get text");
			}
			endStep();
			return null;
		}

	}

	/************************************************************************************************************
	 * Function: isActiveXText
	 * Description: Check if the given text is present in the ActiveX text
	 * Created By: Prakruthi Ram
	 * Date: November 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param iIndex : index of the ActiveX refered 
	 * 		@param sGivenText : text data that needs to be present in ActiveX
	 * Returns: 
	 * 		@return Boolean value which asserts if text data is present
	 * **********************************************************************************************************
	 */
	public boolean isActiveXText(@Arg("iIndex") int iIndex, @Arg("sGivenText") String sGivenText) throws Exception { 
		checkFrame();
		if(docIndex==null){
			getDocIndex();
		}
		info("In isActiveXText function. Calling getActiveXText()");
		String sCurrentText = getActiveXText(iIndex);
		info("\nsCurrentText= "+sCurrentText+"\nsGivenText= "+sGivenText);

		//Check if the current text in ActiveX is equal to the given text
		if(sCurrentText.toString().trim().equalsIgnoreCase(sGivenText.trim())){
			info("ActiveX Text data present");
			return true;
		}else{
			info("ActiveX Text data not present");
			//web.window(e1BrowserWindow).capturePage();
			return false;
		}

	}

	/************************************************************************************************************
	 * Function: validateActiveXText
	 * Description: This Function Validates if the string is equal to the whole string in the activeX field
	 * Created By: Prakruthi Ram
	 * Date: November 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param iIndex : index of the ActiveX refered 
	 * 		@param sGivenText : text data that needs to be present in ActiveX
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void validateActiveXText(@Arg("iIndex") int iIndex, @Arg("sGivenText") String sGivenText) throws Exception { 
		checkFrame();
		if(docIndex==null){
			getDocIndex();
		}
		//Check if the current text in ActiveX is equal to the given text
		if(isActiveXText(iIndex, sGivenText)){
			info("PASSED: ActiveX Text data present");
		}else{
			//info("");
			web.window(e1BrowserWindow).capturePage();
			beginStep("[validateActiveXText]  Failed (ActiveX Text data not present. "+iIndex+" not present)", 0);
			{
				testFailure("ActiveX Text data not present. "+iIndex+" not present");
			}endStep();
			getLogger().fatal("FAILED: ActiveX Text data not present.");
		}
		valCount=valCount+1;
	}

	/************************************************************************************************************
	 * Function: isActiveXTextContain
	 * Description: This Function tests if the sub string is present in the whole field.
	 * Created By: Prakruthi Ram
	 * Date: November 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param iIndex : index of the ActiveX refered 
	 * 		@param sGivenText : text data that needs to be present in ActiveX
	 * Returns: 
	 * 		@return Boolean value which asserts if text data is present
	 * **********************************************************************************************************
	 */
	public boolean isActiveXTextContain(@Arg("iIndex") int iIndex, @Arg("sGivenText") String sGivenText) throws Exception { 
		checkFrame();
		if(docIndex==null){
			getDocIndex();
		}
		info("In isActiveXTextContain function. Calling getActiveXText()");
		String sCurrentText = getActiveXText(iIndex);
		info("\nsCurrentText= "+sCurrentText+"\nsGivenText= "+sGivenText);

		//Check if the current text in ActiveX contains the given text
		if(sCurrentText.toString().trim().contains(sGivenText.trim())){ //sCurrentText.toString().contains(sGivenText)
			info("ActiveX Text data present in the given string");
			return true;
		}else{
			info("ActiveX Text data not present in the given string");
			web.window(e1BrowserWindow).capturePage();
			return false;
		}
	}

	/************************************************************************************************************
	 * Function: validateActiveXTextContain
	 * Description: This Function Validates if the sub string is present in the whole field
	 * Created By: Prakruthi Ram
	 * Date: November 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param iIndex : index of the ActiveX refered 
	 * 		@param sGivenText : text data that needs to be present in ActiveX
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void validateActiveXTextContain(@Arg("iIndex") int iIndex, @Arg("sGivenText") String sGivenText) throws Exception { 
		checkFrame();
		if(docIndex==null){
			getDocIndex();
		}
		//Check if the current text in ActiveX is equal to the given text
		if(isActiveXTextContain(iIndex, sGivenText)){
			info("PASSED:ActiveX Text data contains given data.");
		}else{
			beginStep("[validateActiveXTextContain]  Failed (ActiveX Text data not present)", 0);
			{
				testFailure("Text data does not contain given data.");
			}
			endStep();
			getLogger().error("FAILED: Text data does not contain given data.");
			web.window(e1BrowserWindow).capturePage();
		}
		valCount=valCount+1;
	}

	//--------------------------------------------------MEDIA OBJECT FUNCTION ENDS--------------------------------------------
	/************************************************************************************************************
	 * Function: selectWebListItemById
	 * Description: This Function Clicks the specified item in the WebList whenever list is enabled.
	 * Created By: M R Shafiquddin Ahmed
	 * Modified By: Sravan & Govardhan
	 * Date: September 2010
	 * Modified by Sunil: Line 7637 (12/2/19)
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param iId: Id of the WebList on the page.
	 * 		@param webListItem: Item to be selected on the WebList.
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void selectWebListItemById(@Arg("Iid") String Iid, @Arg("sItem")String webListItem) throws Exception {
		checkFrame();
		if(docIndex==null){
			getDocIndex();
		}
		String tempItem="";
		boolean isSelected=false;
		//System.out.println(e1Browser);
		String bro;
 		if(isModalForm==true){
 			bro=e1Browser;
 		}else{
 			bro="/";
 		}
 		String tempPath="";
 		String frameName=getFrameName();
 		if(frameName.equals("Data Selection")||frameName.equals("Literal Prompt")){
 			tempPath=bro+"/web:form[@name='DSEL']";
 		}else if(frameName.equals("Processing Options")){
 			tempPath=bro+"/web:form[@name='JDE']";
 		}else{
 			/*if(web.exists(bro+"/web:form[@id='E1PaneForm']")){
 				tempPath=bro+"/web:form[@id='E1PaneForm']";
 			}else{
 				tempPath=bro;
 				
 			}*/tempPath=bro;
 		}
 		info("temppath::"+tempPath);
		if (web.exists(tempPath+"/web:select[( @id='"+Iid+"')]",10)){
			String isDisabled = web.selectBox(bro+"/web:select[( @id='"+Iid+"')]").getAttribute("disabled").toString();
			if(isDisabled.equalsIgnoreCase("True")) {
				web.selectBox(bro+"/web:select[( @id='"+Iid+"')]").focus();
				web.window(e1BrowserWindow).capturePage();
				beginStep("[selectWebListItem]  Failed (Web List Item with Id "+Iid +" is not Enabled on the page)");
				{
					getStepResult().setError("Web List with the Id "+Iid+" is not Enabled in the page");
				}endStep();
				return; //helps not to execute rest of the code in this function
			}
		}else {
			web.window(e1BrowserWindow).capturePage();
			beginStep("[selectWebListItem]  Failed (Invalid Id : Id not present on the page)");
			{
				getStepResult().setError("Web List with the Id "+Iid+" is not available in the page");
			}endStep();
			return;
		} 
		List<DOMElement> allItems=web.selectBox(bro+"/web:select[(@id='"+Iid+"')]").getOptions();
		//info("weblist size="+allItems.size());

		int idx=0;
		for(DOMElement itm : allItems) {
			try{
				String txt=itm.getAttribute("text");
				//info("Item at index "+idx+" is " + txt );
				if(frameName.equals("Data Selection"))
                             info("Item at index "+idx+" is " + txt );
							 
				if(txt.trim().equals(webListItem.trim())) {
					//web.selectBox(e1Browser+"/web:form[@name='"+formName+"']/web:select[( @index='"+iIndex+"')]").selectOptionByText(txt);
					web.selectBox(bro+"/web:select[( @id='"+Iid+"')]").click();
					
					try{                    
						//this change implemented by sunil on 11.2.19
									web.selectBox(bro+"/web:select[(@id='"+Iid+"')]").selectOptionByIndex(idx);
                                  if((sBrowser.equalsIgnoreCase("firefox"))) {
                                	   if((frameName.equals("Data Selection")) && (!(webListItem.equalsIgnoreCase("Literal")))){
                                		   web.element(bro+"/web:select[(@id='"+Iid+"')]/web:option[(@displayvalue='"+webListItem+"')]").mouseClick(2,2);
                                	   }else{
                                		   web.element(bro+"/web:select[(@id='"+Iid+"')]/web:option[(@text='"+txt+"')]").mouseClick(2,2);  
                                	   }
                                   }
                                   Thread.sleep(2000);
                                   pressKeyChar("TAB");    
                             }catch (PlaybackException p) {
                                   // 
                             }
                             if(!((frameName.equals("Data Selection"))||(frameName.equals("Literal Prompt")))){
                                   web.selectBox(bro+"/web:select[( @id='"+Iid+"')]").pressTab();
                             }
                             /*if(!sBrowser.equalsIgnoreCase("firefox"))
                                   pressKeyChar("TAB");*/
                             syncFrame();
                             isSelected=true;
                             break;
				}
			}catch(Exception e){}
			idx++;
		}
		if(isSelected) {
			info("Weblist item "+webListItem+" found and selected in the weblist with Id "+Iid);
		}else {
			web.window(e1BrowserWindow).capturePage();
			
			testFailure("[selectWebListItem]  Failed : WebList Item '"+webListItem.trim()+"' is not available in the Web List");
		}

	}

	/************************************************************************************************************
	 * Function: validateWebListItem
	 * Description: This Function validates the specified item as the selected item in the WebList.
	 * Created By: Prakruthi Ram
	 * Date: November 2010
	 * Modified By: Sunil -> Line 7750 (Feb 2019)
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param Iid : Id of the WebList on the page
	 * 		@param sItem : Item to be validated as current selection in the WebList
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void validateWebListItemById(@Arg("Iid") String Iid, @Arg("sItem") String sItem) throws Exception { 
		checkFrame();
		if(docIndex==null){
			getDocIndex();
		}
		String sCurrentText=null;
		String bro;
		if(isModalForm==true){
			bro=e1Browser;
		}else{
			bro="/";
		}
		String tempPath="";
		String frameName=getFrameName();
		if(frameName.equals("Data Selection")||frameName.equals("Literal Prompt")){
			tempPath=bro+"/web:form[@name='DSEL']";
		}else if(frameName.equals("Processing Options")){
			tempPath=bro+"/web:form[@name='JDE']";
		}else{
			//tempPath=bro+"/web:form[@id='E1PaneForm']";
			tempPath=bro;
		}
		if(web.exists(tempPath+"/web:select[(@id='"+Iid+"')]",20)){
			
			info("Web List Present");
			//int[] index = web.selectBox(e1Browser+"/web:form[@id='E1PaneForm']/web:select[(@index='"+iIndex+"')and multiple mod 'False']").getSelectedIndex();
			String[] aCurrentText = web.selectBox(tempPath+"/web:select[( @id='"+Iid+"')]").getSelectedText();
			sCurrentText = aCurrentText[0].replaceAll("[^\\x20-\\x7E]","");
			info("Selected text from web list: "+sCurrentText);
		}else{
			getLogger().fatal("weblist not present");
			web.window(e1BrowserWindow).capturePage();
			beginStep("[validateWebListItem] Failed: Web list not present");
			{
				getStepResult().setError("Web list not present");
			}
			endStep();
		}
		sItem = sItem.replaceAll(" ","");
		sCurrentText = sCurrentText.replaceAll(" ","");
		//Check if the specified item is the selected item in the WebList
		if(sCurrentText.trim().equalsIgnoreCase(sItem.trim())){
			info("Specified item is the selected item in the WebList");
		}else{
			getLogger().fatal("Specified item is not the selected item in the WebList");
			web.window(e1BrowserWindow).capturePage();
			beginStep("[validateWebListItem] Failed: Specified item is not the selected item in the WebList");
			{
				testFailure("Specified item is not the selected item in the WebList");
			}
			endStep();
		}
		valCount=valCount+1;
	}

	/************************************************************************************************************
	 * Function: validateWebListState
	 * Description: This Function validates the state of the WebList with the specified state.
	 * Created By: Prakruthi Ram
	 * Date: November 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param Iid : Id of the WebList on the page
	 * 		@param sState : state to be validated (enable or disable)
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void validateWebListStateById(@Arg("Iid") String Iid, @Arg("sState") String sState) throws Exception { 
		checkFrame();
		if(docIndex==null){
			getDocIndex();
		}
		String sCurrentState=null, sCheckState;

		if(sState.trim().equalsIgnoreCase("enable")){
			//info("enabled");
			sCheckState = "false";
		}else if(sState.trim().equalsIgnoreCase("disable")){
			//info("disabled");
			sCheckState = "true";
		}else{
			getLogger().warn("Invalid state argument passed = " + sState);
			beginStep("[ValidateWebListState] FAILED: Invalid state argument passed = " + sState);
			{
				testFailure("Invalid state argument passed = " + sState);
			}
			endStep();
			return;
		}
		String bro;
		if(isModalForm==true){
			bro=e1Browser;
		}else{
			bro="/";
		}
		//Check it the specified WebList is enabled on the page.

		if(web.exists(e1Browser+"/web:form[@id='E1PaneForm']/web:select[(@id='"+Iid+"')and multiple mod 'False']",20)){
			info("Web List Present");
			sCurrentState = web.selectBox(bro+"/web:form[@id='E1PaneForm']/web:select[( @id='"+Iid+"') and multiple mod 'False']").getAttribute("disabled");
			info("Selected text from web list: "+sCurrentState);
			if(sCheckState.equalsIgnoreCase(sCurrentState)){
				info("WebList is " + sState + "d");
			} else{
				getLogger().fatal("WebList is not "+sState+"d");
				web.window(e1BrowserWindow).capturePage();
				beginStep("[ValidateWebListState] FAILED: WebList is not " + sState + "d");
				{
					testFailure("WebList is not " + sState + "d");
				}
				endStep();
			}
		}else{
			getLogger().fatal("weblist not present");
			web.window(e1BrowserWindow).capturePage();
			beginStep("[ValidateWebListState] FAILED: WebList not displayed on the page");
			{
				getStepResult().setError("Web list not present");
			}
			endStep();
		}
		valCount=valCount+1;
	}
	/************************************************************************************************************
     * Function: selectWebListItem
     * Description: This Function Clicks the specified item in the WebList whenever list is enabled.
     * Created By: M R Shafiquddin Ahmed
     * Modified By: Sravan & Govardhan
     * Date: September 2010
     * To be incorporated: Nil
     * Input Parameters: 
      *          @param iIndex: Index of the WebList on the page.
     *          @param webListItem: Item to be selected on the WebList.
     * Returns: 
      *          @return Nil
     * **********************************************************************************************************
     */
     public void selectWebListItem(int iIndex, String webListItem) throws Exception {
           if(docIndex==null){
                 getDocIndex();
           }
           String index = ""+iIndex;
           int webListItemCount=0; String tempItem="";
           int ListBoxCount=0;
           boolean isSelected=false;
           String tempPath="";
           String frameName=getFrameName();
           if(frameName.equals("Data Selection")||frameName.equals("Literal Prompt")){
                 tempPath=e1Browser+"/web:form[@name='DSEL']";
           }else if(frameName.equals("Processing Options")){
                 tempPath=e1Browser+"/web:form[@name='JDE']";
           }else{
                 tempPath=e1Browser+"/web:form[@id='E1PaneForm']";
           }
           List <DOMElement> AllListBoxes=web.element(tempPath).getElementsByTagName("select");
           //System.out.println(AllListBoxes.size());
           List<String> listBoxIds = new ArrayList<String>();
           for( DOMElement d:AllListBoxes) {
                 String items=d.getAttribute("allitems");
                 String list_id=d.getAttribute("id");
                 if((items!=null) && (list_id!=null)&&(!list_id.equals("RILayoutSelectionForm"))&&(!list_id.equals("PersonalizeViewList"))){
                       ListBoxCount++;
                       listBoxIds.add(d.getAttribute("id"));
                 }
           }     
           String bro;
           info("listcount:"+ListBoxCount);
           //checkFrame();
           if(isModalForm==true){
                 bro=e1Browser;
           }else{
                 bro="/";
           }
           String isDisabled;
           List<DOMElement> allItems=null;
           if(ListBoxCount>iIndex){            
                 //if (web.exists(e1Browser+"/web:form[@id='E1PaneForm']/web:select[( @index='"+iIndex+"')]",10)){
                 isDisabled = web.selectBox(bro+"/web:select[( @id='"+listBoxIds.get(iIndex)+"')]").getAttribute("disabled").toString();
                 if(isDisabled.equalsIgnoreCase("True")) {
                       web.selectBox(bro+"/web:select[( @id='"+listBoxIds.get(iIndex)+"')]").focus();
                       web.window(e1BrowserWindow).capturePage();
                       beginStep("[selectWebListItem]  Failed (Web List Item with Index "+iIndex +" is not Enabled on the page)");
                       {
                             getStepResult().setError("Web List with the index "+iIndex+" is not Enabled in the page");
                       }endStep();
                       return; //helps not to execute rest of the code in this function
                 }
                  allItems=web.selectBox(bro+"/web:select[(@id='"+listBoxIds.get(iIndex)+"')]").getOptions();
           }else {
        	   if (index != null){
        		   info(""+bro+"/web:select[(@index='"+index+"')and multiple mod 'False']");
 				if(web.exists(bro+"/web:select[(@index='"+index+"')and multiple mod 'False']",20)){
 					isDisabled = web.selectBox(bro+"/web:select[( @index='"+index+"')]").getAttribute("disabled").toString();
 	                 if(isDisabled.equalsIgnoreCase("True")) {
 	                       web.selectBox(bro+"/web:select[( @index='"+index+"')]").focus();
 	                       web.window(e1BrowserWindow).capturePage();
 	                       beginStep("[selectWebListItem]  Failed (Web List Item with Index "+index +" is not Enabled on the page)");
 	                       {
 	                             getStepResult().setError("Web List with the index "+index+" is not Enabled in the page");
 	                       }endStep();
 	                       return; //helps not to execute rest of the code in this function
 	                 }
 	                 allItems=web.selectBox(bro+"/web:select[(@index='"+index+"')]").getOptions();
 	                int idx=0;
 	                for(DOMElement itm : allItems) {
 	                	try{
 	                		String txt=itm.getAttribute("text");
 	                		info("Item at index "+idx+" is " + txt );
 	                		if(frameName.equals("Data Selection"))
 	                			info("Item at index "+idx+" is " + txt );
 	                		if(txt.trim().equals(webListItem.trim())) {
 	                			//web.selectBox(e1Browser+"/web:form[@name='"+formName+"']/web:select[( @index='"+iIndex+"')]").selectOptionByText(txt);
 	                			web.selectBox(bro+"/web:select[( @index='"+index+"')]").click();
 	                			Thread.sleep(5000);
 	                			try{                                   
 	                				if((browser.getBrowser() instanceof FireFoxBrowser)&& (frameName.equals("Data Selection")) && (!(webListItem.equalsIgnoreCase("Literal")))){
 	                					web.element(bro+"/web:select[(@index='"+index+"')]/web:option[(@displayvalue='"+webListItem+"')]").mouseClick(2,2);
 	                					
 	                				}else if((browser.getBrowser() instanceof FireFoxBrowser)){
 	                					web.selectBox(5 ,bro+"/web:select[(@index='"+index+"')]").getChildren().get(idx).mouseOver(true);
 	                					web.selectBox(5 ,bro+"/web:select[(@index='"+index+"')]").getChildren().get(idx).pressEnter();
 	                					
 	                				}
 	                				else{
 	                					web.selectBox(5 ,bro+"/web:select[(@index='"+index+"')]").selectOptionByIndex(idx);
 	                				} 
 	                				Thread.sleep(2000);
 	                				pressKeyChar("TAB");    
 	                			}catch (PlaybackException p) {
 	                				// 
 	                			}
 	                			if(!((frameName.equals("Data Selection"))||(frameName.equals("Literal Prompt")))){
 	                				if(web.selectBox(bro+"/web:select[( @index='"+index+"')]").exists())
 	                					web.selectBox(bro+"/web:select[( @index='"+index+"')]").pressTab();
 	                			}
 	                			
 	                			syncFrame();
 	                			isSelected=true;
 	                			break;
 	                		}
 	                	}catch(Exception e){}
 	                	idx++;
 	                }
	 	                if(isSelected) {
	 	                	info("Weblist item "+webListItem+" found and selected in the weblist with index "+iIndex+"end");
	 	                	return;
	 	                }else {
	 	                	web.window(e1BrowserWindow).capturePage();
	 	                	beginStep("[selectWebListItem]  Failed (WebList Item Not Found)");
	 	                	{
	 	                		testFailure("WebList Item '"+webListItem.trim()+"' is not available in the Web List");
	 	                	}endStep();
	 	                }
 	  			}else{
 	  					getLogger().fatal("weblist not present");
 	  		  			web.window(e1BrowserWindow).capturePage();
 	  		  			beginStep("[selectWebListItem] Failed: Web list not present");
 	  		  			{
 	  		  				getStepResult().setError("Web list not present");
 	  		  			}
 	  		  			endStep();
 	  		  		return;
 	  				}
 	  	  			  	  		
 	  			}
           } 
           //List<DOMElement> allItems=web.selectBox(bro+"/web:select[(@id='"+listBoxIds.get(iIndex)+"')]").getOptions();
           info("weblist size="+allItems.size());
           //DOMElement itm=items.get(2);
           //info(""+itm.getAttribute("text"));
           //web.selectBox(e1Browser+"/web:form[@name='"+formName+"']/web:select[( @index='"+iIndex+"')]").selectOptionByText(itm.getAttribute("text"));
           int idx=0;
           for(DOMElement itm : allItems) {
                 try{
                       String txt=itm.getAttribute("text");
                       info("Item at index "+idx+" is " + txt );
                       if(frameName.equals("Data Selection"))
                             info("Item at index "+idx+" is " + txt );
                       if(txt.trim().equals(webListItem.trim())) {
                             //web.selectBox(e1Browser+"/web:form[@name='"+formName+"']/web:select[( @index='"+iIndex+"')]").selectOptionByText(txt);
                             web.selectBox(bro+"/web:select[( @id='"+listBoxIds.get(iIndex)+"')]").click();
                             try{                                   
                                   if((sBrowser.equalsIgnoreCase("firefox")) && (frameName.equals("Data Selection")) && (!(webListItem.equalsIgnoreCase("Literal")))){
                                   web.element(bro+"/web:select[(@id='"+listBoxIds.get(iIndex)+"')]/web:option[(@displayvalue='"+webListItem+"')]").mouseClick(2,2);
                                   }else{
									web.selectBox(bro+"/web:select[(@id='"+listBoxIds.get(iIndex)+"')]").selectOptionByIndex(idx);
									} 
                                   Thread.sleep(2000);
                                   pressKeyChar("TAB");    
                             }catch (PlaybackException p) {
                                   // 
                             }
                             if(!((frameName.equals("Data Selection"))||(frameName.equals("Literal Prompt")))){
                            	 if(web.selectBox(bro+"/web:select[( @id='"+listBoxIds.get(iIndex)+"')]").exists())
                                   web.selectBox(bro+"/web:select[( @id='"+listBoxIds.get(iIndex)+"')]").pressTab();
                             }
                             /*if(!sBrowser.equalsIgnoreCase("firefox"))
                                   pressKeyChar("TAB");*/
                             syncFrame();
                             isSelected=true;
                             break;
                       }
                 }catch(Exception e){}
                 idx++;
           }
           if(isSelected) {
                 info("Weblist item "+webListItem+" found and selected in the weblist with index "+iIndex);
           }else {
                 web.window(e1BrowserWindow).capturePage();
                 beginStep("[selectWebListItem]  Failed (WebList Item Not Found)");
                 {
                       testFailure("WebList Item '"+webListItem.trim()+"' is not available in the Web List");
                 }endStep();
           }

     }

	/************************************************************************************************************
	 * Function: validateWebListItem
	 * Description: This Function validates the specified item as the selected item in the WebList.
	 * Created By: Prakruthi Ram
	 * Date: November 2010
	 * Modified by: Sunil line 8083(12/02/19)
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param iIndex : Index of the WebList on the page
	 * 		@param sItem : Item to be validated as current selection in the WebList
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
     public void validateWebListItem(@Arg("iIndex") int iIndex, @Arg("sItem") String sItem) throws Exception { 
   		checkFrame();
   		if(docIndex==null){
   			getDocIndex();
   		}
   		String sCurrentText=null;
   		String index = ""+iIndex;
   		int webListItemCount=0; 
   		int ListBoxCount=0;
   		String bro;
   		if(isModalForm==true){
   			bro=e1Browser;
   		}else{
   			bro="/";
   		}
   		String tempPath="";
   		String frameName=getFrameName();
   		if(frameName.equals("Data Selection")||frameName.equals("Literal Prompt")){
   			tempPath=bro+"/web:form[@name='DSEL']";
   		}else if(frameName.equals("Processing Options")){
   			tempPath=bro+"/web:form[@name='JDE']";
   		}else{
   			tempPath=bro+"/web:form[@id='E1PaneForm']";
   			//tempPath=bro;
   		}

   		List <DOMElement> AllListBoxes=web.element(tempPath).getElementsByTagName("Select");
   		List<String> listBoxIds = new ArrayList<String>();
   		for( DOMElement d:AllListBoxes) {
   			String items=d.getAttribute("allitems");
   			String list_id=d.getAttribute("id");//info(list_id);
   			if((items!=null) && (list_id!=null)&&(!list_id.equals("RILayoutSelectionForm"))&&(!list_id.equals("PersonalizeViewList"))){
   				ListBoxCount++;
   				listBoxIds.add(d.getAttribute("id"));
   			}
   		}  		
   		if(ListBoxCount>iIndex){  			
   			info("Web List Present");
   			//int[] index = web.selectBox(e1Browser+"/web:form[@id='E1PaneForm']/web:select[(@index='"+iIndex+"')and multiple mod 'False']").getSelectedIndex();
   			String[] aCurrentText = web.selectBox(tempPath+"/web:select[( @id='"+listBoxIds.get(iIndex)+"') and multiple mod 'False']").getSelectedText();
   			sCurrentText = aCurrentText[0].replaceAll("[^\\x20-\\x7E]","");
   			info("Selected text from web list: "+sCurrentText);
   		}else{
   			if (index != null){
   				if(web.exists(tempPath+"/web:select[(@index='"+iIndex+"')and multiple mod 'False']",20)){
   				String[] aCurrentText1 = web.selectBox(tempPath+"/web:select[( @index='"+iIndex+"') and multiple mod 'False']").getSelectedText();
   				sCurrentText = aCurrentText1[0].replaceAll("[^\\x20-\\x7E]","");
   	  			info("Selected text from web list: "+sCurrentText);
   				}else{
   					getLogger().fatal("weblist not present");
   		  			web.window(e1BrowserWindow).capturePage();
   		  			beginStep("[validateWebListItem] Failed: Web list not present");
   		  			{
   		  				getStepResult().setError("Web list not present");
   		  			}
   		  			endStep();
   		  		return;
   				}
   	  			  	  		
   			}
   			
   		}
   		sItem = sItem.replaceAll(" ","");
   		sCurrentText = sCurrentText.replaceAll(" ","");
   		//Check if the specified item is the selected item in the WebList
   		if(sCurrentText.toString().trim().equalsIgnoreCase(sItem.trim())){
   			info("Specified item is the selected item in the WebList");
   		}else{
   			getLogger().fatal("Specified item is not the selected item in the WebList");
   			web.window(e1BrowserWindow).capturePage();
   			beginStep("[validateWebListItem] Failed: Specified item is not the selected item in the WebList");
   			{
   				testFailure("Specified item is not the selected item in the WebList");
   			}
   			endStep();
   		}
   		valCount=valCount+1;
   	}
     /*public void validateWebListItem(@Arg("iIndex") int iIndex, @Arg("sItem") String sItem) throws Exception { 
  		checkFrame();
  		if(docIndex==null){
  			getDocIndex();
  		}
  		String sCurrentText=null;
  		int webListItemCount=0; 
  		int ListBoxCount=0;
  		String bro;
  		if(isModalForm==true){
  			bro=e1Browser;
  		}else{
  			bro="/";
  		}
  		String tempPath="";
  		String frameName=getFrameName();
  		if(frameName.equals("Data Selection")||frameName.equals("Literal Prompt")){
  			tempPath=bro+"/web:form[@name='DSEL']";
  		}else if(frameName.equals("Processing Options")){
  			tempPath=bro+"/web:form[@name='JDE']";
  		}else{
  			tempPath=bro+"/web:form[@id='E1PaneForm']";
  		}

  		List <DOMElement> AllListBoxes=web.element(tempPath).getElementsByTagName("Select");
  		List<String> listBoxIds = new ArrayList<String>();
  		for( DOMElement d:AllListBoxes) {
  			String items=d.getAttribute("allitems");
  			String list_id=d.getAttribute("id");info(list_id);
  			if((items!=null) && (list_id!=null)&&(!list_id.equals("RILayoutSelectionForm"))&&(!list_id.equals("PersonalizeViewList"))){
  				ListBoxCount++;
  				listBoxIds.add(d.getAttribute("id"));
  			}
  		}
  		//Check it the specified WebList exist on the page.
  		if(ListBoxCount>iIndex){  			
  			info("Web List Present");
  			//int[] index = web.selectBox(e1Browser+"/web:form[@id='E1PaneForm']/web:select[(@index='"+iIndex+"')and multiple mod 'False']").getSelectedIndex();
  			String[] aCurrentText = web.selectBox(tempPath+"/web:select[( @id='"+listBoxIds.get(iIndex)+"') and multiple mod 'False']").getSelectedText();
  			sCurrentText = aCurrentText[0].replaceAll("[^\\x20-\\x7E]","");
  			info("Selected text from web list: "+sCurrentText);
  		}else{
  			getLogger().fatal("weblist not present");
  			web.window(e1BrowserWindow).capturePage();
  			beginStep("[validateWebListItem] Failed: Web list not present");
  			{
  				getStepResult().setError("Web list not present");
  			}
  			endStep();
  		}
  		sItem = sItem.replaceAll(" ","");
  		sCurrentText = sCurrentText.replaceAll(" ","");
  		//Check if the specified item is the selected item in the WebList
  		if(sCurrentText.toString().trim().equalsIgnoreCase(sItem.trim())){
  			info("Specified item is the selected item in the WebList");
  		}else{
  			getLogger().fatal("Specified item is not the selected item in the WebList");
  			web.window(e1BrowserWindow).capturePage();
  			beginStep("[validateWebListItem] Failed: Specified item is not the selected item in the WebList");
  			{
  				testFailure("Specified item is not the selected item in the WebList");
  			}
  			endStep();
  		}
  		valCount=valCount+1;
  	}*/

	/************************************************************************************************************
	 * Function: validateWebListState
	 * Description: This Function validates the state of the WebList with the specified state.
	 * Created By: Prakruthi Ram
	 * Date: November 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param iIndex : Index of the WebList on the page
	 * 		@param sState : state to be validated (enable or disable)
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
     public void validateWebListState(@Arg("iIndex") int iIndex, @Arg("sState") String sState) throws Exception { 
 		checkFrame();
 		if(docIndex==null){
 			getDocIndex();
 		}
 		//info("in validateWeblist");
 		String sCurrentState=null, sCheckState;
 		String index = ""+iIndex;
 		int webListItemCount=0; 
 		int ListBoxCount=0;
 		List <DOMElement> AllListBoxes=web.element(e1Browser+"/web:form[@id='E1PaneForm']").getElementsByTagName("Select");
 		List<String> listBoxIds = new ArrayList<String>();
 		for( DOMElement d:AllListBoxes) {
 			String items=d.getAttribute("allitems");
 			String list_id=d.getAttribute("id");
 			if((items!=null) && (list_id!=null)&&(!list_id.equals("RILayoutSelectionForm"))&&(!list_id.equals("PersonalizeViewList"))){
 				ListBoxCount++;
 				listBoxIds.add(d.getAttribute("id"));
 			}
 		}
 		//set the state to a true/false value
 		if(sState.trim().equalsIgnoreCase("enable")){
 			//info("enabled");
 			sCheckState = "false";
 		}else if(sState.trim().equalsIgnoreCase("disable")){
 			//info("disabled");
 			sCheckState = "true";
 		}else{
 			getLogger().warn("Invalid state argument passed = " + sState);
 			beginStep("[ValidateWebListState] FAILED: Invalid state argument passed = " + sState);
 			{
 				testFailure("Invalid state argument passed = " + sState);
 			}
 			endStep();
 			return;
 		}
 		String bro;
 		if(isModalForm==true){
 			bro=e1Browser;
 		}else{
 			bro="/";
 		}
 		//Check it the specified WebList is enabled on the page.
 		if(ListBoxCount>iIndex){
 			//if(web.exists(e1Browser+"/web:form[@id='E1PaneForm']/web:select[(@index='"+iIndex+"')and multiple mod 'False']",20)){
 			info("Web List Present");
 			sCurrentState = web.selectBox(bro+"/web:form[@id='E1PaneForm']/web:select[( @id='"+listBoxIds.get(iIndex)+"') and multiple mod 'False']").getAttribute("disabled");
 			info("Selected web list state is: "+sCurrentState);
 			if(sCheckState.equalsIgnoreCase(sCurrentState)){
 				info("WebList is " + sState + "d");
 			} else{
 				getLogger().fatal("WebList is not "+sState+"d");
 				web.window(e1BrowserWindow).capturePage();
 				beginStep("[ValidateWebListState] FAILED: WebList is not " + sState + "d");
 				{
 					testFailure("WebList is not " + sState + "d");
 				}
 				endStep();
 			}
 		}else{
 			if (index != null){
   				if(web.exists(bro+"/web:select[(@index='"+iIndex+"')and multiple mod 'False']",20)){
 	  				 sCurrentState = web.selectBox(bro+"/web:select[( @index='"+iIndex+"') and multiple mod 'False']").getAttribute("disabled");
 	  				info("Selected web list state is: "+sCurrentState);
   					if(sCheckState.equalsIgnoreCase(sCurrentState)){
   						info("WebList is " + sState + "d");
 	  				} else{
 	  					getLogger().fatal("WebList is not "+sState+"d");
 	  					web.window(e1BrowserWindow).capturePage();
 	  					beginStep("[ValidateWebListState] FAILED: WebList is not " + sState + "d");
 	  					{
 	  						testFailure("WebList is not " + sState + "d");
 	  					}
 	  					endStep();
 	  				}
   			}else{
 				getLogger().fatal("weblist not present");
 				web.window(e1BrowserWindow).capturePage();
 				beginStep("[ValidateWebListState] FAILED: WebList not displayed on the page");
 				{
 					getStepResult().setError("Web list not present");
 				}
 				endStep();
 		}
 		}
 		}
 		valCount=valCount+1;
 	}


	//Created by Ghulam Quadir
	//date : 31-Jan-2017
	/************************************************************************************************************
	 * Function: selectRowMenu Description: This function is used to click row menu 
	 * Created By: Ghulam Quadir
	 * Modified By: 
	 * Date: Jan 2017 
	 * To be incorporated: Nil Input
	 * Parameters:
	 * @param RormMenuPath :Semi colon separated path of the row menu
	 * Example:
	 *         selectRowMenu("Order;Attachments;Detail Attachment")
	 *         *****************************************************************
	 */
	public void selectRowMenu(String rowMenuPath) throws Exception
	{
		info("Strting function selectRowMenu");
		checkFrame();
		String bro=null;
		if (docIndex == null) { 
			docIndex = getDocIndex();
		}
		rowMenuPath=rowMenuPath.replace(",", ";");
		rowMenuPath=rowMenuPath.replace(";;", ";"); 

		String[] formMenuItem = rowMenuPath.split(";");
		String element = null;
		String[] elementItems = null;
		List<DOMElement> nobrList=null;

		DOMDocument doc=null;
		DOMElement eleDom=null;
		//p4210
		if(isModalForm){
			bro = e1Browser;
		}
		else{
			bro="/";
		}
		if ((web.exists(bro+"/web:img[@id='ROW_EXIT_BUTTON' ]",60))) {//This ensures presence of "Form Menu icon" on the page 
			customClick(web.element(bro+"/web:img[@id='ROW_EXIT_BUTTON' ]"));
			info("Row menu clicked");
			doc=web.document(e1Browser);

			String currId=web.element(bro+"/web:img[@id='ROW_EXIT_BUTTON' ]").getAttribute("launchmenuid");//Row menu div id is different for all application.

			for(int i=0;i<formMenuItem.length;i++)
			{
				int itemIndex=0;
				element=formMenuItem[i].trim();//First Item of path
				//info("Element="+element);
				elementItems=Pattern.compile("[|]").split(element);
				String elementValue="";
				//info("element items length="+elementItems.length);
				if(elementItems.length==2)//Index is present with from menu item
				{
					itemIndex=Integer.parseInt(elementItems[0]); 
					elementValue=elementItems[1];
				}else
				{
					elementValue=elementItems[0];
				}
				//info("Each elemnt="+element+"  Element value="+elementValue);
				eleDom=web.element(bro+"/web:div[@id='"+currId+"']");
				nobrList=eleDom.getElementsByTagName("nobr");
				//info("nobr list obtained");
				int count=-1;
				String innerHTML="";
				String divId="";
				boolean flag=false;
				for(DOMElement tempDom:nobrList)
				{
					innerHTML=tempDom.getAttribute("innerHTML");
					//info("Inner HTML="+innerHTML);//System Function Call&nbsp;&nbsp;&nbsp;
					if(innerHTML.contains(elementValue))
					{
						count++;
					}
					if(itemIndex==count)//This is the element to select
					{// in this block Hover/Click over the item and find the id of next div.

						//Get the First div element.
						DOMElement temp=tempDom;
						for(int j=0;;j++)
						{
							temp=temp.getParent(); 
							if((temp!=null)&&(temp.getTag().contains("DIV")))//getTag() return tag name in capital letter
							{
								divId=temp.getAttribute("id");
								//info("Parent div id="+divId);
								currId=divId.replace("-Show","");//This will be id of div of next path item
								if(i==formMenuItem.length-1)//It is last element. So click on it.
								{
									if(divId.contains("outer"))//Every last ite parent div has id starting with "outer"
									{
										tempDom.click();
										info("PASSED : Row menu '"+elementValue+"' found and clicked");
										flag=true;
										Thread.sleep(3500);
										if(elementValue.equalsIgnoreCase("View OSA"))
											Thread.sleep(5000);
										else
										syncFrame();
										break;
									}else// It indicates the path given by user is not complete.
									{
										//OSPreferences("Fail");
										web.window(e1BrowserWindow).capturePage();
										testFailure("FAILED : Function selectRowMenu Exiting. Row menu is not Complete.");
										return;
									}
								}else//mouse over element.
								{
									temp.getChildren().get(0).mouseOver();	
									info("Row sub menu '"+elementValue+"' found on the page");
									flag=true;
									break;
								}
							}
							if(j==100)//Find upto hundred parent element only
							{
								break;
							}
						}
						if(flag==true)//Element found. So come out of outer loop also;
						{
							break;
						}
						//info("MOUSE OVER and currId="+currId);
					}
				}
				if(flag==false)//If item did not fid in <nobr> tag
				{
					//OSPreferences("Fail");
					web.window(e1BrowserWindow).capturePage();
					testFailure("FAILED : Row menu "+elementValue+" not found.");
					return;
				}
			}
		}else
		{
			//OSPreferences("Fail");
			web.window(e1BrowserWindow).capturePage();
			testFailure("FAILED : Function selectRowMenu Exiting. Row menu not found.");
			return;
		}
		info("End function selectRowMenu");
	}

	/************************************************************************************************************
	 * Function: selectRowMenu
	 * Description: This function clicks the Row Exit menu and the specified options under the Row Menu.
	 * Created By: Sravan
	 * Date: November 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param sItem : Sub Menu item  avaliable under the Row Menu
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */


	/************************************************************************************************************
	 * Function: stringOccurrences
	 * Description: This function returns number of occurances of strFind in String strText
	 * Created By: Sravan
	 * Date: November 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param strText : Main String
	 * 		@param strFind: SubString
	 * Returns: 
	 * 		@return No of occurances of strFind in String strText 
	 * **********************************************************************************************************
	 */

	public int stringOccurrences(String strText ,String strFind ) {
		int pos=0,temp,scount=0;
		if((strText.length()==0) || (strFind.length()==0)){
			return scount;
		}
		do{
			pos=strText.indexOf(strFind, pos);
			temp=pos;
			if(pos>=0){
				scount++;
				pos=pos+(strFind.length());
			}			

		}while(pos!=-1);
		return scount;		
	}

	/************************************************************************************************************
	 * Function: deleteFile(sFileName)  
	 * Description: This function Deletes the specified File Name
	 * Created By: Ravi 
	 * Date: December 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *              @param FileName : sFileName is the string of directory and file name to be deleted
	 * 		
	 * Returns: 
	 * 		@return true for success, false for no success
	 * **********************************************************************************************************
	 */	
	public boolean deletefile(String sFilename) throws Exception {
		File file = new File(sFilename);
		boolean success = file.delete();
		if (success) {
			//File was deleted
			//info("File was deleted.");
			info("[DeleteFile]: "+sFilename +" found and Deleted successfully");
		}else {
			//File was not deleted

			beginStep("[DeleteFile] Failed: File "+sFilename+" not Deleted");
			{
				testFailure("DeleteFile "+sFilename+" not Deleted or not exist");
			}endStep();
		}
		return success;
	}
	/************************************************************************************************************
	 * Function: dateInEOneFormat
	 * Description: This function will  return the input date in dd/mm/yy format
	 * Created By: Sravan 
	 * Date: December 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *              @param sDate : Date in any format
	 * Returns: 
	 * 		@return Date in mm/dd/yy format
	 * **********************************************************************************************************
	 */	
	public String dateInEOneFormat(@Arg("sDate") String sDate) throws Exception {		
		int i;
		String mm,dd,yy;
		Pattern pat = Pattern.compile("[/]");
		String strs[] = pat.split(sDate);
		int itemCount = strs.length;       
		if(itemCount==3){        	
			for(i=0;i<itemCount;i++){        	
				if(strs[i].length()==1){        		
					strs[i]="0"+strs[i];        		
				}else{
					if(strs[i].length()==4){
						strs[i]=strs[i].substring(2);
					}
				}        	
			}
			mm=strs[0];
			dd=strs[1];
			yy=strs[2];        
			String dateEOne=mm+"/"+dd+"/"+yy;        
			return dateEOne;
		}else{
			beginStep("[dateInEOneFormat] failed: Given input string is not a date, input a date");
			{        	
				testFailure("Given input string is not a date");
			}
			endStep();        	
			return null;
		}

	}

	/************************************************************************************************************
	 * Function: pressKeyInt 
	 * Description: This function is used to perform Keyboard events on integer values
	 * Created By: Sravan
	 * Modified By: Prakruthi
	 * Date: December 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *              @param iKey : Numeric Key to be pressed
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */	
	public void pressKeyInt(@Arg("iKey") int iKey) throws Exception{

		HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>(); 
		// Put elements to the map 
		hm.put(0,KeyEvent.VK_0); 
		hm.put(1,KeyEvent.VK_1); 
		hm.put(2,KeyEvent.VK_2);
		hm.put(3,KeyEvent.VK_3);
		hm.put(4,KeyEvent.VK_4);
		hm.put(5,KeyEvent.VK_5);
		hm.put(6,KeyEvent.VK_6);
		hm.put(7,KeyEvent.VK_7);
		hm.put(8,KeyEvent.VK_8);
		hm.put(9,KeyEvent.VK_9);

		Robot rob=new Robot();	
		int i =(Integer)hm.get(iKey);
		rob.keyPress(i);
		rob.delay(100);
		rob.keyRelease(i); 
		rob =null;
	}

	/************************************************************************************************************
	 * Function: pressKeyChar  
	 * Description: This function is used to perform Keyboard events on Characters, few special characters
	 * Created By: Sravan
	 * Modified By: Prakruthi
	 * Date: December 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *              @param sKey : Character or Modifier Key to be pressed
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */	
	public void pressKeyChar(@Arg("sKey")String sKey) throws Exception{

		/*HashMap<String, Integer> hm = new HashMap<String, Integer>(); 
		// Put elements to the map 
		hm.put("A",KeyEvent.VK_A); 
		hm.put("B",KeyEvent.VK_B); 
		hm.put("C",KeyEvent.VK_C);
		hm.put("D",KeyEvent.VK_D);
		hm.put("E",KeyEvent.VK_E);
		hm.put("F",KeyEvent.VK_F);
		hm.put("G",KeyEvent.VK_G);
		hm.put("H",KeyEvent.VK_H);
		hm.put("I",KeyEvent.VK_I);
		hm.put("J",KeyEvent.VK_J);
		hm.put("K",KeyEvent.VK_K);
		hm.put("L",KeyEvent.VK_L);
		hm.put("M",KeyEvent.VK_M);
		hm.put("N",KeyEvent.VK_N);
		hm.put("O",KeyEvent.VK_O);
		hm.put("P",KeyEvent.VK_P);
		hm.put("Q",KeyEvent.VK_Q);
		hm.put("R",KeyEvent.VK_R);
		hm.put("S",KeyEvent.VK_S);
		hm.put("T",KeyEvent.VK_T);
		hm.put("U",KeyEvent.VK_U);
		hm.put("V",KeyEvent.VK_V);
		hm.put("W",KeyEvent.VK_W);
		hm.put("X",KeyEvent.VK_X);
		hm.put("Y",KeyEvent.VK_Y);
		hm.put("Z",KeyEvent.VK_Z);
		hm.put("0",KeyEvent.VK_0); 
		hm.put("1",KeyEvent.VK_1);
		hm.put("2",KeyEvent.VK_2);
		hm.put("3",KeyEvent.VK_3);
		hm.put("4",KeyEvent.VK_4);
		hm.put("5",KeyEvent.VK_5);
		hm.put("6",KeyEvent.VK_6);
		hm.put("7",KeyEvent.VK_7);
		hm.put("8",KeyEvent.VK_8);
		hm.put("9",KeyEvent.VK_9);
		hm.put("TAB",KeyEvent.VK_TAB);
		hm.put("HOME",KeyEvent.VK_HOME);
		hm.put("CONTROL",KeyEvent.VK_CONTROL);
		hm.put("CTRL",KeyEvent.VK_CONTROL);
		hm.put("ALT",KeyEvent.VK_ALT);
		hm.put("SHIFT",KeyEvent.VK_SHIFT);
		hm.put("ENTER",KeyEvent.VK_ENTER);
		hm.put("UP",KeyEvent.VK_UP);
		hm.put("DOWN",KeyEvent.VK_DOWN);
		hm.put("LEFT",KeyEvent.VK_LEFT);
		hm.put("RIGHT",KeyEvent.VK_RIGHT);
		hm.put("F1",KeyEvent.VK_F1);
		hm.put("F2",KeyEvent.VK_F2);
		hm.put("F3",KeyEvent.VK_F3);
		hm.put("F4",KeyEvent.VK_F4);
		hm.put("F5",KeyEvent.VK_F5);
		hm.put("F6",KeyEvent.VK_F6);
		hm.put("F7",KeyEvent.VK_F7);
		hm.put("F8",KeyEvent.VK_F8);
		hm.put("F9",KeyEvent.VK_F9);
		hm.put("F10",KeyEvent.VK_F10);
		hm.put("F11",KeyEvent.VK_F11);
		hm.put("F12",KeyEvent.VK_F12);
		hm.put("SPACE",KeyEvent.VK_SPACE);
		hm.put("PAGEDOWN",KeyEvent.VK_PAGE_DOWN);
		hm.put("PAGEUP",KeyEvent.VK_PAGE_UP);
		hm.put("FORWARDSLASH",KeyEvent.VK_SLASH);
		hm.put("BACKWARDSLASH",KeyEvent.VK_BACK_SLASH);
		hm.put("BACKSPACE",KeyEvent.VK_BACK_SPACE);
		hm.put("ESCAPE",KeyEvent.VK_ESCAPE);
		hm.put(".",KeyEvent.VK_PERIOD);*/
		Robot rob=new Robot();	
		//int i =(Integer)hm.get(sKey.toUpperCase().trim());
		int i =(Integer)getKeyEvent(sKey.toUpperCase().trim());
		rob.keyPress(i);
		rob.delay(100);
		info("pressed");
		rob.keyRelease(i); 
		info("released");
		rob = null;

	}	

	/************************************************************************************************************
	 * Function: getLPadData
	 * Description: This function will return the specfied data left padded with the required character upto
	 * 				 required places.
	 * Created By: Neha
	 * Date: December 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *              @param sData - data to be padded 
	 *              @param padChar - padding character
	 *              @param tLength - total expected length of the data after padding
	 * Returns: 
	 * 		@return padded data string
	 * **********************************************************************************************************
	 */	
	public String getLPadData(@Arg("sData") String sstring,@Arg("padChar") char padChar,@Arg("tLength") int tLength)throws Exception {
		return String.format("%" + tLength + "s", sstring).replace(' ', padChar);
	}
	
	public Integer getKeyEvent(@Arg("sKey")String sKey) throws Exception{
		Integer sKeyEvent=null;
		
		HashMap<String, Integer> hm = new HashMap<String, Integer>(); 
		// Put elements to the map 
		hm.put("A",KeyEvent.VK_A); 
		hm.put("B",KeyEvent.VK_B); 
		hm.put("C",KeyEvent.VK_C);
		hm.put("D",KeyEvent.VK_D);
		hm.put("E",KeyEvent.VK_E);
		hm.put("F",KeyEvent.VK_F);
		hm.put("G",KeyEvent.VK_G);
		hm.put("H",KeyEvent.VK_H);
		hm.put("I",KeyEvent.VK_I);
		hm.put("J",KeyEvent.VK_J);
		hm.put("K",KeyEvent.VK_K);
		hm.put("L",KeyEvent.VK_L);
		hm.put("M",KeyEvent.VK_M);
		hm.put("N",KeyEvent.VK_N);
		hm.put("O",KeyEvent.VK_O);
		hm.put("P",KeyEvent.VK_P);
		hm.put("Q",KeyEvent.VK_Q);
		hm.put("R",KeyEvent.VK_R);
		hm.put("S",KeyEvent.VK_S);
		hm.put("T",KeyEvent.VK_T);
		hm.put("U",KeyEvent.VK_U);
		hm.put("V",KeyEvent.VK_V);
		hm.put("W",KeyEvent.VK_W);
		hm.put("X",KeyEvent.VK_X);
		hm.put("Y",KeyEvent.VK_Y);
		hm.put("Z",KeyEvent.VK_Z);
		hm.put("0",KeyEvent.VK_0); 
		hm.put("1",KeyEvent.VK_1);
		hm.put("2",KeyEvent.VK_2);
		hm.put("3",KeyEvent.VK_3);
		hm.put("4",KeyEvent.VK_4);
		hm.put("5",KeyEvent.VK_5);
		hm.put("6",KeyEvent.VK_6);
		hm.put("7",KeyEvent.VK_7);
		hm.put("8",KeyEvent.VK_8);
		hm.put("9",KeyEvent.VK_9);
		hm.put("F1",KeyEvent.VK_F1);
		hm.put("F2",KeyEvent.VK_F2);
		hm.put("F3",KeyEvent.VK_F3);
		hm.put("F4",KeyEvent.VK_F4);
		hm.put("F5",KeyEvent.VK_F5);
		hm.put("F6",KeyEvent.VK_F6);
		hm.put("F7",KeyEvent.VK_F7);
		hm.put("F8",KeyEvent.VK_F8);
		hm.put("F9",KeyEvent.VK_F9);
		hm.put("F10",KeyEvent.VK_F10);
		hm.put("F11",KeyEvent.VK_F11);
		hm.put("F12",KeyEvent.VK_F12);
		hm.put("CTRL",KeyEvent.VK_CONTROL);
		hm.put("CONTROL",KeyEvent.VK_CONTROL);
		hm.put("ALT",KeyEvent.VK_ALT);
		hm.put("SHIFT",KeyEvent.VK_SHIFT);
		hm.put("TAB",KeyEvent.VK_TAB);
		hm.put("DEL",KeyEvent.VK_DELETE);
		hm.put("ENTER",KeyEvent.VK_ENTER);
		hm.put("HOME",KeyEvent.VK_HOME);
		hm.put("SPACE",KeyEvent.VK_SPACE);
		hm.put("PGDN",KeyEvent.VK_PAGE_DOWN);
		hm.put("PAGEDOWN",KeyEvent.VK_PAGE_DOWN);
		hm.put("PGUP",KeyEvent.VK_PAGE_UP);
		hm.put("PAGEUP",KeyEvent.VK_PAGE_UP);

		// hm.put("TAB",KeyEvent.VK_TAB);
		hm.put("END",KeyEvent.VK_END);
		hm.put("UP",KeyEvent.VK_UP);
		hm.put("DOWN",KeyEvent.VK_DOWN);
		hm.put("LEFT",KeyEvent.VK_LEFT);
		hm.put("RIGHT",KeyEvent.VK_RIGHT);
		hm.put("FORWARDSLASH",KeyEvent.VK_SLASH);
		hm.put("BACKWARDSLASH",KeyEvent.VK_BACK_SLASH);
		hm.put(";",KeyEvent.VK_SEMICOLON);
		hm.put("-",KeyEvent.VK_MINUS);
		hm.put(".",KeyEvent.VK_PERIOD);
		hm.put("FORWARDSLASH",KeyEvent.VK_SLASH);
		hm.put("BACKSPACE",KeyEvent.VK_BACK_SPACE);
		hm.put("ESCAPE",KeyEvent.VK_ESCAPE);

		sKeyEvent=hm.get(sKey);
		
		return sKeyEvent;
		}
	
	/************************************************************************************************************
	 * Function: pressHotkeys
	 * Description: This function presses the key of what ever is passed in
	 * Created By: Ravi
	 * Date: December 2010
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *              @param sKey : Keys to be pressed
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************/
	public void pressHotkeys(@Arg("sKey")String sKey) throws Exception{
		/*if(docIndex==null){
			getDocIndex();
		}*/
		//web.element(e1Browser+"/web:td[@index='0']").focus();
		//Thread.sleep(1000);

		/*HashMap<String, Integer> hm = new HashMap<String, Integer>(); 
		// Put elements to the map 
		hm.put("A",KeyEvent.VK_A); 
		hm.put("B",KeyEvent.VK_B); 
		hm.put("C",KeyEvent.VK_C);
		hm.put("D",KeyEvent.VK_D);
		hm.put("E",KeyEvent.VK_E);
		hm.put("F",KeyEvent.VK_F);
		hm.put("G",KeyEvent.VK_G);
		hm.put("H",KeyEvent.VK_H);
		hm.put("I",KeyEvent.VK_I);
		hm.put("J",KeyEvent.VK_J);
		hm.put("K",KeyEvent.VK_K);
		hm.put("L",KeyEvent.VK_L);
		hm.put("M",KeyEvent.VK_M);
		hm.put("N",KeyEvent.VK_N);
		hm.put("O",KeyEvent.VK_O);
		hm.put("P",KeyEvent.VK_P);
		hm.put("Q",KeyEvent.VK_Q);
		hm.put("R",KeyEvent.VK_R);
		hm.put("S",KeyEvent.VK_S);
		hm.put("T",KeyEvent.VK_T);
		hm.put("U",KeyEvent.VK_U);
		hm.put("V",KeyEvent.VK_V);
		hm.put("W",KeyEvent.VK_W);
		hm.put("X",KeyEvent.VK_X);
		hm.put("Y",KeyEvent.VK_Y);
		hm.put("Z",KeyEvent.VK_Z);
		hm.put("0",KeyEvent.VK_0); 
		hm.put("1",KeyEvent.VK_1); 
		hm.put("2",KeyEvent.VK_2);
		hm.put("3",KeyEvent.VK_3);
		hm.put("4",KeyEvent.VK_4);
		hm.put("5",KeyEvent.VK_5);
		hm.put("6",KeyEvent.VK_6);
		hm.put("7",KeyEvent.VK_7);
		hm.put("8",KeyEvent.VK_8);
		hm.put("9",KeyEvent.VK_9);
		hm.put("F1",KeyEvent.VK_F1);
		hm.put("F2",KeyEvent.VK_F2);
		hm.put("F3",KeyEvent.VK_F3);
		hm.put("F4",KeyEvent.VK_F4);
		hm.put("F5",KeyEvent.VK_F5);
		hm.put("F6",KeyEvent.VK_F6);
		hm.put("F7",KeyEvent.VK_F7);
		hm.put("F8",KeyEvent.VK_F8);
		hm.put("F9",KeyEvent.VK_F9);
		hm.put("F10",KeyEvent.VK_F10);
		hm.put("F11",KeyEvent.VK_F11);
		hm.put("F12",KeyEvent.VK_F12);
		hm.put("CTRL",KeyEvent.VK_CONTROL);
		hm.put("ALT",KeyEvent.VK_ALT);
		hm.put("SHIFT",KeyEvent.VK_SHIFT);
		hm.put("TAB",KeyEvent.VK_TAB);
		hm.put("DEL",KeyEvent.VK_DELETE);
		hm.put("ENTER",KeyEvent.VK_ENTER);
		hm.put("HOME",KeyEvent.VK_HOME);
		hm.put("SPACE",KeyEvent.VK_SPACE);
		hm.put("PGDN",KeyEvent.VK_PAGE_DOWN);
		hm.put("PGUP",KeyEvent.VK_PAGE_UP);
		// hm.put("TAB",KeyEvent.VK_TAB);
		hm.put("END",KeyEvent.VK_END);
		hm.put("UP",KeyEvent.VK_UP);
		hm.put("DOWN",KeyEvent.VK_DOWN);
		hm.put("BACKWARDSLASH",KeyEvent.VK_BACK_SLASH);
		hm.put(";",KeyEvent.VK_SEMICOLON);
		hm.put("-",KeyEvent.VK_MINUS);
		hm.put(".",KeyEvent.VK_PERIOD);
		hm.put("FORWARDSLASH",KeyEvent.VK_SLASH);*/
		if ( sKey=="" ){
			
			testFailure("[PressHotkeys] Failed: Not Pressing any Hot Keys. Exiting Function");
			return ;
		} else {

			int table, i;
			Pattern pat = Pattern.compile("[+]");
			String tablelist[] = pat.split(sKey);

			//  'now loop through the tables and 
			Robot rob=new Robot();	
			for (table=0;table<tablelist.length;table++){
				//i =(Integer)hm.get(tablelist[table].toUpperCase().trim());
				i =(Integer)getKeyEvent(tablelist[table].toUpperCase().trim());
				rob.keyPress(i);
				
				rob.delay(100);
				info("pressed key char "+tablelist[table].toUpperCase().trim());
			}
			//for (table=0;table<tablelist.length;table++){
			for (table=(tablelist.length-1);table>=0;table--){
				//i =(Integer)hm.get(tablelist[table].toUpperCase().trim());
				i =(Integer)getKeyEvent(tablelist[table].toUpperCase().trim());
				rob.keyRelease(i); 
				info("released key char "+tablelist[table].toUpperCase().trim());
			}
			rob = null;
		}
	}
	//------------------------------------------START of Grid Functions-----------------------------------------------------

	/************************************************************************************************************
	 * Function: validateGridRowCount(iIndex,iRows)  
	 * Description: This function is used to validate number of rows of a grid	 
	 * Created By: Sravan
	 * Modified By : Praneetha
	 * Date: January 2011
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *      @param iIndex : Index of the Grid
	 *      @param iRows=Expected number of rows of Grid              		
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void validateGridRowCount(@Arg("iIndex") int iIndex,	@Arg("iRows") int iRows) throws Exception {
		/*if(docIndex==null){
			getDocIndex();
		}*/

		int rowCount;
		String gridId;
		if (!bDB) {
			checkFrame();
			gridId = getGridObjReference(iIndex);
		} else {
			gridId = getDataBrowserGridObjReference();
		}
		if (gridId != null) {
			if (!bDB) {
				String output[] = web.document(e1Browser).executeJsFunction("getvisibleRowCount", gridId);
				rowCount=Integer.parseInt(output[0]);
			}else{
				String output[] = web.document(sDBBrowser).executeJsFunction("getvisibleRowCount", gridId);
				rowCount=Integer.parseInt(output[0]);
			}			
			if (rowCount == iRows){
				info("Expected and Actual row count (" + iRows+ ") are matching");
			} else {
				if (!bDB) {
					web.window(e1BrowserWindow).capturePage();
				}else{
					web.window(sDBBrowserWindow).capturePage();
				}
				beginStep("[validateGridRowCount] Failed: Expected row count is "+ iRows + " and the actual row count is " + rowCount);
				{
					testFailure("Expected row count is " + iRows+ " and the actual row count is "+ rowCount);
				}
				endStep();
			}
		}
		valCount=valCount+1;
	}


	/************************************************************************************************************
	 * Function: validateGridQBEEnabled  
	 * Description: This function will validate whether the QBE field is present and if it is enabled or not.
	 * Created By: Anusha
	 * Date: January 2013
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *      @param iIndex : Index of the Grid,
	 *      @param sParam : semicolon separated grid  column headers                       
	 * Returns: 
	 *          @return Nil
	 * Example :  validateGridQBEEnabled(0,"BlockCode;HarvestPeriod");
	 * **********************************************************************************************************
	 */
	public void validateGridQBEEnabled(@Arg("iIndex") int iIndex, @Arg("sColName")  String sColName) throws Exception {
		info("Starting:Function validateGridQBEEnabled ");
		String param[] = Pattern.compile("[;]").split(sColName);
		checkFrame();
		String gridID = getGridObjReference(iIndex),qbeId;
		String sColIndex;
		for(int idx=0;idx<(param.length);idx++){
			String tempFld=param[idx];
			//Keeping column header intact as given by automator for addition in datatable 
			//String dtPar=param[idx];
			sColIndex=getColIndexForColName(gridID, tempFld);

			if(sColIndex != null){
				String tempVal =null;
				//info("colIndex "+sColIndex);
				//String[] qbeFld = web.document(e1Browser).executeJsFunction("getQBEFldId", gridID,sColIndex); 
				//info("qbeFld:"+qbeFld[0]);
				if (!bDB) {
					String[] output = web.document(e1Browser).executeJsFunction("setQBECellElemForColumn", gridID.toString(),sColIndex.toString(),tempVal);
					qbeId=output[0];
					//info(":"+output[0]);
					if(!qbeId.equals("")){
						info("Identified QBE");
					}else{
						web.window(e1BrowserWindow).capturePage();
						beginStep("[validateGridQBEEnabled] Identify QBE Failed: QBE field for column not exist",0);
						{
							testFailure("QBE field for column(s) not exist");
						}endStep();
					}
				}
				String[] bDisabled = web.document(e1Browser).executeJsFunction("isQBEDisabled", gridID,sColIndex);
				info("checking if disabled = "+bDisabled[0]);
				if(bDisabled[0].equalsIgnoreCase("True")){

					getLogger().error("Failure: QBE field for column " +tempFld + " is Disabled");
					web.window(e1BrowserWindow).capturePage();
					beginStep("[validateGridQBEEnabled] Failed: QBE field for column " +tempFld + " is Disabled");
					{
						testFailure("Failed: QBE field for column " +tempFld + " is Disabled");

					}endStep();
				} else{
					info("Passed: QBE field for column " +tempFld + " is Enabled");
					beginStep("[validateGridQBEEnabled]Passed: QBE field for column " +tempFld + " is Enabled",0);
					{
						getStepResult().isPassed();
					}endStep();
				}
			} else{
				getLogger().error("Failure: Column " + tempFld + " not present in grid");
				web.window(e1BrowserWindow).capturePage();
				beginStep("[validateGridQBEEnabled] Failed: In Column Identification");
				{
					testFailure("Failed: Column " + tempFld + " not present in grid");

				}endStep();
			}
		}
		valCount=param.length+valCount;
		info("Finished:Function validateGridQBEEnabled ");
	}
	/************************************************************************************************************
	 * Function: setGridQBEValues(iIndex,sParams)  
	 * Description: This function is to set values into QBE
	 * Created By: Sravan
	 * Date: January 2011
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *      @param iIndex : Index of the Grid, sParams,
	 *      @param sParams - semicolon separated columnHeader=value pairs	               		
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void setGridQBEValues(@Arg("iIndex")	int iIndex, @Arg("sParams")	String sParams) throws Exception {
		if(docIndex==null){
			getDocIndex();
		}
		info("Start of function setGridQBEValues");
		String tempFld,tempVal,qbeId;
		String param[]=Pattern.compile("[;]").split(sParams);
		String gridId,colIndex;
		if (!bDB) {
			checkFrame();
			gridId = getGridObjReference(iIndex);
		} else {
			gridId = getDataBrowserGridObjReference();
		}
		if(gridId!=null){ 
			for(int i=0;i<param.length;i++){
				String fieldVal[]=Pattern.compile("[=]").split(param[i]);
				if(fieldVal.length==2){
					tempFld=fieldVal[0];
					tempVal=fieldVal[1];
					tempVal=tempVal.replaceAll("~", "=");
				}else{
					tempFld=fieldVal[0];
					tempVal=null;
				}
				colIndex=getColIndexForColName(gridId, tempFld);
				if(colIndex != null){
					if (!bDB) {
						String[] output = web.document( e1Browser).executeJsFunction("setQBECellElemForColumn", gridId,colIndex,tempVal);
						qbeId=output[0];//info("qbeId::"+qbeId);
						
						if(!qbeId.equals("null")){
							web.textBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_text[@id='"+qbeId+"']").focus();
							web.textBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_text[@id='"+qbeId+"']").setText(tempVal);
							web.textBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_text[@id='"+qbeId+"']").fireEvent("onChange");
							info("Identified " +tempFld+" field and Entered " + tempVal);
						}else{
							web.window(e1BrowserWindow).capturePage();							
							testFailure("[SetGridQBEValues] SetQBE Failed: QBE field for column "+tempFld+" not exist");
						}
					} else {
						String[] output = web.document(sDBBrowser).executeJsFunction("setQBECellElemForColumn", gridId,colIndex,tempVal);
						qbeId=output[0];
						if(!qbeId.equals("null")){
							web.textBox(sDBBrowser+"/web:form[@id='E1PaneForm']/web:input_text[@id='"+qbeId+"']").focus();
							web.textBox(sDBBrowser+"/web:form[@id='E1PaneForm']/web:input_text[@id='"+qbeId+"']").setText(tempVal);
							web.textBox(sDBBrowser+"/web:form[@id='E1PaneForm']/web:input_text[@id='"+qbeId+"']").fireEvent("onChange");
							info("Identified " +tempFld+" field and Entered " + tempVal);
						}else{
							web.window(sDBBrowserWindow).capturePage();
							
							testFailure("[SetGridQBEValues] SetQBE Failed: QBE field for column "+tempFld+" not exist");
						}
					}	
				} else{
					if (!bDB) {
						web.window(e1BrowserWindow).capturePage();
					} else{
						web.window(sDBBrowserWindow).capturePage();
					}
					
					testFailure("[SetGridQBEValues] SetQBE Failed: Column index for "+tempFld+" is null");
				}
			}
		}
	}

	/************************************************************************************************************
	 * Function: getGridObjReference(iIndex)
	 * Description: This function is used to find the Grid reference (Grid Id)
	 * Created By: Sravan
	 * Date: January 2011
	 * To be incorporated: Nil
	 * Input Parameters:
	 *      @param iIndex : Index of the Grid 		
	 * Returns: 
	 * 		@return Grid reference(Grid ID)
	 * **********************************************************************************************************
	 */

	public String getGridObjReference( @Arg("iIndex") int iIndex) throws Exception {          
		if(docIndex==null){
			getDocIndex();
		}
		String bro;
		if(isModalForm==true){
			bro=e1Browser;
		}else{
			bro="/";
		}
		if(!gridIds.isEmpty()){
			/**if(iIndex>=gridIds.size()){
                  web.window(e1BrowserWindow).capturePage();
                  beginStep("[getGridObjectReference] Failed: There is no Grid with index "+iIndex );
                  {
                        getStepResult().setError("Grid not Found, Grid index out of range");
                  }endStep();
                  return null;
                  }*/
			try{String gridId=gridIds.get(iIndex);  
			if(web.exists(bro+"/web:table[@className='JSGridQTPClass' and @id='jdeGrid"+gridId+"']",20)){
				return gridId;
			}
			else{
				gridIds.clear();
			}
			}catch(IndexOutOfBoundsException e){
				gridIds.clear();
			}
		}
		if(web.exists(bro+"/web:table[@className='JSGridQTPClass' and @id='jdeGrid*']",20)){              
			
			setErrorRecovery(BasicErrorRecovery.ERR_FILE_NOT_FOUND, ErrorRecoveryAction.Fail);
			executeJSCode();
			//PropertyTestList prop=new PropertyTestList();
			//prop.add("className", "JSGridQTPClass");
			//prop.add("id", "jdeGrid*");
			//List<DOMElement> allTables=web.document(e1Browser).getElementsByTagName("table", prop);
			List<DOMElement> allTables=web.document(e1Browser).getElementsByClassName("JSGridQTPClass");
			//List<DOMElement> allTables=web.document(e1Browser).getElementsByTagName("table");
			//List<String> gridIds = new ArrayList<String>();
			String output[];
			DOMTable tableId;
			for(DOMElement tab:allTables){
				String id=tab.getAttribute("id");
				if(id.startsWith("jdeGrid")){
					output =  web.document(e1Browser).executeJsFunction("hiddenGrid",id.replace("jdeGrid", ""));
					if(!output[0].equals("Hidden")){
						/*web.table(e1Browser+"/web:table[@id='"+id+"' ]")
						.setSelectedJSElement();

						web.document(e1Browser)
						.executeJavaScript("function getVisibilty(){return selectedOATSWebDomElement.currentStyle.visibility.toString();}");*/
						/*						tableId = web.table(e1Browser+"/web:table[@id='"+id+"' ]");*/
						//web.document(e1Browser).executeJavaScript("function getVisibilty(){return document.getElementById('"+id+"').style.visibility.toString();}"); 
						web.document(e1Browser).executeJavaScript("function getVisibilty(){return window.getComputedStyle(document.getElementById('"+id+"'),null).getPropertyValue('visibility');}");
						String s[]=web.document(e1Browser)
						.executeJsFunction("getVisibilty");

						if(!s[0].equalsIgnoreCase("hidden")){
							//hiddenGrids.add(tab.getAttribute("id"));
							if(id.length()<8){
								warn("Invalid Grid Id");
							}
							gridIds.add(id.replace("jdeGrid", ""));
						}
					}}
			}
			int visGridsCount=gridIds.size();
			if(iIndex>=visGridsCount){
				web.window(e1BrowserWindow).capturePage();
				beginStep("[getGridObjectReference] Failed: There is no Grid with index "+iIndex +", Current frame has "+visGridsCount+ " grid(s) only");
				{
					getStepResult().setError("Grid not Found, Grid index out of range");
				}endStep();
				return null;
			}else{
				String gridId=gridIds.get(iIndex);  
				//info(""+gridId);
				return gridId;
			}
		}else{
			web.window(e1BrowserWindow).capturePage();
			beginStep("[getGridObjectReference] Failed: Grid not found");
			{
				getStepResult().setError("Grid not found");
			}endStep();
			return null;
		}

	}

	/************************************************************************************************************
	 * Function: getDataBrowserGridObjReference()
	 * Description: This function is used to find the Grid reference (Grid Id)
	 * Created By: Sravan
	 * Date: April 2011
	 * To be incorporated: Nil
	 * Input Parameters: Nil       		
	 * Returns: 
	 * 		@return DataBrowser Grid reference(Grid ID)
	 * **********************************************************************************************************
	 */
	public String getDataBrowserGridObjReference() throws Exception {		
		String gridId,Id;
		setErrorRecovery(BasicErrorRecovery.ERR_FILE_NOT_FOUND, ErrorRecoveryAction.Fail);
		executeJSCode();
		String[] output =  web.document(sDBBrowser).executeJsFunction("getGridIds","0");
		//info(output[0]);
		if(web.exists(sDBBrowser+"/web:table[@className='JSGridQTPClass' and @id='jdeGrid*']")){
			Id=web.table(sDBBrowser+"/web:table[@className='JSGridQTPClass' and @id='jdeGrid*']").getAttribute("id");
			gridId=Id.substring(7);
		}else{
			getLogger().error("Grid not found on DataBrowser");
			beginStep("[getGridObjectReference] Failed: Grid not found");
			{
				web.window(sDBBrowserWindow).capturePage();
				OSPreferences("Fail");
				fail("Grid not found on DataBrowser");
			}endStep();			
			gridId=null;
		}
		//info("Finished Function: getDataBrowserGridObjReference");

		return gridId;
	}
	/************************************************************************************************************
	 * Function: getColIndexForColName(gridId,colName)
	 * Description: This function is used get the index of a column if the column name is passed 
	 * Created By: Sravan
	 * Date: January 2011
	 * To be incorporated:
	 * Input Parameters:
	 *      @param gridId : Grid ID
	 * 		@param colName Column Name
	 * @return Column Index
	 * **********************************************************************************************************
	 */
	public String getColIndexForColName(@Arg("gridId") String gridId, @Arg("colName") String colName) throws Exception {		
		String colIndex=null;
		boolean colflag=false;
		String index=null;
		colName=colName.replaceAll("~", "=");
		colName=colName.replaceAll(" ", "");
		colName=colName.replaceAll("&#37;", "%");
		colName=colName.replaceAll("&#39;", "'");
		colName=colName.replaceAll("&#45;", "-");
		colName=colName.replaceAll("&#40;", "(");
		colName=colName.replaceAll("&#41;", ")");
		colName=colName.replaceAll("&#42;", "*");
		colName=colName.replaceAll("&#43;", "+");
		colName=colName.replaceAll("&#38;", "&");
		if (!bDB) {
			if (gridId != null) {
				//String id = gridId.toString();
				String[] output = web.document(e1Browser).executeJsFunction("getColLen", gridId);				
				int colCount=0;
				try{colCount=Integer.parseInt(output[0]);}catch (NumberFormatException e) {
					warn("numberformat exception "+output[0]);
				}
				int ivx;
				String fieldName=null;
				String c2=colName.trim();
				//info("Expected column :"+ c2);
				for(ivx=-2;ivx<(colCount);ivx++){
					output = web.document(e1Browser).executeJsFunction("getColLabel", gridId,Integer.toString(ivx));
					fieldName=output[0];
					if(fieldName!=null){
						String fldName=fieldName.replaceAll(newline, "");
						fldName=fldName.replaceAll(" ", "");
						fldName=fldName.replaceAll("&#37;", "%");
						fldName=fldName.replaceAll("&#39;", "'");
						fldName=fldName.replaceAll("&#45;", "-");
						fldName=fldName.replaceAll("&#40;", "(");
						fldName=fldName.replaceAll("&#41;", ")");
						fldName=fldName.replaceAll("&#42;", "*");
						fldName=fldName.replaceAll("&#43;", "+");
						fldName=fldName.replaceAll("&#38;", "&");
						String c1=fldName.trim();
						//info(c1);
						if(c1.equals(c2)){
							String[] colIsHidden = web.document(e1Browser).executeJsFunction("gridCellIsHidden", gridId,Integer.toString(ivx));
							if(colIsHidden[0].equalsIgnoreCase("false")){
								colIndex=Integer.toString(ivx);
								return colIndex;
							}
							info(fieldName +"  hidden = "+colIsHidden[0]);
						} 
					}
				} 
			}
		} else {			
			if(colNames.containsKey(colName.trim())){			
				colIndex=Integer.toString(colNames.get(colName.trim()));
				return colIndex;
			}		
		}		
		return colIndex;
	}		

	/************************************************************************************************************
	 * Function: setGridRowText
	 * Description: This function will set the values in one or more columns of a specified row in the grid. 
	 * 				This will click the cell first to turn it into an edit field itself.
	 * Created By: Neha
	 * Date: Jan 2011
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param iIndex : index of the grid in the webpage starting from 0 
	 * 		@param iRow : visible row index of the specified row
	 * 		@param sParam : semicolon separated columnheader=value pairs
	 * Returns: 
	 * 		@return NA
	 * **********************************************************************************************************
	 */
	public void setGridRowText(@Arg("iIndex") int iIndex, @Arg("iRow") int iRow,  @Arg("sParam") String sParam) throws Exception { 
		String tempFld,tempVal,SetFieldvalue,dummy="";
		Pattern pat = Pattern.compile("[;]");
		String param[] = pat.split(sParam);
		int paramCount = param.length;
		String gridId,colIndex;
		int rowIndex;
		int idx;
		checkFrame();
		gridId = getGridObjReference( iIndex);
		if(gridId!=null){
			String[] output = web.document(e1Browser).executeJsFunction("getvisibleRowCount", gridId);

			int rowCount = 0;
			try{rowCount=Integer.parseInt(output[0]);}catch (NumberFormatException e) {
				warn("numberformat exception "+output[0]);
			}
			if(iRow>=0&&iRow > rowCount-1){     
				iRow=iRow+1;
				web.window(e1BrowserWindow).capturePage();
				beginStep("[setGridRowText] Failed: Setting Grid Row: "+ iRow + " and Grid only has " + rowCount +"row");{
					testFailure("Setting grid to row " +iRow + "and Grid only has "+rowCount +" row");
				}endStep();
				return;
			}
			rowIndex=getRowIndexForVisibleRow(gridId,iRow);
			for(idx=0;idx<paramCount;idx++){
				Pattern pat1 = Pattern.compile("[=]");
				String FieldVal[] = pat1.split(param[idx]);
				if(FieldVal.length==2){
					tempFld=FieldVal[0];
					tempVal=FieldVal[1];
					tempVal=tempVal.replaceAll("~", "=");
				} else if(FieldVal.length==3) {
					tempFld=FieldVal[0];
					tempVal=FieldVal[1]+"="+FieldVal[2];
				}else{
					tempFld=FieldVal[0];
					tempVal=null;
				}
				colIndex=getColIndexForColName(gridId,tempFld);
				//info("Col index= "+colIndex);
				if(colIndex!=null){
					String[] output1 = web.document(e1Browser).executeJsFunction("SetGridDatatAtRowCol", gridId,""+rowIndex,colIndex,tempVal);
					setErrorRecovery(WebErrorRecovery.ERR_OBJECT_NOT_FOUND_ERROR, ErrorRecoveryAction.Warn);
					web.textBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_text[@id='"+output1[0]+"']").click();
					web.textBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_text[@id='"+output1[0]+"']").setText(tempVal);
					web.textBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_text[@id='"+output1[0]+"']").fireEvent("onChange");
					syncFrame();
					setErrorRecovery(WebErrorRecovery.ERR_OBJECT_NOT_FOUND_ERROR, ErrorRecoveryAction.ReportErrorAndContinue);
					info("Column is identified for column name " + tempFld +" and entered value is: " +tempVal);
				} else {
					web.window(e1BrowserWindow).capturePage();
					beginStep("[setGridRowText] SetGridRow Failed: Grid column " +tempFld +"not exist");{
						testFailure("Grid column "+tempFld+" not exist");
					}endStep();
				}
			}
		} 
	}

	/************************************************************************************************************
	 * Function: selectAllCheckbox
	 * Description: This function will check the checkbox for selecting all the rows of a grid
	 * Created By: Sravan
	 * Date: Jan 2011
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param iIndex : index of the grid in the webpage starting from 0 
	 * Returns: 
	 * 		@return NA
	 * **********************************************************************************************************
	 */
	public void selectAllCheckbox(@Arg("iIndex") int iIndex) throws Exception {
		checkFrame();
		String gridId = getGridObjReference(iIndex);
		if(gridId!=null){
			String[] sChecked = web.document(e1Browser).executeJsFunction("setSelectAll", gridId);
			if(sChecked[0].equalsIgnoreCase("True")){
				info("Checked SelectAll checkbox");
			}else{
				web.window(e1BrowserWindow).capturePage();
				beginStep("[selectAllCheckbox] SetQBE Failed:  Checkbox not present for the grid",0);
				{
					testFailure("Checkbox not present for the grid");

				}
				endStep();
			}
		}
	}


	/************************************************************************************************************
	 * Function: getRowIndexForVisibleRow
	 * Description: This function will find the actual rowIndex for the specified visible row taking all hidden rows into account.
	 * Created By: Neha
	 * Date: January 2011
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param iIndex : ndex of the grid in the webpage starting from 0
	 * 		@param ivisibleRow : visible index for the row starts from 0
	 * Returns: 
	 * 		@return Actual rowIndex of the specified row
	 * **********************************************************************************************************
	 */
	public int getRowIndexForVisibleRow(String gridId, @Arg("(ivisibleRow)") int ivisibleRow) throws Exception {
		int iRowIndex=-1;

		if(gridId!=null) {			
			if (!bDB) {
				String[] output = web.document(e1Browser).executeJsFunction("getRowIndex", gridId,Integer.toString(ivisibleRow));
				iRowIndex=toInt(output[0]);
			}else{
				String[] output = web.document(sDBBrowser).executeJsFunction("getRowIndex", gridId,Integer.toString(ivisibleRow));
				iRowIndex=toInt(output[0]);
			}
		}
		//info("Visible row index is " + iRowIndex );
		return iRowIndex;
	}


	/************************************************************************************************************
	 * Function: getGridRowCountByIndex
	 * Description: This function will return the number of rows in the first grid on the webpage. Will not work for multiple grid webpages 
	 * Created By: Neha
	 * Date: January 2011
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param iIndex : index of the grid in the webpage starting from 0
	 * Returns: 
	 * 		@return Number of rows in the grid
	 * **********************************************************************************************************
	 */
	public int getGridRowCountByIndex(@Arg("iIndex") int iIndex) throws Exception { 
		String gridId;
		checkFrame();
		int rowCount=-1;
		gridId = getGridObjReference(iIndex);
		if(gridId!=null) {
			String[] output = web.document(	e1Browser).executeJsFunction("getvisibleRowCount", gridId);
			rowCount = Integer.parseInt(output[0]);
			info("Grid has " + rowCount+ " rows");
		}
		return rowCount;
	}
	/************************************************************************************************************
	 * Function: getGridRowCount
	 * Description: This function will return the number of rows in the first grid on the webpage. Will not work for multiple grid webpages 
	 * Created By: Neha
	 * Date: January 2011
	 * To be incorporated: Nil
	 * Returns: 
	 * 		@return Number of rows in the grid
	 * **********************************************************************************************************
	 */
	public int getGridRowCount() throws Exception { 
		String gridId;
		int rowCount=-1;
		if (!bDB) {
			checkFrame();
			gridId = getGridObjReference(0);
		} else {
			gridId = getDataBrowserGridObjReference();
		}
		if(gridId!=null) {
			if (!bDB) {
				String[] output = web.document(e1Browser).executeJsFunction("getvisibleRowCount", gridId);
				rowCount = Integer.parseInt(output[0]);
			}else{
				String[] output = web.document(sDBBrowser).executeJsFunction("getvisibleRowCount", gridId);
				rowCount = Integer.parseInt(output[0]);
			}			
			info("Grid has " + rowCount+ " rows");
		} 
		return rowCount;
	}


	/************************************************************************************************************
	 * Function: clickGridRowCol(iIndex,iRow,sFieldName)  
	 * Description: This function will click under the specified column of the specified row on the grid.
	 * Created By: Sravan
	 * Date: January 2011
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *              @param iIndex - index of the grid in the webpage starting from 0 
	 *              @param iRow - Visible row number starting from 0
	 *              @param sFieldName - column header of the cell to be clicked *              		
	 * Returns: Nil
	 * To Be incorporated:Nil
	 * **********************************************************************************************************
	 */
	public void clickGridRowCol(@Arg("iIndex") int iIndex,@Arg("iRow") int iRow, @Arg("sFieldName") String sFieldName)throws Exception {
		checkFrame();
		String gridId = getGridObjReference(iIndex);
		if(gridId!=null){
			int rCount=getGridRowCountByIndex(iIndex);
			if(iRow>(rCount-1)){ 
				web.window(e1BrowserWindow).capturePage();
				beginStep("[clickGridRowcol] Clicking grid row "+(iRow+1)+" Failed:  grid only has "+rCount+" rows");
				{
					testFailure("Clicking grid row "+(iRow+1)+" Failed:  grid only has "+rCount+" rows");
				}endStep();
				return;
			}			
			String colIndex=getColIndexForColName(gridId,sFieldName);
			if(colIndex!=null){
				int rowIndex=getRowIndexForVisibleRow(gridId,iRow);
				String[] gridCellId = web.document(e1Browser).executeJsFunction("clickGridAtRowCol", gridId,""+rowIndex,colIndex);
				//web.textBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_text[@id='"+gridCellId[0]+"']").fireEvent("onFocus");
				//web.textBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_text[@id='"+gridCellId[0]+"']").fireEvent("click");
				info("Identified cell under column " + sFieldName + "& clicked");
			}else{
				web.window(e1BrowserWindow).capturePage();
				beginStep("[clickGridRowcol] Cell identification Failed:  Failed to identify column "+ sFieldName);
				{
					testFailure("Failed to Identify Column " + sFieldName);
				}endStep();
			}
		}
	}

	/************************************************************************************************************
	 * Function: clickGridQBEVA  
	 * Description: This function will click on the visual assist in the specified QBE field.
	 * Created By: Prakruthi
	 * Date: January 2011
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *      @param iIndex : Index of the Grid,
	 *      @param sParam : grid  column header                       
	 * Returns: 
	 *          @return Nil
	 * **********************************************************************************************************
	 */
	public void clickGridQBEVA(@Arg("iIndex") int iIndex, @Arg("sParam")  String sColName) throws Exception {
		info("Starting:Function clickGridQBEVA ");
		checkFrame();
		String gridID = getGridObjReference(iIndex);
		String sColIndex = getColIndexForColName(gridID,sColName);
		if(sColIndex != null){
			//info("colIndex "+sColIndex);
			//String[] qbeFld = web.document(e1Browser).executeJsFunction("getQBEFld", gridID,sColIndex);
			String[] bDisabled = web.document(e1Browser).executeJsFunction("isQBEDisabled", gridID,sColIndex);
			//info("checking if disabled = "+bDisabled[0]);
			if(bDisabled[0].equalsIgnoreCase("true")){
				String tempFld =null;
				getLogger().error("Failure: QBE field for column " +sColName + " is Disabled");
				web.window(e1BrowserWindow).capturePage();
				beginStep("[clickGridQBEVA] Failed: QBE field for column " +sColName + " is Disabled");
				{
					testFailure("Failed: QBE field for column " +sColName + " is Disabled");

				}endStep();
			} else{
				//info("getting image id ");
				String[] qbeImg = web.document(e1Browser).executeJsFunction("getQBEImgID", gridID,sColIndex);
				//info("image id "+qbeFld[0]);
				if (web.exists("//web:img[@id='"+qbeImg[0]+"']",10)){
					info("inside if image exists. will click on visual assist");
					web.image("//web:img[@id='"+qbeImg[0]+"']").click();
					syncFrame();
					info("Passed: Grid 'Visual Assist (F2)' image found and clicked for column "+sColName);
					beginStep("[clickGridQBEVA]Passed: Grid 'Visual Assist (F2)' image found and clickedfor column "+sColName, 0);
					{
						getStepResult().isPassed();
					}endStep();
				}
			}
		} else{
			getLogger().error("Failure: Column " + sColName + " not present in grid");
			web.window(e1BrowserWindow).capturePage();
			beginStep("[clickGridQBEVA] Failed: In Column Identification");
			{
				testFailure("Failed: Column " + sColName + " not present in grid");

			}endStep();
		}
		info("Finished:Function clickGridQBEVA ");
	}

	/************************************************************************************************************
	 * Function: clickGridRowVACol  
	 * Description: This function will click under the specified column of the specified row on the grid & 
	 * 				then invoke the Visual Assist for that cell
	 * Created By: Prakruthi
	 * Date: March 2011
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *      @param iIndex : Iindex of the grid in the webpage starting from 0,
	 *      @param iRow : Visible row number starting from 0     
	 *      @param sColName - column header of the cell to be clicked                  
	 * Returns: 
	 *          @return Nil
	 * **********************************************************************************************************
	 */
	public void clickGridRowVACol(@Arg("iIndex") int iIndex,@Arg("iRow") int iRow, @Arg("sColName")  String sColName) throws Exception {
		info("Starting:Function ClickGridRowVACol ");
		checkFrame();
		String gridID = getGridObjReference(iIndex);
		if (gridID != null) {
			//Checking for valid rows
			String[] output = web.document(e1Browser).executeJsFunction("getvisibleRowCount", gridID);
			int iRowCount = Integer.parseInt(output[0]);
			if(iRow > iRowCount-1){
				getLogger().error("Failure[ClickGridRowVACol]: Clicking Grid Row: " + iRow+1 + "Grid only has " + iRowCount + " rows.");
				web.window(e1BrowserWindow).capturePage();
				beginStep("[ClickGridRowVACol] Failed: Clicking Grid Row: " + iRow+1 + "Grid only has " + iRowCount + " rows.");
				{
					testFailure("Failed: Clicking Grid Row: " + iRow+1 + "Grid only has " + iRowCount + " rows.");
				}endStep();
				return;
			}
			String sColIndex = getColIndexForColName(gridID,sColName);
			int oRoxIndex = getRowIndexForVisibleRow(gridID, iRow);
			if(sColIndex != null){
				info("colIndex "+sColIndex);
				String[] bDisabled = web.document(e1Browser).executeJsFunction("isGridCellDisabled", gridID,""+oRoxIndex,sColIndex);
				if(bDisabled[0].equals("true")){
					String tempFld =null;
					getLogger().error("Failure[ClickGridRowVACol]: QBE field for column " +sColName + " is Disabled");
					web.window(e1BrowserWindow).capturePage();
					beginStep("[ClickGridRowVACol] Failed: Grid cell field for column " +sColName + " is Disabled");
					{
						testFailure("Failed: Grid cell for column " +sColName + " is Disabled");

					}endStep();
				} else{

					//info("Row index = "+oRoxIndex+"\n getting image id ");
					clickGridRowCol(iIndex,iRow,sColName);
					//String[] qbeImgID = web.document(e1Browser).executeJsFunction("getGridCellImgID", gridID,oRoxIndex.toString(), sColIndex);
					info("pressing VisualAssist(F2)");
					Robot rob = new Robot();	
					rob.keyPress(KeyEvent.VK_F2);
					rob.delay(100);
					rob.keyRelease(KeyEvent.VK_F2); 
					rob = null;
					syncFrame();
				}
			} else{
				getLogger().error("Failure[ClickGridRowVACol]: Column " + sColName + " not present in grid");
				web.window(e1BrowserWindow).capturePage();
				beginStep("[ClickGridRowVACol] Failed: In Column Identification");
				{
					testFailure("Failed: Column " + sColName + " not present in grid");
				}endStep();
			}
		}
		info("Finished:Function ClickGridRowVACol ");
	}

	/************************************************************************************************************
	 * Function: validateGridQBEData  
	 * Description: This function will validate the grid QBE fields for specified data
	 * Created By: Varma
	 * Date: January 2011
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *      @param iIndex - index of the grid in the webpage starting from 0,
	 *      @param sParam - semicolon separated ColumnHeader=QBEValue pair             		
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void validateGridQBEData(@Arg("iIndex") int iIndex,@Arg("sParams") String sParams) throws Exception {
		String tempFld, tempVal, qbeId;
		String param[]=Pattern.compile("[;]").split(sParams);
		String gridId, colIndex;
		if (!bDB) {
			checkFrame();
			gridId = getGridObjReference(iIndex);
		} else {
			gridId = getDataBrowserGridObjReference();
		}
		if (gridId != null) { 
			for (int i = 0; i < param.length; i++) {
				String fieldVal[]=Pattern.compile("[=]").split(param[i]);
				if (fieldVal.length == 2) {
					tempFld = fieldVal[0];
					tempVal = fieldVal[1];
				} else {
					tempFld = fieldVal[0];
					tempVal = null;
				}
				colIndex = getColIndexForColName(gridId,tempFld);
				if(colIndex != null){
					if (!bDB) {
						String[] output = web.document(e1Browser).executeJsFunction("getQBECellVal", gridId,colIndex);
						qbeId = output[0];

						if(!qbeId.equals("")){
							if (fieldVal.length == 2){
								if((qbeId.startsWith("-")) || (qbeId.endsWith("-"))){
									if( (tempVal.startsWith("-"))||(tempVal.endsWith("-"))){
										tempVal=tempVal.replace("-", "");
										qbeId=qbeId.replace("-", "");
									}
								}
								try{
									double d1=Double.parseDouble(qbeId);
									double d2=Double.parseDouble(tempVal);
									qbeId=Double.toString(d1);
									tempVal=Double.toString(d2);
								}
								catch(NumberFormatException e){						  
								}
								if ((qbeId.trim()).equals(tempVal.trim())) {
									info("QBE Checkpoint: " + tempFld + " Passed ");
								}else{
									beginStep("QBE Checkpoint:  Failed Expected  value for column is " + tempVal+ " & Actual Value is " + qbeId);	
									{
										web.window(e1BrowserWindow).capturePage();
										testFailure("QBE Checkpoint:  Failed Expected  value for column is " + tempVal+ " & Actual Value is " + qbeId);	
									}endStep();
								}
							}else {
								beginStep("QBE Checkpoint:  Failed Expected  value for column " + tempFld+ "  is null & Actual Value is " + qbeId);	
								{
									web.window(e1BrowserWindow).capturePage();
									testFailure("QBE Checkpoint:  Failed Expected  value for column " + tempFld+ "  is null & Actual Value is " + qbeId);	
								}endStep();
							}
						}else{
							if (fieldVal.length == 2){
								beginStep("QBE Checkpoint:  Failed Expected  value for column is " + tempVal+ " & Actual Value is Null");	
								{
									web.window(e1BrowserWindow).capturePage();
									testFailure("QBE Checkpoint:  Failed Expected  value for column is " + tempVal+ " & Actual Value is Null");	
								}endStep();
							}else{
								info("QBE Checkpoint: " + tempFld + " Passed ");
							}
						}
					}else{
						String[] output = web.document(sDBBrowser).executeJsFunction("getQBECellVal", gridId.toString(),colIndex.toString());
						qbeId = output[0];

						if(!qbeId.equals("")){
							if (fieldVal.length == 2){
								if((qbeId.startsWith("-")) || (qbeId.endsWith("-"))){
									if( (tempVal.startsWith("-"))||(tempVal.endsWith("-"))){
										tempVal=tempVal.replace("-", "");
										qbeId=qbeId.replace("-", "");
									}
								}
								try{
									double d1=Double.parseDouble(qbeId);
									double d2=Double.parseDouble(tempVal);
									qbeId=Double.toString(d1);
									tempVal=Double.toString(d2);
								}
								catch(NumberFormatException e){						  
								}
								if ((qbeId.trim()).equals(tempVal.trim())) {
									info("QBE Checkpoint: " + tempFld + " Passed ");
								}else{
									beginStep("QBE Checkpoint:  Failed Expected  value for column is " + tempVal+ " & Actual Value is " + qbeId);	
									{
										web.window(e1BrowserWindow).capturePage();
										testFailure("QBE Checkpoint:  Failed Expected  value for column is " + tempVal+ " & Actual Value is " + qbeId);	
									}endStep();
								}
							}else {
								beginStep("QBE Checkpoint:  Failed Expected  value for column " + tempFld+ "  is null & Actual Value is " + qbeId);	
								{
									web.window(e1BrowserWindow).capturePage();
									testFailure("QBE Checkpoint:  Failed Expected  value for column " + tempFld+ "  is null & Actual Value is " + qbeId);	
								}endStep();
							}
						}else{
							if (fieldVal.length == 2){
								beginStep("QBE Checkpoint:  Failed Expected  value for column is " + tempVal+ " & Actual Value is Null");	
								{
									web.window(e1BrowserWindow).capturePage();
									testFailure("QBE Checkpoint:  Failed Expected  value for column is " + tempVal+ " & Actual Value is Null");	
								}endStep();
							}else{
								info("QBE Checkpoint: " + tempFld + " Passed ");
							}
						}
					}
				}

			}
		} 
		valCount=param.length+valCount;
		info("Finished function validateGridQBEData");
	}



	/************************************************************************************************************
	 * Function: setGridRowCheckBoxes
	 * Description: This function will check/uncheck the checkbox in specified column of a specified row in the grid. 
	 * Created By: Neha
	 * Date: January 2011
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param iIndex : index of the grid in the webpage starting from 0 
	 * 		@param iRow : visible row index of the specified row
	 * 		@param sParam : semicolon separated columnheader=value pairs
	 * Returns:
	 * 		@return Nil
	 * Example	: setGridRowCheckBoxes( 0,2,"Default=True;Inactive=False")
	 * **********************************************************************************************************
	 */
	public void setGridRowCheckBoxes(@Arg("iIndex") int iIndex,	@Arg("iRow") int iRow, @Arg("sParam") String sParam) throws Exception {
		info("Starting:Function setGridRowCheckBoxes");	
		String param[] = Pattern.compile("[;]").split(sParam);
		int rowIndex;
		String gridId,colIndex;
		checkFrame();
		gridId=getGridObjReference(iIndex);
		if(gridId!=null){
			String rowcount[]=web.document(e1Browser).executeJsFunction("getvisibleRowCount",gridId);
			int rowCount=Integer.parseInt(rowcount[0]);
			if(iRow>(rowCount-1)){
				beginStep("[setGridRowCheckBoxes] Setting Grid Row Checkbox failed: Grid only has " + rowCount+ " rows.");
				{
					web.window(e1BrowserWindow).capturePage();
					testFailure("Setting Grid Row checkBox failed: Grid only has " + rowCount+ " rows.");
				}endStep();
				return;
			}
			rowIndex=getRowIndexForVisibleRow(gridId, iRow);
			for(int idx=0;idx<(param.length);idx++){
				String fieldVal[] = Pattern.compile("[=]").split(param[idx]);
				String tempFld=fieldVal[0];
				String tempVle=fieldVal[1];
				boolean tempSta=Boolean.parseBoolean(tempVle); 
				colIndex=getColIndexForColName(gridId, tempFld);
				if(colIndex!=null){
					String cellVal[]=web.document(e1Browser).executeJsFunction("getGridCheckboxId",gridId,Integer.toString(rowIndex),colIndex);
					delay(3000);
					if(cellVal[1].equalsIgnoreCase("checkbox")){
						//DOMCheckbox chk=web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+cellVal[0]+"']");
						web.checkBox("//web:input_checkbox[@id='"+cellVal[0]+"']").focus();
						web.checkBox("//web:input_checkbox[@id='"+cellVal[0]+"']").check(tempSta);						
						beginStep("[setGridRowCheckBoxes] Passed: Indentified column "+tempFld+ " and set status of checkbox to "+tempVle);
						{
							getStepResult().isPassed();
						}endStep();
					}else{
						beginStep("[setGridRowCheckBoxes] failed: column "+tempFld+" is not a checkbox");
						{
							web.window(e1BrowserWindow).capturePage();
							testFailure("column "+tempFld+" is not a checkbox");
						}endStep();
					}							
				}else{
					beginStep("[setGridRowCheckBoxes] failed: Failed to identify column "+tempFld);
					{
						web.window(e1BrowserWindow).capturePage();
						testFailure("Failed to identify column "+tempFld);
					}endStep();
				}
			}
		}
		info("Finished: Function setGridRowCheckBoxes");
	}
	
	/************************************************************************************************************
     * Function: selectGridRowByIndex
     * Description: this function selects the specified row of the specified grid by selecting the Checkbox/radiobutton 
      * Created By: Yashin
     * Date: December 2016
     * To be incorporated: Nil
     * Returns:Nothing 
      * Example: selectGridRowByIndex(0,1)
     * **********************************************************************************************************
     */
     public void selectGridRowByIndex(int iIndex,int iRow)throws Exception
           {
           info("Starting function selectGridRowByIndex");
           checkFrame();
           String SelColIndex,SelectColIndex,colIndex;
           String gridId = getGridObjReference(iIndex);
           if(gridId!=null)
                 {
                 
                 String rCount[]=web.document(e1Browser).executeJsFunction("getvisibleRowCount", gridId);
                 
                 int rowCount=Integer.parseInt(rCount[0]);
                 int rowIndex=getRowIndexForVisibleRow(gridId, iRow);
                 info("rowindex"+rowIndex);
                 String colObj[]=null;
                 String sStatus;
                 if((iRow>=0) && (iRow<rowCount))
                       {
                       
                       web.document(e1Browser).executeJsFunction("ScrollToExtremeLeft",gridId);
               Thread.sleep(5000);
                       for(int x=0;x<100;x++)
                 {
                 String[] checkBoxView=web.document(e1Browser).executeJsFunction("scrollCheckBoxIntoView", gridId,""+rowIndex,""+x);
                 if(checkBoxView[0].equalsIgnoreCase("true"))
                       break;
                 else if(checkBoxView[0].equalsIgnoreCase("false"))
                       {
                       Thread.sleep(1000);
                       continue;
                       }
                 else
                       break;
                 }
                       for(int cnt=0;cnt<10;cnt++)
                             {
                             try
                                   {
                                   colObj=web.document(e1Browser).executeJsFunction("setRowSelector", gridId.toString(),""+rowIndex);
                                   }catch(Exception e){info("exception caught"+e.getStackTrace());};
                             if((colObj[0]!=null)&&((colObj[0].length()!=0)))
                                   {
                                   info("0:"+colObj[0]+", 1:"+colObj[1]);
                                   break;
                                   }
                             else
                                   info("colobj null");
                             }
                       if((colObj[1]!=null)&&((colObj[1]).equalsIgnoreCase("radio")))
                             {
                    	   info("radio");
                             sStatus=web.radioButton(e1Browser+"/web:form[@id='E1PaneForm']/web:input_radio[@id='"+colObj[0]+"']").getAttribute("checked");
                             if(sStatus.equalsIgnoreCase("false"))
                                   {
                            	 web.radioButton(e1Browser+"/web:form[@id='E1PaneForm']/web:input_radio[@id='"+colObj[0]+"']").focus();
                                   web.radioButton(e1Browser+"/web:form[@id='E1PaneForm']/web:input_radio[@id='"+colObj[0]+"']").click();
                                   //web.radioButton(e1Browser+"/web:form[@id='E1PaneForm']/web:input_radio[@id='"+colObj[0]+"']").fireEvent("onClick");
                                   Thread.sleep(1000);
                                   info( "Row found & Clicked the selector radio button for row "+ (rowIndex+1) );
                                   }
                             else
                                   info("Row "+ (rowIndex+1)+" is selected");
                       }else if((colObj[1]!=null)&&((colObj[1]).equalsIgnoreCase("checkbox")))
                             {
                             if(!web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+colObj[0]+"']").exists())
                                   web.document(e1Browser).executeJsFunction("ScrollToExtremeLeft", gridId.toString());
                             sStatus=web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+colObj[0]+"']").getAttribute("checked");
                             if(sStatus.equalsIgnoreCase("false"))
                                   {
                                   web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+colObj[0]+"']").focus();
                                   web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+colObj[0]+"']").click();
                                   info( "Row found & Clicked the selector radio button for row "+ (rowIndex+1) );
                                   }
                             else
                                   info("Row "+ (rowIndex+1)+" is already selected");

                             }
                       }
                 else
                       {
                       testFailure("selectGridRowByIndex failed:Invalid Row Index.Grid has only "+rowCount+" rows.");
                       CapturePage();
                       }
                 }
           else
                 {
                 testFailure("selectGridRowByIndex failed:Grid not found");
                 CapturePage();
                 }
           }
     /************************************************************************************************************
      * Function: deSelectGridRowByIndex
      * Description: this function deselects the specified row of the specified grid by selecting the Checkbox/radiobutton 
       * Created By: Yashin
      * Date: December 2016
      * To be incorporated: Nil
      * Returns:Nothing 
       * Example: deSelectGridRowByIndex(0,1)
      * **********************************************************************************************************
      */
      public void deSelectGridRowByIndex(int iIndex,int iRow)throws Exception
      {
            info("Starting function deSelectGridRowByIndex");
            checkFrame();
            String SelColIndex,SelectColIndex,colIndex;
            String gridId = getGridObjReference(iIndex);
            if(gridId!=null)
                  {
                  
                  String rCount[]=web.document(e1Browser).executeJsFunction("getvisibleRowCount", gridId);
                  
                  int rowCount=Integer.parseInt(rCount[0]);
                  int rowIndex=getRowIndexForVisibleRow(gridId, iRow);
                  
                  String colObj[]=null;
                  String sStatus;
                  if((iRow>=0) && (iRow<rowCount))
                        {
                        web.document(e1Browser).executeJsFunction("ScrollToExtremeLeft",gridId);
                Thread.sleep(5000);
                        for(int x=0;x<100;x++)
                  {
                  String[] checkBoxView=web.document(e1Browser).executeJsFunction("scrollCheckBoxIntoView", gridId,""+rowIndex,""+x);
                  if(checkBoxView[0].equalsIgnoreCase("true"))
                        break;
                  else if(checkBoxView[0].equalsIgnoreCase("false"))
                        {
                        Thread.sleep(1000);
                        continue;
                        }
                  else
                        break;
                  }
                        for(int cnt=0;cnt<10;cnt++)
                              {
                              try
                                    {
                                    colObj=web.document(e1Browser).executeJsFunction("setRowSelector", gridId.toString(),""+rowIndex);
                                    }catch(Exception e){info("exception caught"+e);};
                              if((colObj[0]!=null)&&((colObj[0].length()!=0)))
                                    {
                                    info("0:"+colObj[0]+", 1:"+colObj[1]);
                                    break;
                                    }
                              else
                                    info("colobj null");
                              }
                        if((colObj[1]!=null)&&((colObj[1]).equalsIgnoreCase("radio")))
                              {
                              sStatus=web.radioButton(e1Browser+"/web:form[@id='E1PaneForm']/web:input_radio[@id='"+colObj[0]+"']").getAttribute("checked");
                              if(sStatus.equalsIgnoreCase("true"))
                                    {
                                    web.radioButton(e1Browser+"/web:form[@id='E1PaneForm']/web:input_radio[@id='"+colObj[0]+"']").click();
                                    web.radioButton(e1Browser+"/web:form[@id='E1PaneForm']/web:input_radio[@id='"+colObj[0]+"']").fireEvent("onClick");
                                    Thread.sleep(1000);
                                    info( "Row found & unchecked the selector radio button for row "+ (rowIndex+1) );
                                    }
                              else
                                    info("Row "+ (rowIndex+1)+" is already unselected");
                        }else if((colObj[1]!=null)&&((colObj[1]).equalsIgnoreCase("checkbox")))
                              {
                              if(!web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+colObj[0]+"']").exists())
                                    web.document(e1Browser).executeJsFunction("ScrollToExtremeLeft", gridId.toString());
                              sStatus=web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+colObj[0]+"']").getAttribute("checked");
                              if(sStatus.equalsIgnoreCase("true"))
                                    {
                                    web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+colObj[0]+"']").focus();
                                    web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+colObj[0]+"']").click();
                                    info( "Row found & unchecked the selector radio button for row "+ (rowIndex+1) );
                                    }
                              else
                                    info("Row "+ (rowIndex+1)+" is already unselected");

                              }
                        }
                  else
                        {
                        testFailure("deSelectGridRowByIndex failed:Invalid Row Index.Grid has only "+rowCount+" rows");
                        CapturePage();
                        }
                  }
            else
                  {
                  testFailure("deSelectGridRowByIndex failed:Grid not found");
                  CapturePage();
                  }
            }

	/************************************************************************************************************
	 * Function: selectDeselectByRowNo
	 * Description: this function selects/deselects the specified row of the specified grid by selecting the Checkbox/radiobutton 
	 * Created By: Sravan
	 * Modified By: Yashin
	 * Date: Febraury 2011
	 * To be incorporated: Nil
	 * Returns:Nothing 
	 * Example: SelectDeselectByRowNo 0, 4
	 * **********************************************************************************************************
	 */
	public void selectDeselectByRowNo(@Arg("iIndex") int iIndex,@Arg("iRow") int iRow) throws Exception {
		checkFrame();
		String SelColIndex,SelectColIndex,colIndex;
		String gridId = getGridObjReference(iIndex);
		int rowCount=Integer.parseInt((web.document(e1Browser).executeJsFunction("getvisibleRowCount", gridId))[0]);
		int rowIndex=getRowIndexForVisibleRow(gridId, iRow);
		if((iRow>=0) && (iRow<rowCount)){
			for(int x=0;x<100;x++)
			{
				String[] checkBoxView=web.document(e1Browser).executeJsFunction("scrollCheckBoxIntoView", gridId,""+rowIndex,""+x);
				if(checkBoxView[0].equalsIgnoreCase("true"))
					break;
				else if(checkBoxView[0].equalsIgnoreCase("false"))
				{
					Thread.sleep(1000);
					continue;
				}
				else
					break;
			}

			SelColIndex=getColIndexForColName(gridId, "Sel");
			SelectColIndex=getColIndexForColName(gridId, "Select");
			if(SelectColIndex!=null||SelColIndex!=null){
				if(SelectColIndex!=null){
					colIndex=SelectColIndex;
					if((iRow>=0) && (iRow<rowCount)){

						String cellVal[] = {null,null};
						setErrorRecovery(BasicErrorRecovery.ERR_GENERIC_ERROR_CODE, ErrorRecoveryAction.Ignore);
						try{
							cellVal=web.document(e1Browser).executeJsFunction("getGridCheckboxId",gridId,Integer.toString(rowIndex),colIndex);
						}catch(Exception e){CapturePage();};
						setErrorRecovery(BasicErrorRecovery.ERR_GENERIC_ERROR_CODE, ErrorRecoveryAction.ReportErrorAndContinue);
						if((cellVal[1]!=null)&&(cellVal[1].equalsIgnoreCase("checkbox"))){
							String status=cellVal[2];//=web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+cellVal[0]+"']").getAttribute("Status");
							delay(3000);
							//chk=web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+cellVal[0]+"']");
							if((status.trim()).equalsIgnoreCase("true")){
								web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+cellVal[0]+"']").check(false);
								Thread.sleep(1000);
								//web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+cellVal[0]+"']").check(false);
								info("Rowselector checkbox for row "+((Integer)rowIndex+1)+" found and set to false");
							}else{

								web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+cellVal[0]+"']").check(true);
								Thread.sleep(1000);
								//web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+cellVal[0]+"']").check(true);
								info("Rowselector checkbox for row "+((Integer)rowIndex+1)+" found and set to true");
							}
						}else{
							beginStep("[selectDeselectByRowNo] failed: column 'Select' is not a checkbox");
							{
								web.window(e1BrowserWindow).capturePage();
								selectDeselectRowNormal(gridId,rowIndex);
								//								reportFailure("column 'Select' is not a checkbox");
							}endStep();
						}
					}else{
						web.window(e1BrowserWindow).capturePage();						
						testFailure("[selectDeselectByRowNo] row identification Failed: Grid with index "+iIndex+" only has " + rowCount + " rows, thus can not select/deselect row : " + (iRow+1));
					}
				}
				else if(SelColIndex!=null){
					colIndex=SelColIndex;					
					if((iRow>=0) && (iRow<rowCount)){

						String cellVal[] = {null,null};
						setErrorRecovery(BasicErrorRecovery.ERR_GENERIC_ERROR_CODE, ErrorRecoveryAction.Ignore);
						try{
							cellVal=web.document(e1Browser).executeJsFunction("getGridCheckboxId",gridId,Integer.toString(rowIndex),colIndex);
							//info("cellVal: " + cellVal[0] + ", " + cellVal[1] + ", " + cellVal[2]);
						}catch(Exception e){CapturePage();};
						setErrorRecovery(BasicErrorRecovery.ERR_GENERIC_ERROR_CODE, ErrorRecoveryAction.ReportErrorAndContinue);
						if((cellVal[1]!=null)&&(cellVal[1].equalsIgnoreCase("checkbox"))){
							String status=cellVal[2];
							delay(3000);
							//chk=web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+cellVal[0]+"']");
							if((status.trim()).equalsIgnoreCase("true")){								
								web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+cellVal[0]+"']").check(false);
								Thread.sleep(1000);
								web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+cellVal[0]+"']").check(false);
								info("Rowselector checkbox for row "+((Integer)rowIndex+1)+" found and set to false");
							}else{

								web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+cellVal[0]+"']").check(true);
								Thread.sleep(1000);
								web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+cellVal[0]+"']").check(true);
								info("Rowselector checkbox for row "+((Integer)rowIndex+1)+" found and set to true");
							}

						}else{
							beginStep("[selectDeselectByRowNo] failed: column 'Sel' is not a checkbox in Grid  with index "+iIndex );
							{
								web.window(e1BrowserWindow).capturePage();
								selectDeselectRowNormal(gridId,rowIndex);
								//								reportFailure("column 'Sel' is not a checkbox");
							}endStep();
						}
					}else{
						web.window(e1BrowserWindow).capturePage();						
						testFailure("[selectDeselectByRowNo] row identification Failed: Grid  with index "+iIndex+" only has " + rowCount + " rows, thus can not select/deselect row : " + (iRow+1));
					}			
				}
			}else {			
				selectDeselectRowNormal(gridId,rowIndex);
			}
		}else{
			web.window(e1BrowserWindow).capturePage();			
			testFailure("[selectDeselectByRowNo] row identification Failed: Grid  with index "+iIndex+" only has " + rowCount + " rows, thus can not select/deselect row : " + (iRow+1));
		}
	}



	/************************************************************************************************************
	 * Function: selectDeselectRowNormal
	 * Description: this function selects/deselects the specified row of the specified grid by selecting the Checkbox/radiobutton 
	 * Created By: Praneetha
	 * Date: January 2012
	 * To be incorporated: Nil
	 * Returns:Nothing 
	 * Example: selectDeselectRowNormal gridId, rowIndex
	 * **********************************************************************************************************
	 */
	private void selectDeselectRowNormal(@Arg("gridId") String gridId,@Arg("rowIndex") int rowIndex)throws Exception{
		//setRowSelector JS function highlights rowselector cell and returns an array where 1st element of array is rowselector id and 2nd element is type of row selector (radio/checkbox)
		String colObj[] = {null,null};
		String chStatus;
		boolean chS;
		setErrorRecovery(BasicErrorRecovery.ERR_GENERIC_ERROR_CODE, ErrorRecoveryAction.Ignore);
		for(int cnt=0;cnt<10;cnt++){
			try{
				colObj=web.document(e1Browser).executeJsFunction("setRowSelector", gridId.toString(),""+rowIndex);
			}catch(Exception e){};
			if((colObj[0]!=null)&&((colObj[0].length()!=0))){
				break;
			}
		}
		if((colObj[1]!=null)&&((colObj[1]).equalsIgnoreCase("radio"))){
			//DOMRadioButton r=web.radioButton(e1Browser+"/web:form[@id='E1PaneForm']/web:input_radio[@id='"+colObj[0]+"']");
			web.radioButton(e1Browser+"/web:form[@id='E1PaneForm']/web:input_radio[@id='"+colObj[0]+"']").click();
			web.radioButton(e1Browser+"/web:form[@id='E1PaneForm']/web:input_radio[@id='"+colObj[0]+"']").fireEvent("onClick");
			Thread.sleep(1000);
			info( "Row found & Clicked the selector radio button for row "+ (rowIndex+1) );
		}else if((colObj[1]!=null)&&((colObj[1]).equalsIgnoreCase("checkbox"))){
			//DOMCheckbox chk=web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+colObj[0]+"']");
			web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+colObj[0]+"']").focus();
			web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+colObj[0]+"']").click();
			if(!web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+colObj[0]+"']").exists()){
				web.document(e1Browser).executeJsFunction("ScrollToExtremeLeft", gridId.toString());
			}
			//fireEvent("onClick");
			chStatus=web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+colObj[0]+"']").getAttribute("checked");//new

			if(chStatus.toLowerCase().equals("true")){				
				info("Checkbox is selected");
			}else{
				web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+colObj[0]+"']").fireEvent("onClick");
			}			

			Thread.sleep(3000);
			info( "Row found & Clicked the selector checkbox for row "+ (rowIndex+1) );
		}else{
			web.window(e1BrowserWindow).capturePage();
			beginStep("[selectDeselectByRowNo] row identification Failed: can not select/deselect row: " + (rowIndex+1) +" in Grid");
			{
				testFailure("unable to find row selector for row: " + (rowIndex+1));
			}endStep();
		}
	}
	/************************************************************************************************************
	 * Function: validateGridRowWebEdits
	 * Description: this function selects/deselects the specified row of the specified grid by selecting the Checkbox/radiobutton 
	 * Created By: Neha
	 * Date: Febraury 2011
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param iIndex : index of the grid in the webpage starting from 0
	 * 		@param iRow : visible row index starting from 0
	 * 		@param sParam : semicolon separated ColumnHeader=Value pairs
	 * Returns:Nothing 
	 * Example: ValidateGridRowWebEdits 0, 4,"Order=123;Item=MFG100"
	 * **********************************************************************************************************
	 */
	public void validateGridRowWebEdits(@Arg("iIndex") int iIndex, @Arg("iRow") int iRow,  @Arg("sParam") String sParam) throws Exception {
		String tempFld,tempVal;
		Pattern pat = Pattern.compile("[;]");
		String param[] = pat.split(sParam);
		int paramCount = param.length;
		int idx;
		checkFrame();
		String gridId = getGridObjReference(iIndex);
		if(gridId!=null) {   
			String[] output = web.document(	e1Browser).executeJsFunction("getvisibleRowCount", gridId);
			int rowCount = Integer.parseInt(output[0]);
			if(iRow > rowCount){
				iRow=iRow+1;
				web.window(e1BrowserWindow).capturePage();
				beginStep("[validateGridRowWebEdits] Failed: Validating Grid Row "+ iRow + " and Grid only has " + rowCount +" row");
				{	
					testFailure("Validating grid to row " +iRow + "and Grid only has "+rowCount +"  row");
				}endStep();
				return;
			}
			int rowIndex=getRowIndexForVisibleRow(gridId,iRow);
			for(idx=0;idx<paramCount;idx++) {	
				Pattern pat1 = Pattern.compile("[=]");
				String FieldVal[] = pat1.split(param[idx]);
				if(FieldVal.length==2) {
					tempFld=FieldVal[0];
					tempVal=FieldVal[1];
				} else {
					tempFld=FieldVal[0];
					tempVal="";
				}
				String colIndex=getColIndexForColName(gridId,tempFld);
				if(colIndex!=null) {
					String[] output1 = web.document(e1Browser).executeJsFunction("getGridRowWebEditsValue", gridId.toString(),Integer.toString(rowIndex),colIndex);
					//info(output1[0]);
					if(output1[0]==null){
						output1[0]="";
					}
					if((output1[0].startsWith("-")) || (output1[0].endsWith("-"))){
						if( (tempVal.startsWith("-"))||(tempVal.endsWith("-"))){
							tempVal=tempVal.replace("-", "");
							output1[0]=output1[0].replace("-", "");
						}
					}
					try{
						double d1=Double.parseDouble(tempVal);
						double d2=Double.parseDouble(output1[0]);
						tempVal=Double.toString(d1);
						output1[0]=Double.toString(d2);
					}
					catch(NumberFormatException e){						  
					}
					if(tempVal.trim().equals(output1[0].trim()))
						info(tempFld+ " Column Field Passed " );
					else{
						web.window(e1BrowserWindow).capturePage();
						beginStep("[validateGridRowWebEdits]" +tempFld+ " Field Expected value is " +tempVal+ " and Actual value is " +output1[0] );
						{	
							testFailure(tempFld+ " Field Expected value is " +tempVal+ " and Actual value is " +output1[0]);
						} endStep();
					}
				} else {
					web.window(e1BrowserWindow).capturePage();
					beginStep("[setGridRowCheckBoxes] Failed to identify Column " +tempFld);
					{	
						testFailure("Failed to identify Column "+tempFld);
					}endStep();
				}
			}
		}
		valCount=valCount+paramCount;
	}

	/************************************************************************************************************
	 * Function: highlightGridRow  
	 * Description: This function will highlight the row based on the search criterion of one column (Highlight refers to selecting the checkbox or radio button)
	 * Created By: Sravan
	 * Date: March 2011
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *      @param iIndex - index of the grid in the webpage starting from 0,
	 *      @param sFieldName -  column header of the cell
	 *      @param sValue - value to be searched under column header sFieldName                                
	 * Returns: 
	 *      @return Nil
	 * **********************************************************************************************************
	 *//*
	public void highlightGridRow(@Arg("iIndex") int iIndex,	@Arg("sFieldName") String sFieldName,@Arg("sValue") String sValue) throws Exception {		
		String gridId, colIndex;
		checkFrame();
		int rowIndex, rowCount, rowToSelect, idx;

		String SelColIndex,SelectColIndex;

		gridId = getGridObjReference(iIndex);

		if (gridId != null) {
			rowToSelect = -1;
			colIndex = getColIndexForColName(gridId, sFieldName);
			if (colIndex != null) {						
				rowCount = getGridRowCountByIndex(iIndex);
				for (idx = 0; idx < rowCount; idx++) {
					rowIndex = getRowIndexForVisibleRow(gridId, idx);
					String[] output1 = web.document(e1Browser).executeJsFunction("getGridRowValueAtCol",gridId, Integer.toString(rowIndex),colIndex);
					if((output1[0].startsWith("-")) || (output1[0].endsWith("-"))){
						if( (sValue.startsWith("-"))||(sValue.endsWith("-"))){
							sValue=sValue.replace("-", "");
							output1[0]=output1[0].replace("-", "");
						}
					}
					try{
						double d1=Double.parseDouble(sValue);
						double d2=Double.parseDouble(output1[0]);
						sValue=Double.toString(d1);
						output1[0]=Double.toString(d2);
					}
					catch(NumberFormatException e){
						//e.printStackTrace();
					}
					if (output1[0].trim().equals(sValue)) {
						rowToSelect = rowIndex;
						output1 = web.document(e1Browser).executeJsFunction("getVisisbleRowIndex",gridId, Integer.toString(rowToSelect));
						if(output1[0]!=null&&(output1[0].length()!=0)){
							rowToSelect=Integer.parseInt(output1[0]);
						}
						break;
					}
				}
				if(rowToSelect==-1){
					web.window(e1BrowserWindow).capturePage();
					beginStep("[highlightGridRow] Row Identification Failed: No row found with " + sFieldName + "=" + sValue);
					{
						testFailure("No row found with " + sFieldName + "=" + sValue);
					} endStep();
				}else{

					SelColIndex=getColIndexForColName(gridId, "Sel");
					SelectColIndex=getColIndexForColName(gridId, "Select");

					if(SelectColIndex!=null||SelColIndex!=null){
						if(SelectColIndex!=null){
							colIndex=SelectColIndex;
							if((rowToSelect>=0) && (rowToSelect<rowCount)){
								rowToSelect=getRowIndexForVisibleRow(gridId, rowToSelect);
								String cellVal[] = {null,null};
								setErrorRecovery(BasicErrorRecovery.ERR_GENERIC_ERROR_CODE, ErrorRecoveryAction.Ignore);
								try{
									cellVal=web.document(e1Browser).executeJsFunction("getGridCheckboxId",gridId,Integer.toString(rowToSelect),colIndex);
									delay(3000);
								}catch(Exception e){};


								setErrorRecovery(BasicErrorRecovery.ERR_GENERIC_ERROR_CODE, ErrorRecoveryAction.ReportErrorAndContinue);
								if((cellVal[1]!=null)&&((cellVal[1]).equalsIgnoreCase("checkbox"))){
									//DOMCheckbox chk=web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+cellVal[0]+"']");
									web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+cellVal[0]+"']").focus();
									web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+cellVal[0]+"']").check(true);
									info("Rowselector found and selected for row no "+( (Integer)rowToSelect+1));
								}else{
									beginStep("[highlightGridRow] : column 'Select' is not a checkbox");
									{
										web.window(e1BrowserWindow).capturePage();
										highlightGridRowNormal(gridId,iIndex, rowToSelect);
									}endStep();
								}
							}else{
								beginStep("[highlightGridRow] row identification Failed: Grid only has " + rowCount + " rows, thus can not select/deselect row : " + ( (Integer)rowToSelect+1));
								{
									web.window(e1BrowserWindow).capturePage();
									testFailure("Grid only has " + rowCount + " rows, thus can not select/deselect row : " + ( (Integer)rowToSelect+1));
								}endStep();
							}
						}
						else if(SelColIndex!=null){
							colIndex=SelColIndex;
							if((rowToSelect>=0) && (rowToSelect<rowCount)){
								rowToSelect=getRowIndexForVisibleRow(gridId, rowToSelect);
								String cellVal[] = {null,null};
								setErrorRecovery(BasicErrorRecovery.ERR_GENERIC_ERROR_CODE, ErrorRecoveryAction.Ignore);
								try{
									cellVal=web.document(e1Browser).executeJsFunction("getGridCheckboxId",gridId,Integer.toString(rowToSelect),colIndex);
								}catch(Exception e){};


								setErrorRecovery(BasicErrorRecovery.ERR_GENERIC_ERROR_CODE, ErrorRecoveryAction.ReportErrorAndContinue);
								if((cellVal[1]!=null)&&((cellVal[1]).equalsIgnoreCase("checkbox"))){
									//DOMCheckbox chk=web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+cellVal[0]+"']");
									web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+cellVal[0]+"']").focus();
									web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+cellVal[0]+"']").check(true);
									info("Rowselector found and selected for row no "+( (Integer)rowToSelect+1));
								}else{
									beginStep("[highlightGridRow] : column 'Select' is not a checkbox");
									{
										web.window(e1BrowserWindow).capturePage();
										highlightGridRowNormal(gridId,iIndex, rowToSelect);
									}endStep();
								}
							}
						}			
					}

					else{
						highlightGridRowNormal(gridId,iIndex, rowToSelect);
					}
				}
			}
		}
	}
	  */
	/************************************************************************************************************
	 * Function: highlightGridRow  
	 * Description: This function will highlight the row based on the search criterion of one column (Highlight refers to selecting the checkbox or radio button)
	 * Created By: Sravan
	 * Modified By:YASHIN
	 * Date: June 2016
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *      @param iIndex - index of the grid in the webpage starting from 0,
	 *      @param sFieldName -  column header of the cell
	 *      @param sValue - value to be searched under column header sFieldName                                
	 * Returns: 
	 *      @return Nil
	 * **********************************************************************************************************
	 */
	public void highlightGridRow(@Arg("iIndex") int iIndex,     @Arg("sFieldName") String sFieldName,@Arg("sValue") String sValue) throws Exception {       

		String sFieldNames=sFieldName+"="+sValue;
		info(sFieldNames);
		highlightGridRow(iIndex,sFieldNames);
	}

	/************************************************************************************************************
	 * Function: highlightGridRow  
	 * Description: This function will highlight the row based on the search criterion of multiple columns (Highlight refers to selecting the checkbox or radio button)
	 * Created By: Sravan
	 * Modified By:Yashin Bidar
	 * Date: June 2016
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *      @param iIndex - index of the grid in the webpage starting from 0,
	 *      @param sFieldName -  Semicolon separated column value pairs 
	 *      highlightGridRow(0,"Column1=Value1;Column2=Value2.....ColumnN=ValueN");
	 *                                     
	 * Returns: 
	 *      @return Nil
	 * **********************************************************************************************************
	 */
	public void highlightGridRow(@Arg("iIndex") int iIndex,     @Arg("sFieldNames") String sFieldNames) throws Exception {           
		String gridId, colIndex;
		checkFrame();
		int rowIndex, rowCount, rowToSelect, idx,numOfCols,counter=0;

		String colValPairs[]=sFieldNames.split(";");
		String output1[];
		numOfCols=colValPairs.length;
		info("No: of columns : "+numOfCols);
		String SelColIndex,SelectColIndex,sValue;

		gridId = getGridObjReference(iIndex);

		if (gridId != null) {
			rowToSelect = -1;                         
			rowCount = getGridRowCountByIndex(iIndex);
			for (idx = 0; idx < rowCount; idx++) {
				
				rowIndex = getRowIndexForVisibleRow(gridId, idx);
				for(int i=0;i<numOfCols;i++)
				{
					colIndex = getColIndexForColName(gridId, colValPairs[i].split("=")[0]);
					if(colIndex !=null)
					{
						output1 = web.document(e1Browser).executeJsFunction("getGridRowValueAtCol",gridId, Integer.toString(rowIndex),colIndex);

						if(colValPairs[i].endsWith("="))
							sValue="";
						else
							sValue=colValPairs[i].split("=")[1];
						if((output1[0].startsWith("-")) || (output1[0].endsWith("-")))
						{
							if( (sValue.startsWith("-"))||(sValue.endsWith("-")))
							{
								sValue=sValue.replace("-", "");
								output1[0]=output1[0].replace("-", "");
							}
						}
						try{
							double d1=Double.parseDouble(sValue);
							double d2=Double.parseDouble(output1[0]);
							sValue=Double.toString(d1);
							output1[0]=Double.toString(d2);
						}
						catch(NumberFormatException e)
						{
							//e.printStackTrace();
						}
						if (output1[0].trim().equals(sValue)) 
						{
							counter+=1;
						}
					}
					else{info("colindex is null");}

				}

				if(counter==numOfCols&&counter!=0)
				{
					rowToSelect = rowIndex;
					
					output1 = web.document(e1Browser).executeJsFunction("getVisisbleRowIndex",gridId, Integer.toString(rowToSelect));
					if(output1[0]!=null&&(output1[0].length()!=0))
					{
						isGridRowIntoView = scrollGridRowIntoView(gridId,rowToSelect);
						rowToSelect=Integer.parseInt(output1[0]);
					}
					break;
				}
				else
				{if(counter!=numOfCols)//resetting counter after each row
					counter=0;}
			}
			if(rowToSelect==-1){
				web.window(e1BrowserWindow).capturePage();				
				testFailure("[highlightGridRow] Row Identification Failed: No row found with the given combination of column value pairs");
			}else{

				SelColIndex=getColIndexForColName(gridId, "Sel");
				SelectColIndex=getColIndexForColName(gridId, "Select");

				if(SelectColIndex!=null||SelColIndex!=null){
					if(SelectColIndex!=null){
						colIndex=SelectColIndex;
						if((rowToSelect>=0) && (rowToSelect<rowCount)){
							rowToSelect=getRowIndexForVisibleRow(gridId, rowToSelect);
							String cellVal[] = {null,null};
							setErrorRecovery(BasicErrorRecovery.ERR_GENERIC_ERROR_CODE, ErrorRecoveryAction.Ignore);
							try{
								cellVal=web.document(e1Browser).executeJsFunction("getGridCheckboxId",gridId,Integer.toString(rowToSelect),colIndex);
								delay(3000);
							}catch(Exception e){};


							setErrorRecovery(BasicErrorRecovery.ERR_GENERIC_ERROR_CODE, ErrorRecoveryAction.ReportErrorAndContinue);
							if((cellVal[1]!=null)&&((cellVal[1]).equalsIgnoreCase("checkbox"))){
								//DOMCheckbox chk=web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+cellVal[0]+"']");
								web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+cellVal[0]+"']").focus();
								web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+cellVal[0]+"']").check(true);
								info("Rowselector found and selected for row no "+( (Integer)rowToSelect+1));
							}else{
								beginStep("[highlightGridRow] : column 'Select' is not a checkbox");
								{
									web.window(e1BrowserWindow).capturePage();
									highlightGridRowNormal(gridId,iIndex, rowToSelect);
								}endStep();
							}
						}else{
							
							testFailure("[highlightGridRow] row identification Failed: Grid only has " + rowCount + " rows, thus can not select/deselect row : " + ( (Integer)rowToSelect+1));
						}
					}
					else if(SelColIndex!=null){
						colIndex=SelColIndex;
						if((rowToSelect>=0) && (rowToSelect<rowCount)){
							rowToSelect=getRowIndexForVisibleRow(gridId, rowToSelect);
							String cellVal[] = {null,null};
							setErrorRecovery(BasicErrorRecovery.ERR_GENERIC_ERROR_CODE, ErrorRecoveryAction.Ignore);
							try{
								cellVal=web.document(e1Browser).executeJsFunction("getGridCheckboxId",gridId,Integer.toString(rowToSelect),colIndex);
							}catch(Exception e){};


							setErrorRecovery(BasicErrorRecovery.ERR_GENERIC_ERROR_CODE, ErrorRecoveryAction.ReportErrorAndContinue);
							if((cellVal[1]!=null)&&((cellVal[1]).equalsIgnoreCase("checkbox"))){
								//DOMCheckbox chk=web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+cellVal[0]+"']");
								web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+cellVal[0]+"']").focus();
								web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+cellVal[0]+"']").check(true);
								info("Rowselector found and selected for row no "+( (Integer)rowToSelect+1));
							}else{
								beginStep("[highlightGridRow] : column 'Select' is not a checkbox");
								{
									web.window(e1BrowserWindow).capturePage();
									highlightGridRowNormal(gridId,iIndex, rowToSelect);
								}endStep();
							}
						}
					}                 
				}

				else{
					highlightGridRowNormal(gridId,iIndex, rowToSelect);
				}
			}
			//}
		}
	}

	/************************************************************************************************************
	 * Function: highlightGridRowNormal  
	 * Description: This function will highlight the row based on the search criterion of one column (Highlight refers to selecting the checkbox or radio button)
	 * Created By: Praneetha
	 * Date: January 2012
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *      @param iIndex - index of the grid in the webpage starting from 0,
	 *      @param gridID - ID of the grid
	 *      @param rowToSelect - Row Index to select                                
	 * Returns: 
	 *      @return Nil
	 * **********************************************************************************************************
	 */
	private void highlightGridRowNormal(@Arg("gridId") String gridId,@Arg("iIndex") int iIndex, @Arg("rowToSelect") int rowToSelect) throws Exception {
		rowToSelect=getRowIndexForVisibleRow(gridId, rowToSelect);
		String colObj[] = {null,null};
		setErrorRecovery(BasicErrorRecovery.ERR_GENERIC_ERROR_CODE, ErrorRecoveryAction.Ignore);
		for(int cnt=0;cnt<10;cnt++){
			try{
				colObj=web.document(e1Browser).executeJsFunction("highlightRowSelector", gridId,Integer.toString(rowToSelect));
				delay(3000);
			}catch(Exception e){};
			if((colObj[0]!=null)&&((colObj[0].length()!=0))){
				break;
			}
		}
		if((colObj[1]!=null)&&((colObj[1]).equalsIgnoreCase("radio"))){
			web.radioButton(e1Browser+"/web:form[@id='E1PaneForm']/web:input_radio[@id='"+colObj[0]+"']").click();
			info( "Row found & Clicked the selector radio button for "+( (Integer)rowToSelect+1));
		}else if((colObj[1]!=null)&&((colObj[1]).equalsIgnoreCase("checkbox"))){
			//DOMCheckbox chk=web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+colObj[0]+"']");
			web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+colObj[0]+"']").focus();
			web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+colObj[0]+"']").check(true);
			info("Rowselector found and selected for row no "+( (Integer)rowToSelect+1));
			//web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+colObj[0]+"']").fireEvent("onClick");	             				
		}else{
			web.window(e1BrowserWindow).capturePage();
			beginStep("[highlightGridRow] row identification Failed: can not select/deselect row: " + ( (Integer)rowToSelect+1));
			{
				testFailure("unable to find row selector for row: " +( (Integer)rowToSelect+1));
			}endStep();
		}
	}
	/************************************************************************************************************
	 * Function: getGridRowNo  
	 * Description: This function returns the row index starting from 0, where the specified search criterion meets, else return -1
	 * Created By: Sravan
	 * Date: March 2011
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *      @param iIndex - index of the grid in the webpage starting from 0,
	 *      @param sFieldName -  column header of the cell
	 *      @param sValue - value to be searched under column header sFieldName   
	 * Returns: 
	 *      @return The matched row index (starting from 0) or -1 if no matching row exists
	 * **********************************************************************************************************
	 */
	public int getGridRowNo(@Arg("iIndex") int iIndex,    @Arg("sFieldName") String sFieldName,@Arg("sValue") String sValue) throws Exception { 
		info("start of function getGridRowNo");
		String gridId, colIndex;
		int rowIndex, rowCount, matchingRow, idx;
		matchingRow = -1;
		if(!bDB){
			checkFrame();
			gridId=getGridObjReference(iIndex);
			if (gridId != null) {
				colIndex = getColIndexForColName(gridId, sFieldName);
				if (colIndex != null) { 
					rowCount = getGridRowCountByIndex(iIndex);
					for (idx = 0; idx < rowCount; idx++) {
						rowIndex = getRowIndexForVisibleRow(gridId, idx);
						String[] output1 = web.document(e1Browser).executeJsFunction("getGridRowValueAtCol",gridId, Integer.toString(rowIndex),colIndex);
						if((output1[0].startsWith("-")) || (output1[0].endsWith("-"))){
							if( (sValue.startsWith("-"))||(sValue.endsWith("-"))){
								sValue=sValue.replace("-", "");
								output1[0]=output1[0].replace("-", "");
							}
						}
						try{
							double d1=Double.parseDouble(sValue);
							double d2=Double.parseDouble(output1[0]);
							sValue=Double.toString(d1);
							output1[0]=Double.toString(d2);
						}
						catch(NumberFormatException e){                                     
						}
						if (output1[0].trim().equals(sValue)) {
							matchingRow = rowIndex;
							output1 = web.document(e1Browser).executeJsFunction("getVisisbleRowIndex",gridId, Integer.toString(rowIndex));
							if(output1[0]!=null&&(output1[0].length()!=0)){
								matchingRow=Integer.parseInt(output1[0]);
							}
							break;
						}
					}                                   
				}else{
					web.window(e1BrowserWindow).capturePage();
					beginStep("[getGridRowNo] Column Identification Failed: Unable to identify column " + sFieldName);
					{
						testFailure("Unable to identify column " + sFieldName);
					}endStep();
				}

			}
		}else{
			gridId=getDataBrowserGridObjReference();                    
			if (gridId != null) {
				colIndex = getColIndexForColName(gridId, sFieldName);
				if (colIndex != null) { 
					rowCount = getGridRowCount();
					for (idx = 0; idx < rowCount; idx++) {
						rowIndex = getRowIndexForVisibleRow(gridId, idx);
						String[] output1 = web.document(sDBBrowser).executeJsFunction("getGridRowValueAtCol",gridId, Integer.toString(rowIndex),colIndex);
						if((output1[0].startsWith("-")) || (output1[0].endsWith("-"))){
							if( (sValue.startsWith("-"))||(sValue.endsWith("-"))){
								sValue=sValue.replace("-", "");
								output1[0]=output1[0].replace("-", "");
							}
						}
						try{
							double d1=Double.parseDouble(sValue);
							double d2=Double.parseDouble(output1[0]);
							sValue=Double.toString(d1);
							output1[0]=Double.toString(d2);
						}
						catch(NumberFormatException e){                                     
						}
						if (output1[0].trim().equals(sValue)) {
							matchingRow = rowIndex;
							output1 = web.document(sDBBrowser).executeJsFunction("getVisisbleRowIndex",gridId, Integer.toString(rowIndex));
							if(output1[0]!=null&&(output1[0].length()!=0)){
								matchingRow=Integer.parseInt(output1[0]);
							}
							break;
						}
					}                                   
				}else{				
					web.window(sDBBrowserWindow).capturePage();
					beginStep("[getGridRowNo] Column Identification Failed: Unable to identify column " + sFieldName);
					{
						testFailure("Unable to identify column " + sFieldName);
					}endStep();
				}
			}
		}
		if(matchingRow==-1){
			if(!bDB)
				web.window(e1BrowserWindow).capturePage();
			else
				web.window(sDBBrowserWindow).capturePage();
			info("[getGridRowNo] Row Identification Failed: No row found with " + sFieldName + "=" + sValue);
		}                             

		info("Matching row is "+matchingRow);
		return matchingRow;
	} 

	/************************************************************************************************************
	 * Function: validateGridRowData
	 * Description: This function will validate the data for a specified row in a grid 
	 * Created By: Prakruthi
	 * Modified By: Sravan
	 * Date: March 2011
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param iIndex : index of the grid in the webpage starting from 0
	 * 		@param iRow : visible row index of the concerned row starting from 0
	 * 		@param sParam : semicolon seperated columnheader=value pairs
	 * Returns:Nil 
	 * **********************************************************************************************************
	 */

	public void validateGridRowData(@Arg("iIndex") int iIndex, @Arg("iRow") int iRow,  @Arg("sParam") String sParam) throws Exception {
		info("Starting:Function validateGridRowData");
		String gridId,tempFld,tempVal, colIndex,sCellData = null;
		Pattern pat = Pattern.compile("[;]");
		String param[] = pat.split(sParam);
		int paramCount = param.length;
		int idx;		
		if(!bDB){
			checkFrame();
			gridId = getGridObjReference(iIndex);
			if(gridId!=null) {   
				String[] output = web.document(	e1Browser).executeJsFunction("getvisibleRowCount", gridId);
				int rowCount = Integer.parseInt(output[0]);
				if(iRow >=rowCount){
					iRow=iRow+1;
					web.window(e1BrowserWindow).capturePage();
					beginStep("[validateGridRowData] Failed: Validating Grid Row "+ iRow + " and Grid only has " + rowCount +" row");
					{	
						testFailure("Validating grid to row " +iRow + "and Grid only has "+rowCount +"  row");
					}endStep();
					return;
				}
				int rowIndex=getRowIndexForVisibleRow(gridId,iRow);
				for(idx=0;idx<paramCount;idx++) {
					Pattern pat1 = Pattern.compile("[=]");
					String FieldVal[] = pat1.split(param[idx]);
					if(FieldVal.length==2){
						tempFld=FieldVal[0];
						tempVal=FieldVal[1];
						tempVal=tempVal.replaceAll("~", "=");
					} else if(FieldVal.length==3) {
						tempFld=FieldVal[0];
						tempVal=FieldVal[1]+"="+FieldVal[2];
					}else{
						tempFld=FieldVal[0];
						tempVal="";
					}
					colIndex=getColIndexForColName(gridId,tempFld);
					if(colIndex!=null) {
						String[] sCellValue = web.document(e1Browser).executeJsFunction("getGridRowCellValue", gridId.toString(),Integer.toString(rowIndex),colIndex);
						sCellData = sCellValue[0];						
						String tempVal1=tempVal.trim();
						if((sCellData.startsWith("-")) || (sCellData.endsWith("-"))){
							if( (tempVal1.startsWith("-"))||(tempVal1.endsWith("-"))){
								tempVal1=tempVal1.replace("-", "");
								sCellData=sCellData.replace("-", "");
							}
						}
						try{
							double d1=Double.parseDouble(tempVal1);
							double d2=Double.parseDouble(sCellData);
							tempVal1=Double.toString(d1);
							sCellData=Double.toString(d2);							
						}
						catch(NumberFormatException e){						  
						}
						if(areDatesEqual(tempVal1.trim(), sCellData.trim()).equalsIgnoreCase("false"))
						{	
						if(tempVal1.trim().equals(sCellData.trim()))
							info(tempFld+ " Column Field Passed. Value "+tempVal+" displayed as expected");
						else{
							CapturePage();
							reportFailure(tempFld+ " Field Expected value is " +tempVal+ " and Actual value is " +sCellData);
							
							}
						}
						else
						{
							if(areDatesEqual(tempVal1.trim(), sCellData.trim()).equalsIgnoreCase("0"))
								info(tempFld+ " Column Field Passed. Value "+tempVal+" displayed as expected");
							else{
								OSPreferences("ReportErrorAndContinue");
								info("overriding CIT Preferrences");
								CapturePage();	
								reportFailure(tempFld+ " Field Expected value is " +tempVal+ " and Actual value is " +sCellData);
								
							}
							
						}
					} else {
						OSPreferences("fail");
						web.window(e1BrowserWindow).capturePage();
						beginStep("[validateGridRowData] Failed to identify Column " +tempFld);
						{	
							testFailure("Failed to identify Column "+tempFld);
						}endStep();
					}
				}
			}
			if(paramCount>10){
				browserRefresh();
			}
		} else {			
			gridId=getDataBrowserGridObjReference();
			String[] output = web.document(sDBBrowser).executeJsFunction("getvisibleRowCount", gridId);
			int rowCount = Integer.parseInt(output[0]);
			if(iRow >=rowCount){
				iRow=iRow+1;
				web.window(sDBBrowserWindow).capturePage();
				beginStep("[validateGridRowData] Failed: Validating Grid Row "+ iRow + " and Grid only has " + rowCount +" row");
				{	
					testFailure("Validating grid to row " +iRow + "and Grid only has "+rowCount +"  row");
				}endStep();
				return;
			}
			int rowIndex=getRowIndexForVisibleRow(gridId,iRow);
			for(idx=0;idx<paramCount;idx++) {
				boolean flag=false;
				Pattern pat1 = Pattern.compile("[=]");
				String FieldVal[] = pat1.split(param[idx]);				
				if(FieldVal.length==2){
					tempFld=FieldVal[0];
					tempVal=FieldVal[1];
					tempVal=tempVal.replaceAll("~", "=");
				} else if(FieldVal.length==3) {
					tempFld=FieldVal[0];
					tempVal=FieldVal[1]+"="+FieldVal[2];
				}else {
					tempFld=FieldVal[0];
					tempVal="";
				}
				tempFld=tempFld.replaceAll(" ", "");
				colIndex=getColIndexForColName(gridId,tempFld);
				if(colIndex!=null) {
					String[] sCellValue = web.document(sDBBrowser).executeJsFunction("getGridRowCellValue", gridId.toString(),Integer.toString(rowIndex),colIndex);
					sCellData = sCellValue[0];
					String tempVal1=tempVal.trim();
					if((sCellData.startsWith("-")) || (sCellData.endsWith("-"))){
						if( (tempVal1.startsWith("-"))||(tempVal1.endsWith("-"))){
							tempVal1=tempVal1.replace("-", "");
							sCellData=sCellData.replace("-", "");
						}
					}
					try{
						double d1=Double.parseDouble(tempVal1);
						double d2=Double.parseDouble(sCellData);
						tempVal1=Double.toString(d1);
						sCellData=Double.toString(d2);
					}
					catch(NumberFormatException e){						  
					}
					if(tempVal1.trim().equals(sCellData.trim()))
						info(tempFld+ " Column Field Passed. Value "+tempVal+" displayed as expected");
					else{
						OSPreferences("ReportErrorAndContinue");
						web.window(sDBBrowserWindow).capturePage();
						beginStep("[validateGridRowData]" +tempFld+ " Field Expected value is " +tempVal+ " and Actual value is " +sCellData );
						{	
							reportFailure(tempFld+ " Field Expected value is " +tempVal+ " and Actual value is " +sCellData);
						} endStep();
						if(isCITRun)
							OSPreferences("fail");
					}
				} else {
					web.window(sDBBrowserWindow).capturePage();
					beginStep("[validateGridRowData] Failed to identify Column " +tempFld);
					{	
						testFailure("Failed to identify Column "+tempFld);
					}endStep();
				}
			}			
			if(paramCount>10){
				browserRefresh();
			}
		}
		valCount=param.length+valCount;
		info("Ending:Function validateGridRowData");
	}


	/************************************************************************************************************
	 * Function: validateGridRowDataPopulated
	 * Description: This function will validate that Data under a specific column in a given cell is populated
	 * Created By: Prakruthi
	 * Date: September 2011
	 * To be incorporated:
	 * Input Parameters: 
	 *          @param iIndex :Iindex of the grid in the webpage starting from 0.
	 *          @param iRow :visible row index starting from 0
	 *          @param sColName :column header under which to validate the data
	 * Returns: 
	 *          @return Nil
	 * **********************************************************************************************************
	 */

	public void validateGridRowDataPopulated(@Arg("iIndex") int iIndex, @Arg("iRow") int iRow,@Arg("sColName") String sColName) throws Exception {
		info("Starting:Function validateGridRowDataPopulated");
		int rowIndex, rowCount,idx;
		String DataTabcolNames[]=outputGridRowData(iIndex, iRow, sColName);
		if(DataTabcolNames==null){
			return;
		}
		Pattern pat = Pattern.compile("[;]");
		String param[] = pat.split(sColName);
		int paramCount = param.length;
		for(idx=0;idx<paramCount;idx++){
			String sTempColName=DataTabcolNames[idx];
			String sColValue="";
			if(sTempColName!=null&&sTempColName.length()!=0){
				sColValue = (String) datatable.getGlobalDatatable().getValue("Global", 0, sTempColName);
			} 
			if((sColValue != null) && (sColValue.trim().length()> 0)){
				info("[validateGridRowDataPopulated] Passed:Row data is populated for column "+param[idx]);

			} else {
				getLogger().error("Failed: No Data populated in grid");
				web.window(e1BrowserWindow).capturePage();
				beginStep("[validateGridRowDataPopulated] Failed:No Data populated in selected grid row for column "+param[idx]);
				{

					testFailure("No Data populated in selected grid row for column "+param[idx]);
				}endStep();				
			}
			if(sTempColName!=null&&sTempColName.length()!=0){

				datatable.getGlobalDatatable().deleteColumn("Global", sTempColName);
			}
		}
		valCount=valCount+paramCount;
		info("Finished:Function validateGridRowDataPopulated ");
	}

	/************************************************************************************************************
	 * Function: clickGridRowImageByIndex
	 * Description: This function is used to validate text of a grid row as Bold 
	 * Created By: Neha
	 * Date: March 2011
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param iIndex :index of the grid in the webpage starting from 0.
	 * 		@param iRow :visible row index starting from 0
	 * 		@param sFieldName - column header under which to look for the image
	 * 		@param iImgIndex - Index of the image starting from 0
	 * To be incorporated: Nil
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void clickGridRowImageByIndex(@Arg("iIndex") int iIndex, @Arg("iRow") int iRow,@Arg("sFieldName") String sFieldName,@Arg("iImgIndex") int iImgIndex) throws Exception {
		info("Starting:Function clickGridRowImageByIndex");
		
		checkFrame();
		int rowCount;
		String gridId = getGridObjReference(iIndex); 
		//info(gridId);
		// Checking if Grid object is returned successfully
		if(gridId!=null){
			//Checking for Valid Row 
			String[] output = web.document(e1Browser).executeJsFunction("getvisibleRowCount", gridId);
			rowCount = Integer.parseInt(output[0]);			
			if(iRow >=rowCount){
				iRow=iRow+1;
				web.window(e1BrowserWindow).capturePage();
				beginStep("[clickGridRowImageByIndex] Failed: Clicking Grid Row:"+ iRow + " and Grid only has " + rowCount +" row");
				{		
					testFailure("Clicking Grid Row:" +iRow + "and Grid only has "+rowCount +"  row");
				}endStep();
				return;
			}
			
			String colIndex = getColIndexForColName(gridId, sFieldName);			
			if(!isGridColIntoView){
				isGridColIntoView = scrollGridColumnIntoView(gridId,colIndex);
			}
			if(colIndex!=null){				
				int rowIndex=getRowIndexForVisibleRow(gridId,iRow);
				isGridRowIntoView = scrollGridRowIntoView(gridId,rowIndex);
				String[] gridCellId = web.document(e1Browser).executeJsFunction("clickGridImgByIndex", gridId,""+rowIndex,colIndex,Integer.toString(iImgIndex));
				//info(gridCellId[0]);
				//customClick(web.image(e1Browser+"/web:form[@id='E1PaneForm']/web:img[@id='"+gridCellId[0]+"']"));
				web.image(e1Browser+"/web:form[@id='E1PaneForm']/web:img[@id='"+gridCellId[0]+"']").focus();
				web.image(e1Browser+"/web:form[@id='E1PaneForm']/web:img[@id='"+gridCellId[0]+"']").click();
				info("Identified Image " + sFieldName + " & clicked");
			} else {
				web.window(e1BrowserWindow).capturePage();
				beginStep("[clickGridRowImageByIndex] Image identification Failed:  Failed to identify Image "+ sFieldName);
				{	
					testFailure("Failed to Identify Image " + sFieldName);
				}endStep();
			}	
		}
		
		info("Finished:Function clickGridRowImageByIndex ");
	}	
	/************************************************************************************************************
	 * Function: clickGridRowImageByName
	 * Description: This function is used to validate text of a grid row as Bold 
	 * Created By: Neha
	 * Date: March 2011
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param iIndex :index of the grid in the webpage starting from 0.
	 * 		@param iRow :visible row index starting from 0
	 * 		@param sColumnName - column header under which to look for the image
	 * 		@param iImgName - Index of the image starting from 0
	 * To be incorporated: Nil
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	public void clickGridRowImageByName(@Arg("iIndex") int iIndex, @Arg("iRow") int iRow,@Arg("sColumnName") String sColumnName,@Arg("iImgName") String iImgName) throws Exception {
		info("Starting:Function clickGridRowImageByName");
		checkFrame();
		int rowCount;
		String gridId = getGridObjReference(iIndex); 
		//info(gridId);
		// Checking if Grid object is returned successfully
		if(gridId!=null){
			//Checking for Valid Row 
			String[] output = web.document(e1Browser).executeJsFunction("getvisibleRowCount", gridId);
			rowCount = Integer.parseInt(output[0]);
			if(iRow >=rowCount){
				iRow=iRow+1;
				web.window(e1BrowserWindow).capturePage();
				
				testFailure("[clickGridRowImageByName] Failed: Clicking Grid Row:"+ iRow + " and Grid only has " + rowCount +" row");
				return;
			}
			String colIndex = getColIndexForColName(gridId, sColumnName);
			if(colIndex!=null){
				int rowIndex=getRowIndexForVisibleRow(gridId,iRow);

				String[] parts = web.document(e1Browser).executeJsFunction("getGridCellImg", gridId,""+rowIndex,colIndex);
				//String[] ImgList=gridCellIMGList.split(";");
				boolean flag=false;
				System.out.println("parts"+parts[0]);
				//for(int i=0;i<ImgList.length;i++){
				//String[] parts=ImgList[i].split("#");
				//if((parts.length==2)&&(parts[1].toUpperCase().contains(iImgName.toUpperCase()))){
				if(parts[0].equalsIgnoreCase(parts[0])){
					customClick(web.image(e1Browser+"/web:form[@id='E1PaneForm']/web:img[@name='"+parts[0]+"']"));
					info("Identified Image " + iImgName + " & clicked");
					flag=true;

				}
				//}
				if(!flag){
					web.window(e1BrowserWindow).capturePage();
					
					testFailure("[clickGridRowImageByName] Image identification Failed:  Failed to identify Image "+ iImgName);
				}

			} else {
				web.window(e1BrowserWindow).capturePage();
				
				testFailure("[clickGridRowImageByName] Column identification Failed:  Failed to identify Column "+ sColumnName);
			}
		}
		info("Finished:Function clickGridRowImageByName ");
	}
	public void validateGridRowBgColor(@Arg("iIndex") int iIndex, @Arg("iRow") int iRow,  @Arg("sColor") String sColor)throws Exception {
		boolean isGridRowIntoView =false, isGridColIntoView=false;		
		info("Starting:Function validateGridRowBgColor");
		//String tempColor = "",redColor="0000";
		String bgColor="",gridId ="", id="",colIndex;
		int rowIndex=iRow;
		
		String[] cellOuterHtml = null;
		if(!bDB){
			checkFrame();
			gridId = getGridObjReference(iIndex);
			id="jdeGrid"+gridId;
			//info("id is: " +id);
			if(gridId!=null) {   
				String[] output = web.document(e1Browser).executeJsFunction("getvisibleRowCount", gridId);
				int rowCount = Integer.parseInt(output[0]);
				//info(rowCount+"\n"+iRow);
				if(iRow >(rowCount-1)){
					iRow=iRow+1;
					CapturePage();					 
					testFailure("Validating grid to row " +iRow + "and Grid only has "+rowCount +" row");				
					return;
				}
				
				rowIndex = getRowIndexForVisibleRow(gridId, rowIndex);
				isGridRowIntoView = scrollGridRowIntoView(gridId,rowIndex);				
				String[] output1 = web.document(e1Browser).executeJsFunction("getColLen", gridId);
				int colCount=Integer.parseInt(output1[0]);
				colCount= colCount-1;				
				for(int startCol=0;startCol<=colCount;startCol++){
				 if(startCol!=0){
					 if((startCol==100)||(startCol==200)||(startCol==300)){
						 browserRefresh();
					 }
				 }
				 
				 String[] colName = web.document(e1Browser).executeJsFunction("getColLabel", gridId,Integer.toString(startCol));
				 if(colName[0]!=null){
					 String[] colIsHidden = web.document(e1Browser).executeJsFunction("gridCellIsHidden", gridId,Integer.toString(startCol));
					 if(colIsHidden[0].equalsIgnoreCase("true")){
						 continue;
					 }					 
					colIndex = getColIndexForColName(gridId, colName[0]);
					isGridColIntoView = scrollGridColumnIntoView(gridId,rowIndex+"", colIndex);
					
				e1Document = "/web:document[@index='"+docIndex+"' or @name='e1menuAppIframe']";
				e1Browser=e1BrowserWindow+e1Document;				
				DOMDocument document = web.document(e1Browser);
				
				//document.executeJavaScript("function getDisColor(){return window.getComputedStyle("+id+".getDataCell("+rowIndex+","+colIndex+"),null).getPropertyValue('background-color');}");
				document.executeJavaScript("function getDisColor(){var abc= window.getComputedStyle("+id+".getDataCell("+rowIndex+","+colIndex+"),null); var def=abc.getPropertyValue('background-color')+''; return [def,'kk'];}");
				try{
 				 cellOuterHtml = web.document(e1Browser).executeJsFunction("getDisColor");
 				}catch (Exception e){ 
 					e.printStackTrace();
 					cellOuterHtml =web.document(e1Browser).executeJsFunction("gridCellBGColor",gridId,Integer.toString(rowIndex),colIndex);
 					
 				} 				
				//String[] cellOuterHtml = web.document(e1Browser).executeJsFunction("gridCellBGColor",gridId,Integer.toString(rowIndex),colIndex);
				bgColor=cellOuterHtml[0];				
				//info("cell outer html "+cellOuterHtml[0]);
				String colorName = ""+ getScript("EOneUtility").callFunction("getColorName",cellOuterHtml[0]);
				colorName = colorName.trim();				
				sColor = sColor.trim();
				//info("Expected Color : "+sColor);				
				if(bgColor!=null){
					if(sColor.equalsIgnoreCase(colorName)){
						 //info("validateGridRowBgColor: Expected and Actual Color Matched");
                       }else{
                               CapturePage();
                               testFailure("validateGridRowBgColor:Mismatch in Expected and Actual Color ");
                           }
							
				}else{
                               CapturePage();
                               testFailure("validateGridRowBgColor:Mismatch in Expected and Actual Color ");
				}			
			}else{
				CapturePage();
				testFailure("validateGridRowBgColor:"+colName[0] +"not found");
			}
			}
				info("validateGridRowBgColor Passed: Row "+(iRow+1)+" is highlighted in "+colorName);	
			}else{
				CapturePage();
				testFailure("validateGridRowBgColor:Grid not found");
			}
		}else{
			gridId = getDataBrowserGridObjReference();
			id="jdeGrid"+gridId;			
			if(gridId!=null) {   
				String[] output = web.document(sDBBrowser).executeJsFunction("getvisibleRowCount", gridId);
				int rowCount = Integer.parseInt(output[0]);//info("rowCount = "+rowCount);
				if(iRow >(rowCount-1)){
					iRow=iRow+1;
					CapturePage();
					testFailure("Validating grid to row " +iRow + "and Grid only has "+rowCount +"  row");
					return;
				}
				rowIndex = getRowIndexForVisibleRow(gridId, rowIndex);
				isGridRowIntoView = scrollGridRowIntoView(gridId,rowIndex);				
				String[] output1 = web.document(e1Browser).executeJsFunction("getColLen", gridId);
				
				int colCount=Integer.parseInt(output1[0]);
				colCount= colCount-1;				
				for(int startCol=0;startCol<=colCount;startCol++){
				 if(startCol!=0){
					 if((startCol==100)||(startCol==200)||(startCol==300)){
						 browserRefresh();
					 }
				 }
				 String[] colName = web.document(e1Browser).executeJsFunction("getColLabel", gridId,Integer.toString(startCol));
				 //info("colname: "+colName[0]);
				 if(colName[0]!=null){				
					colIndex = getColIndexForColName(gridId, colName[0]);
					isGridColIntoView = scrollGridColumnIntoView(gridId,rowIndex+"",colIndex);
					if(!isGridColIntoView){
						  	
			              }					 
					 rowIndex = getRowIndexForVisibleRow(gridId, rowIndex);
					 if(!isGridRowIntoView){
						 
					 }
									
				e1Document = "/web:document[@index='"+docIndex+"' or @name='e1menuAppIframe']";
				e1Browser=e1BrowserWindow+e1Document;				
				DOMDocument document = web.document(e1Browser);
				//document.executeJavaScript("function getDisColor(){return window.getComputedStyle("+id+".getDataCell("+rowIndex+","+colIndex+"),null).getPropertyValue('background-color');}");
				document.executeJavaScript("function getDisColor(){var abc= window.getComputedStyle("+id+".getDataCell("+rowIndex+","+colIndex+"),null); var def=abc.getPropertyValue('background-color')+''; return [def,'kk'];}");
				try{
 				 cellOuterHtml = web.document(e1Browser).executeJsFunction("getDisColor");
 				}catch (Exception e){ 
 					cellOuterHtml =web.document(e1Browser).executeJsFunction("gridCellBGColor",gridId,Integer.toString(rowIndex),colIndex);
 					//e.printStackTrace();
 				}
				//String[] cellOuterHtml = web.document(e1Browser).executeJsFunction("gridCellBGColor",gridId,Integer.toString(rowIndex),colIndex);
				bgColor=cellOuterHtml[0];				
				//info("cell outer html "+cellOuterHtml[0]);
				String colorName = ""+ getScript("EOneUtility").callFunction("getColorName",cellOuterHtml[0]);
				colorName = colorName.trim();				
				sColor = sColor.trim();
				//info("Expected Color : "+sColor);
				
				if(bgColor!=null){
					if(sColor.equalsIgnoreCase(colorName)){
						 //info("validateGridRowBgColor: Expected and Actual Color Matched");
                       }else{
                               CapturePage();
                               testFailure("validateGridRowBgColor:Mismatch in Expected and Actual Color ");
                           }
							
				}else{
                               CapturePage();
                               testFailure("validateGridRowBgColor:Mismatch in Expected and Actual Color ");
				}
			}
			
				
			}//for
				info("validateGridRowBgColor: Expected and Actual Color Matched for row:"+iRow+1);
			}else{
				CapturePage();
				testFailure("validateGridRowBgColor:Grid not found");
			}
			}
		
		valCount=valCount+1;
		info("Finished:Function validateGridRowBgColor");
		
	}

	/************************************************************************************************************
	 * Function: validateGridCellTextColor
	 * Description: This function is used to validate the text color for the specified cell of the grid. 
	 * Created By: Prakruthi
	 * Modified By: Anusha(added condition for black)
	 * Date: July 2011
	 * To be incorporated: Nil
	 * Input Parameters:
	 * 			@param iIndex :Index of the Grid(webTable)If there is multiple grids on a page, the index starts with 0 from top to bottom
	 * 			@param iRow : index of the concerned Row in the Grid and it starts from 0
	 * 			@param sParam : contains column name and expected text color 
	 * Returns:
	 * 			@return Nil
	 * Example:
	 * 		validateGridCellTextColor(0,0,"Company=Blue;GL/Date=Red"); 
	 * **********************************************************************************************************
	 */
	public void validateGridCellTextColor(@Arg("iIndex") int iIndex, @Arg("iRow") int iRow,@Arg("sParm") String sParam) throws Exception {
		info("Starting:Function ValidateGridCellTextColor ");
		String tempColor = "mmm",rgbColor="";
		String outerHTML="";
		String sColName = null, sColor =null;
		checkFrame();
		String gridId = getGridObjReference(iIndex);
		Pattern pat = Pattern.compile("[;]");
		String aColName[] = pat.split(sParam);
		int iColCount = aColName.length;
		if(gridId!=null) {   
			String[] output = web.document(	e1Browser).executeJsFunction("getvisibleRowCount", gridId);
			int rowCount = Integer.parseInt(output[0]);
			if(iRow >(rowCount-1)){
				iRow=iRow+1;
				web.window(e1BrowserWindow).capturePage();
				beginStep("[ValidateGridCellTextColor] Failed: Setting Grid Row "+ iRow + " and Grid only has " + rowCount +" row");
				{	
					testFailure("Setting grid to row " +iRow + "and Grid only has "+rowCount +"  row");
				}endStep();
				return;
			}			
			int rowIndex =getRowIndexForVisibleRow(gridId,iRow);
			for(int idx=0; idx< iColCount;idx++){
				Pattern pat1 = Pattern.compile("[=]");
				String FieldVal[] = pat1.split(aColName[idx]);
				int iMaxLen = FieldVal.length;
				if(iMaxLen==2) {
					sColName=FieldVal[0];
					sColor=FieldVal[1];
				} else {
					sColName=FieldVal[0];
					sColor="";
				}
				//	info("col name = "+sColName+"    color= "+sColor);
				String colIndex = getColIndexForColName(gridId,sColName);
				//	info("col index " +colIndex);
				//	info("row Index "+rowIndex);
				String[] cellOuterHtml = web.document(e1Browser).executeJsFunction("gridCellOuterHTML",gridId,Integer.toString(rowIndex),colIndex);
				outerHTML=cellOuterHtml[0];
				if (sColor.equalsIgnoreCase("red")){ 
					tempColor="#ff0000";rgbColor="rgb(255, 0, 0)";
				}else if (sColor.equalsIgnoreCase("blue")){
					tempColor="#00ffff";rgbColor="rgb(0, 255, 255)";
				}else if (sColor.equalsIgnoreCase("yellow")){
					tempColor="#ffff00";rgbColor="rgb(255, 255, 0)";
				}else if (sColor.equalsIgnoreCase("green")){
					tempColor="#00ff00";rgbColor="rgb(0, 255, 0)";
				}

				int outerHTML1 = outerHTML.trim().indexOf("color: "+ tempColor);
				int outerHTML2 = outerHTML.trim().indexOf("color: "+ rgbColor);
				//info("outerHTML= "+outerHTML+" \n outerHTML1  " +outerHTML1);
				if((outerHTML1<0)&(outerHTML2<0)){
					if (sColor.equalsIgnoreCase("blue")){
						tempColor="#0000ff";rgbColor="rgb(0, 0, 255)";
						outerHTML1 = outerHTML.trim().indexOf("color: "+ tempColor);
						outerHTML2 = outerHTML.trim().indexOf("color: "+ rgbColor);
					}

					if((outerHTML1<0)&(outerHTML2<0)){
						if((outerHTML.trim().indexOf("color:")<0)&&(sColor.equalsIgnoreCase("black"))){
							info("[ValidateGridCellTextColor]: Expected and Actual Color Matched for "+sColName);
							beginStep("[ValidateGridCellTextColor]: Expected and Actual Color Matched", 0);
							{
								getStepResult().isPassed();
							}endStep();
							info("ValidateGridCellTextColor: Expected and Actual Color Matched");
						}
						else{
							getLogger().error("[ValidateGridCellTextColor] Failed:Mismatch in Expected and Actual Color for "+sColName);
							web.window(e1BrowserWindow).capturePage();
							beginStep("[ValidateGridCellTextColor] Failed:Mismatch in Expected and Actual Color; Expected Color :"+sColor+"");
							{	
								testFailure("ValidateGridCellTextColor:Mismatch in Expected and Actual Color ");
							}endStep();
						}
					}
				} else {
					info("[ValidateGridCellTextColor]: Expected and Actual Color Matched for "+sColName);
					beginStep("[ValidateGridCellTextColor]: Expected and Actual Color Matched", 0);
					{
						getStepResult().isPassed();
					}endStep();
					info("ValidateGridCellTextColor: Expected and Actual Color Matched");
				}
			}
		}
		valCount=valCount+ aColName.length;
		info("Finished:Function ValidateGridCellTextColor ");
	}
	/************************************************************************************************************
	 * Function: ValidateGridRowTextColor
	 * Description: This function is used to validate the text color for the specified row of the grid. 
	 * Created By: Ravi
	 * Date: March 2011
	 * To be incorporated: Nil
	 * Input Parameters:
	 * 			@param iIndex :Index of the Grid(webTable)If there is multiple grids on a page, the index starts with 0 from top to bottom
	 * 			@param iRow : index of the concerned Row in the Grid and it starts from 0
	 * 			@param iColor : expected BG color of the row.
	 * Returns:
	 * 			@return Nil 
	 * **********************************************************************************************************
	 */
	public void validateGridRowTextColor(@Arg("iIndex") int iIndex, @Arg("iRow") int iRow,  @Arg("iColor") String iColor) throws Exception {
		info("Starting:Function ValidateGridRowTextColor ");
		String tempColor = "mmm",rgbColor="";
		String outerHTML="";
		checkFrame();
		String gridId = getGridObjReference(iIndex);
		if(gridId!=null) {   
			String[] output = web.document(	e1Browser).executeJsFunction("getvisibleRowCount", gridId);
			int rowCount = Integer.parseInt(output[0]);
			if(iRow >(rowCount-1)){
				iRow=iRow+1;
				web.window(e1BrowserWindow).capturePage();
				beginStep("[validateGridRowTextColor] Failed: Validating Grid Row "+ iRow + " and Grid only has " + rowCount +" row");
				{	
					testFailure("Validating grid to row " +iRow + "and Grid only has "+rowCount +"  row");
				}endStep();
				return;
			}
			int  tempcolCnt=0; 
			String colIndex,colName[];
			do{
				tempcolCnt=tempcolCnt+1;
				colName = web.document(e1Browser).executeJsFunction("getColLabel", gridId,Integer.toString(tempcolCnt));
				colIndex = getColIndexForColName(gridId, colName[0]);
			}while(colIndex==null);
			int rowIndex =getRowIndexForVisibleRow(gridId,iRow);
			String[] output1 = web.document(e1Browser).executeJsFunction("gridCellOuterHTML", gridId.toString(),Integer.toString(rowIndex),colIndex.toString());
			outerHTML=output1[0];
			if (iColor.equalsIgnoreCase("red")){ 
				tempColor="#ff0000";rgbColor="rgb(255, 0, 0)";
				//info("RED");
			}else if (iColor.equalsIgnoreCase("blue")){
				info("BLUE");
				tempColor="#00ffff";rgbColor="rgb(0, 255, 255)";
			}else if (iColor.equalsIgnoreCase("yellow")){
				tempColor="#ffff00";rgbColor="rgb(255, 255, 0)";
			}else if (iColor.equalsIgnoreCase("green")){
				tempColor="#00ff00";rgbColor="rgb(0, 255, 0)";
			}else if (iColor.equalsIgnoreCase("black")){
				tempColor="#333333";rgbColor="rgb(0, 0, 0)";
			}
		}
		int outerHTML1 = outerHTML.trim().indexOf("color: "+ tempColor);
		int outerHTML2 = outerHTML.trim().indexOf("color: "+ rgbColor);
		info("outerHTML1:"+outerHTML1);
		info("outerHTML2:"+outerHTML2);
		if((outerHTML1==-1)||(outerHTML2==-1)){
			if (iColor.equalsIgnoreCase ("blue")){
				info("for blue");
				tempColor="#0000ff";rgbColor="rgb(0, 0, 255)";
				outerHTML1 = outerHTML.trim().indexOf("color: "+ tempColor);
				outerHTML2 = outerHTML.trim().indexOf("color: "+ rgbColor);
				info("outerHTML2:"+outerHTML2);
			}
			if (iColor.equalsIgnoreCase ("black")){		    
				rgbColor="rgb(0, 0, 0)";outerHTML1 = 0;outerHTML2 =0;
			}
			if((outerHTML1!=-1)||(outerHTML2!=-1)){
				beginStep("[Function Name]: Expected and Actual Color Matched", 0);
				{
					getStepResult().isPassed();
				}endStep();
				return;
			}
			String actColorCode,actColorCode2;
			outerHTML1 = outerHTML.trim().indexOf("color: ");
			outerHTML2 = outerHTML.trim().indexOf("color: ");
			actColorCode=outerHTML.trim().substring(outerHTML1+7, outerHTML1+14);
			actColorCode2=outerHTML.trim().substring(outerHTML2+7, outerHTML2+21);
			//info("actColorCode2:"+actColorCode2);
			String actColor=null;
			if ((actColorCode.equals ("#ff0000"))||(actColorCode2.equals("rgb(255, 0, 0)"))){ 
				actColor="red";
			}else if ((actColorCode.equals ("#00ffff"))||(actColorCode2.equals("rgb(0, 255, 255)"))){
				actColor="blue";
			}else if ((actColorCode.equals ("#0000ff"))||(actColorCode2.equals("rgb(0, 0, 255)"))){
				actColor="blue";
			}else if ((actColorCode.equals ("#ffff00"))||(actColorCode2.equals("rgb(255, 255, 0)"))){
				actColor="yello";
			}else if ((actColorCode.equals ("#00ff00"))||(actColorCode2.equals("rgb(0, 255, 0)"))){
				actColor="green";
			}else if ((actColorCode.equals ("#333333"))||(actColorCode2.equals("rgb(0, 0, 0)"))){
				actColor="black";
			}
			web.window(e1BrowserWindow).capturePage();
			beginStep("[ValidateGridRowTextColor] Failed: Expected color is "+iColor+ " and Actual Color is "+actColor);
			{	
				testFailure("ValidateGridRowTextColor:Mismatch in Expected and Actual Color ");
			}endStep();	
		} else {
			beginStep("[Function Name]: Expected and Actual Color Matched", 0);
			{
				getStepResult().isPassed();
			}endStep();
			info("ValidateGridRowTextColor: Expected and Actual Color Matched");
		}
		valCount=valCount+1;
		info("Finished:Function ValidateGridRowTextColor ");
	}

	/************************************************************************************************************
	 * Function:validateGridCellBgColor  
	 * Description: This function is used to validate the backgroud color for the specified cell of the grid
	 * Created By: Varma
	 * Modified By: Anusha Bonam
	 * Date: March 2011
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *      @param iIndex - index of the grid in the webpage starting from 0,
	 *		@param iRow   - row of the grid in the webpage starting from 0,
	 *		@param sColor - Bg color of the cell in the webpage,
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */
	
	public void validateGridCellBgColor(@Arg("iIndex") int iIndex, @Arg("iRow") int iRow, @Arg("sColName") String sColName, @Arg("sColor") String sColor) throws Exception {
		info("Starting:Function ValidateGridCellBgColor "); 
		String tempColor = "mmm";
		String outerHTML="",bgColor="";
		String[] cellOuterHtml = null;
		String gridId = getGridObjReference(iIndex);
		String id="jdeGrid"+gridId;
		//info("id is: " +id);
		if(gridId!=null) {

			String[] output = web.document(e1Browser).executeJsFunction("getvisibleRowCount", gridId);
			int rowCount = Integer.parseInt(output[0]);
			//info(rowCount+"\n"+iRow);
			if(iRow >(rowCount-1)){
				iRow=iRow+1;
				CapturePage();
				testFailure("Validating grid to row " +iRow + "and Grid only has "+rowCount +" row");
				return;
			}
			int rowIndex = getRowIndexForVisibleRow(gridId,iRow);
			isGridRowIntoView = scrollGridRowIntoView(gridId,rowIndex);
			String colIndex = getColIndexForColName(gridId,sColName);			
				isGridColIntoView = scrollGridColumnIntoView(gridId,rowIndex+"",colIndex);				
			if(Integer.parseInt(colIndex)!=-99){									
				
				e1Document = "/web:document[@index='"+docIndex+"' or @name='e1menuAppIframe']";
				e1Browser=e1BrowserWindow+e1Document;
				DOMDocument document = web.document(e1Browser);				
				document.executeJavaScript("function getDisColor(){var abc= window.getComputedStyle("+id+".getDataCell("+rowIndex+","+colIndex+"),null); var def=abc.getPropertyValue('background-color')+''; return [def,'kk'];}");
				try{
	 				 cellOuterHtml = web.document(e1Browser).executeJsFunction("getDisColor");
				}catch (Exception e){ 
	 					cellOuterHtml =web.document(e1Browser).executeJsFunction("gridCellBGColor",gridId,Integer.toString(rowIndex),colIndex);
	 					//e.printStackTrace();
	 			}
				//String[] cellOuterHtml = web.document(e1Browser).executeJsFunction("gridCellBGColor",gridId,Integer.toString(rowIndex),colIndex);
				bgColor=cellOuterHtml[0];
				info("Actual Color code :"+cellOuterHtml[0]);
				String[] output1 = web.document(e1Browser).executeJsFunction("gridCellOuterHTML", gridId.toString(),Integer.toString(rowIndex),colIndex.toString());
				outerHTML=output1[0];
				//info("Complete OuterHTML:"+output1[0]);
				String colorName = ""+ getScript("EOneUtility").callFunction("getColorName",cellOuterHtml[0]);
				colorName = colorName.trim();
				info("Color from ColorName Map function = "+colorName);
				sColor = sColor.trim();
				info("Expected Color : "+sColor);

				if(bgColor!=null){
					if(sColor.equalsIgnoreCase(colorName)){
						info("ValidateGridCellBgColor: Expected and Actual Color Matched");
					}else{
						CapturePage();
						testFailure("ValidateGridCellBgColor:Mismatch in Expected and Actual Color ");
					}

				}else{
					CapturePage();
					testFailure("ValidateGridCellBgColor:Mismatch in Expected and Actual Color ");
				}
			} 
		} 
		valCount=valCount+1;
		info("Finished:Function ValidateGridCellBgColor "); 
	}

	/************************************************************************************************************
	 * Function: gridRefresh
	 * Description: This function is used refresh the grid to update record. 
	 * Created By: Sunil
	 * Modified By:
	 * Date: July 2017
	 * To be incorporated: Nil
	 * Input Parameters:
	 *    @param iIndex :Index of the Grid(webTable)If there is multiple grids on a page, the index starts with 0 from top to bottom
	 *   
	 * Returns:
	 *    @return Nil
	 * **********************************************************************************************************
	 */
	public void gridRefresh( @Arg("iIndex") int iIndex) throws Exception {          
		info("Starting function gridRefresh");
		gridIds.clear();
		String gridId = getGridObjReference(iIndex);
		info("gridId:"+gridId);
		clickOnImage("Personalize Grid", "id", "customize_grid"+gridId);
		syncFrame();
		clickOnImage("SidePanelClose", "id", "SidePanelClose");
		syncFrame();
		info("End of function gridRefresh");
	}

	/************************************************************************************************************
	 * Function: outputGridCellTextColor
	 * Description: This function is used to output the text color for the specified cell of the grid. 
	 * Created By: Ghulam Quadir
	 * Modified By:
	 * Date: Mar 2016
	 * To be incorporated: Nil
	 * Input Parameters:
	 *    @param iIndex :Index of the Grid(webTable)If there is multiple grids on a page, the index starts with 0 from top to bottom
	 *    @param iRow : index of the concerned Row in the Grid and it starts from 0
	 *    @param sParam : contains column name 
	 *    @param sVar : contains variable name in Datatable
	 * Returns:
	 *    @return Nil
	 * Example:
	 *   outputGridCellTextColor(0,0,"Company"); 
	 * **********************************************************************************************************
	 */
	public void outputGridCellTextColor(@Arg("iIndex") int iIndex, @Arg("iRow") int iRow,@Arg("sParm") String sColName,@Arg("sVar") String sVar) throws Exception {
		info("Starting:Function outputGridCellTextColor ");
		String rgbColor="";
		String outerHTML="";
		String  sColor =" ";
		checkFrame();
		String gridId = getGridObjReference(iIndex);

		int iColCount=1;
		if(gridId!=null) {   
			String[] output = web.document( e1Browser).executeJsFunction("getvisibleRowCount", gridId);
			int rowCount = Integer.parseInt(output[0]);
			if(iRow >(rowCount-1)){
				iRow=iRow+1;
				web.window(e1BrowserWindow).capturePage();
				beginStep("[outputGridCellTextColor] Failed: Setting Grid Row "+ iRow + " and Grid only has " + rowCount +" row");
				{ 
					testFailure("Setting grid to row " +iRow + "and Grid only has "+rowCount +"  row");
				}endStep();
				return;
			}   
			int rowIndex =getRowIndexForVisibleRow(gridId,iRow);
			String colIndex = getColIndexForColName(gridId,sColName);
			if(colIndex==null){
				OSPreferences("ReportErrorAndContinue");
				web.window(e1BrowserWindow).capturePage();
				beginStep("[outputGridCellTextColor] Failed to identify Column " +sColName);
				{	
					testFailure("Failed to identify Column "+sColName);
				}endStep();
				return;
			}
			String[] cellOuterHtml = web.document(e1Browser).executeJsFunction("gridCellOuterHTML",gridId,Integer.toString(rowIndex),colIndex);
			outerHTML=cellOuterHtml[0];

			//info("colIndex=="+colIndex);
			//info("outerHtml=="+outerHTML);
			int outerHTML1 = outerHTML.trim().indexOf("color: ");
			if(outerHTML1== -1)
			{
				sColor="Black";
			}else{
				rgbColor="rgb(255, 0, 0)";
				if(outerHTML.trim().indexOf("color: "+rgbColor) != -1)
				{
					sColor="Red";
				}else
				{
					rgbColor="rgb(255, 255, 0)";
					if(outerHTML.trim().indexOf("color: "+rgbColor) != -1)
					{
						sColor="Yellow";
					}else{
						rgbColor="rgb(0, 255, 0)";
						if(outerHTML.trim().indexOf("color: "+rgbColor) != -1)
						{
							sColor="Green";
						}else{
							rgbColor="rgb(0, 255, 255)";
							String rgbColor1="rgb(0, 0, 255)";
							if((outerHTML.trim().indexOf("color: "+rgbColor) != -1) || (outerHTML.trim().indexOf("color: "+rgbColor1) != -1))
							{
								sColor="Blue";
							}
						}
					}
				}
			}
			int appender=checkColumnExists(sVar);
			if(appender!=0){
				sVar=sVar+appender;
			}
			datatable.getGlobalDatatable().addColumn("Global", sVar,0);
			datatable.getGlobalDatatable().setValue("Global", 0, sVar,sColor);
			beginStep("[outputGridCellTextColor] Passed: Indentified column "+sColName+" and the captured cell Text Color "+sColor+" stored in datatable");
			{
				getStepResult().isPassed();
			}endStep();
		} 
		info("Finished:Function outputGridCellTextColor ");
	}

	/************************************************************************************************************
	 * Function: outputGridRowBgColor
	 * Description: This function will output the colour for the specified row of the grid into datatable
	 * Created By: Varma
	 * Date: July 2011
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *          @param iIndex :Iindex of the grid in the webpage starting from 0.
	 *          @param iRow :visible row index starting from 0
	 * Returns: 
	 *          @return Nil
	 * **********************************************************************************************************
	 */
	public String[] outputGridRowBgColor(@Arg("iIndex") int iIndex, @Arg("iRow") int iRow, @Arg("sParam") String sParam) throws Exception {
		info("Starting:Function outputGridRowBgColor");
		String param[] = Pattern.compile("[;]").split(sParam);
		
		String gridId,colIndex=null,rowColor,tempFld="";
		String retVal[]=new String[param.length];
		String[] cellOuterHtml = null;
		int rowIndex,outerHTML1 = 0,i=0;
		
		if(!bDB){
		checkFrame();
		gridId = getGridObjReference(iIndex);
		String id="jdeGrid"+gridId;
		if(gridId!=null) {
			String[] output = web.document(e1Browser).executeJsFunction("getvisibleRowCount", gridId);
			int rowCount = Integer.parseInt(output[0]);
			if(iRow >(rowCount-1)){
				iRow=iRow+1;
				getLogger().error("[validateGridRowWebEdits] Failed: Setting Grid Row "+ iRow + " and Grid only has " + rowCount +" row");
				web.window(e1BrowserWindow).capturePage();
				beginStep("[validateGridRowWebEdits] Failed: Validating Grid Row "+ iRow + " and Grid only has " + rowCount +" row");
				{
					testFailure("Validating grid to row " +iRow + "and Grid only has "+rowCount +"  row");
				}endStep();
				return retVal;
			}			
			rowIndex =getRowIndexForVisibleRow(gridId,iRow);
			do{
				tempFld = param[i];
				colIndex = getColIndexForColName(gridId,tempFld);
				info(colIndex);
				scrollGridColumnIntoView(gridId,rowIndex+"",""+colIndex);
				
				if(colIndex!=null){
					
					e1Document = "/web:document[@index='"+docIndex+"' or @name='e1menuAppIframe']";
					e1Browser=e1BrowserWindow+e1Document;
					DOMDocument document = web.document(e1Browser);				
					document.executeJavaScript("function getDisColor(){var abc= window.getComputedStyle("+id+".getDataCell("+rowIndex+","+colIndex+"),null); var def=abc.getPropertyValue('background-color')+''; return [def,'kk'];}");
					try{
		 				 cellOuterHtml = web.document(e1Browser).executeJsFunction("getDisColor");
					}catch (Exception e){ 
						
		 				 cellOuterHtml =web.document(e1Browser).executeJsFunction("gridCellBGColor",gridId,Integer.toString(rowIndex),colIndex);
		 					e.printStackTrace();
		 			}
					rowColor=cellOuterHtml[0];
					info(rowColor);
				if(rowColor!=null) {					
					String colorName = ""+ getScript("EOneUtility").callFunction("getColorName",rowColor);
					colorName = colorName.trim();					
					if(colorName!=null){					
						datatable.setCurrentVUser((IteratingVUser) this.getScriptVUser().getParentUser());	
						tempFld=tempFld.replaceAll(" ", "");
						int appender=checkColumnExists(tempFld);
						String newTempFld;
						if(appender==0){
							newTempFld=tempFld;
						}else{
							newTempFld=tempFld+appender;
						}
						datatable.addColumn("Global",newTempFld.trim(),0);
						datatable.setValue("Global", 0, newTempFld.trim(),colorName);
						beginStep("[outputGridRowBgColor] Passed: Indentified column "+tempFld+ "and the captured cell value "+colorName+" stored in datatable");
						{
							getStepResult().isPassed();
						}endStep();
						retVal[i]=newTempFld.trim();
					}else{
						CapturePage();
						testFailure("outputting grid row color failed: Failed to identify color of "+tempFld);
					}
				}
			}else{
				beginStep("[outputGridRowBgColor] outputting grid row color failed: Failed to identify column "+tempFld);
				{
					web.window(e1BrowserWindow).capturePage();
					testFailure("outputting grid row color failed: Failed to identify column "+tempFld);
				}endStep();
				retVal[i]= "";
			}
			
			info("Iteration"+i);
			i=i+1;
			}while(i<(param.length));
		}
		}else{
			gridId=getDataBrowserGridObjReference();
			//String id="jdeGrid"+gridId;			
				String[] output = web.document(e1Browser).executeJsFunction("getvisibleRowCount", gridId);
				int rowCount = Integer.parseInt(output[0]);
				if(iRow >(rowCount-1)){
					iRow=iRow+1;
					getLogger().error("[validateGridRowWebEdits] Failed: Setting Grid Row "+ iRow + " and Grid only has " + rowCount +" row");
					web.window(e1BrowserWindow).capturePage();
					beginStep("[validateGridRowWebEdits] Failed: Validating Grid Row "+ iRow + " and Grid only has " + rowCount +" row");
					{
						testFailure("Validating grid to row " +iRow + "and Grid only has "+rowCount +"  row");
					}endStep();
					return retVal;
				}			
				rowIndex =getRowIndexForVisibleRow(gridId,iRow);
				do{
					tempFld = param[i];
					colIndex = getColIndexForColName(gridId,tempFld);									
					if(colIndex!=null){
						
						e1Document = "/web:document[@index='"+docIndex+"' or @name='e1menuAppIframe']";
						e1Browser=e1BrowserWindow+e1Document;
						//DOMDocument document = web.document(e1Browser);	
						cellOuterHtml =web.document(e1Browser).executeJsFunction("gridCellBGColor",gridId,Integer.toString(rowIndex),colIndex);
						/*document.executeJavaScript("function getDisColor(){var abc= window.getComputedStyle("+id+".getDataCell("+rowIndex+","+colIndex+"),null); var def=abc.getPropertyValue('background-color')+''; return [def,'kk'];}");
						try{
			 				 cellOuterHtml = web.document(e1Browser).executeJsFunction("getDisColor");
						}catch (Exception e){ 
			 				 
			 					//e.printStackTrace();
			 			}*/
						rowColor=cellOuterHtml[0];						
					if(rowColor!=null) {					
						String colorName = ""+ getScript("EOneUtility").callFunction("getColorName",rowColor);
						colorName = colorName.trim();						
						if(colorName!=null){					
							datatable.setCurrentVUser((IteratingVUser) this.getScriptVUser().getParentUser());
							tempFld=tempFld.replaceAll(" ", "");
							int appender=checkColumnExists(tempFld);
							String newTempFld;
							if(appender==0){
								newTempFld=tempFld;
							}else{
								newTempFld=tempFld+appender;
							}
							datatable.addColumn("Global",newTempFld.trim(),0);
							datatable.setValue("Global", 0, newTempFld.trim(),colorName);
							beginStep("[outputGridRowBgColor] Passed: Indentified column "+tempFld+ "and the captured cell value "+colorName+" stored in datatable");
							{
								getStepResult().isPassed();
							}endStep();
							retVal[i]=newTempFld.trim();
						}else{
							CapturePage();
							testFailure("outputting grid row color failed: Failed to identify color of "+tempFld);
						}
					}
				}else{
					beginStep("[outputGridRowBgColor] outputting grid row color failed: Failed to identify column "+tempFld);
					{
						web.window(e1BrowserWindow).capturePage();
						testFailure("outputting grid row color failed: Failed to identify column "+tempFld);
					}endStep();
					retVal[i]= "";
				}
				i++;
				info("Iteration"+i);
				}while(i<(param.length)-1);
			
		}
		info("Finished:Function outputGridRowBgColor");
		return retVal;
	}
	/************************************************************************************************************
	 * Function: clickGridRowAttachmentCol
	 * Description: This function will click the attachment column for the specified row of the grid 
	 * Created By: Varma
	 * Date: March 2011
	 * To be incorporated: Nil
	 * Input Parameters: 
	 * 		@param iIndex :Iindex of the grid in the webpage starting from 0.
	 * 		@param iRow :visible row index starting from 0
	 * Returns: 
	 * 		@return Nil
	 * **********************************************************************************************************
	 */

	public void clickGridRowAttachmentCol(@Arg("iIndex") int iIndex, @Arg("iRow") int iRow) throws Exception {
		info("Starting:Function clickGridRowAttachmentCol ");	
		checkFrame();
		String gridId = getGridObjReference(iIndex);
		// Checking if Grid object is returned successfully
		if(gridId!=null) { 
			//Checking for Valid Row 
			String[] output = web.document(e1Browser).executeJsFunction("getvisibleRowCount", gridId);
			int rowCount = Integer.parseInt(output[0]);
			if(iRow >(rowCount-1)){
				iRow=iRow+1;
				web.window(e1BrowserWindow).capturePage();
				beginStep("[clickGridRowAttachmentCol] Failed: Validating Grid Row "+ iRow + " and Grid only has " + rowCount +" row");
				{	
					testFailure("Validating grid to row " +iRow + "and Grid only has "+rowCount +"  row");
				}endStep();
				return;
			}
			int rowIndex = getRowIndexForVisibleRow(gridId,iRow);
			String[] ColIndex = web.document(e1Browser).executeJsFunction("clickGridAttachment", gridId,Integer.toString(rowIndex));
			//info(ColIndex[0]);
			web.image(e1Browser+"/web:form[@id='E1PaneForm']/web:img[@id='"+ColIndex[0]+"']").click();
			syncFrame();
		}
		info("Finished:Function clickGridRowAttachmentCol ");
	}

	/************************************************************************************************************
	 * Function: highlightLastGridRow  
	 * Description: This function highlights the last row of the grid by selecting radio button or checking the checkbox (Highlight refers to selecting the checkbox or radio button)
	 * Created By: Varma
	 * Date: March 2011
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *      @param iIndex - index of the grid in the webpage starting from 0,
	        @param sFieldName - 
	        @param sValue -                
	 * Returns: 
	 *      @return Nil
	 * **********************************************************************************************************
	 */
	public void highlightLastGridRow(@Arg("iIndex") int iIndex) throws Exception {
		info("Starting:Function highlightLastGridRow");
		String gridId, colIndex;
		checkFrame();
		String SelectColIndex,SelColIndex;
		int rowIndex, rowCount;

		gridId = getGridObjReference(iIndex);
		if (gridId != null) {
			rowCount = getGridRowCountByIndex(iIndex);
			if(rowCount!=0) {
				rowIndex = getRowIndexForVisibleRow(gridId, rowCount-1);

				SelColIndex=getColIndexForColName(gridId, "Sel");
				SelectColIndex=getColIndexForColName(gridId, "Select");

				if(SelectColIndex!=null||SelColIndex!=null){
					if(SelectColIndex!=null){
						colIndex=SelectColIndex;

						String cellVal[]=web.document(e1Browser).executeJsFunction("getGridCheckboxId",gridId,Integer.toString(rowIndex),colIndex);
						delay(2000);
						if(cellVal[1].equalsIgnoreCase("checkbox")){
							//DOMCheckbox chk=web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+cellVal[0]+"']");
							web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+cellVal[0]+"']").focus();
							web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+cellVal[0]+"']").check(true);
							info("Rowselector  found and selected for row "+(Integer.parseInt(""+(rowIndex))+1));

						}else{
							beginStep("[highlightLastGridRow] : column 'Select' is not a checkbox");
							{
								web.window(e1BrowserWindow).capturePage();
								highlightLastGridRowNormal(gridId,rowCount);
								//								testFailure("column 'Select' is not a checkbox");
							}endStep();
						}
					}

					else if(SelColIndex!=null){
						colIndex=SelColIndex;

						String cellVal[]=web.document(e1Browser).executeJsFunction("getGridCheckboxId",gridId,Integer.toString(rowIndex),colIndex);
						delay(2000);
						if(cellVal[1].equalsIgnoreCase("checkbox")){							
							web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+cellVal[0]+"']").focus();
							web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+cellVal[0]+"']").check(true);
							info("Rowselector  found and selected for row "+(Integer.parseInt(""+(rowIndex))+1));

						}else{
							beginStep("[highlightLastGridRow] : column 'Sel' is not a checkbox");
							{
								web.window(e1BrowserWindow).capturePage();
								highlightLastGridRowNormal(gridId,rowCount);
								//								testFailure("column 'Sel' is not a checkbox");
							}endStep();
						}
					}
				}else{
					highlightLastGridRowNormal(gridId,rowCount);
				}
			}
			info("Finished:Function highlightLastGridRow");						
		}				
	}


	/************************************************************************************************************
	 * Function: highlightLastGridRowNormal  
	 * Description: This function highlights the last row of the grid by selecting radio button or checking the checkbox (Highlight refers to selecting the checkbox or radio button)
	 * Created By: Praneetha
	 * Date: January 2012
	 * To be incorporated: Nil
	 * Input Parameters: 
	 *      @param iIndex - index of the grid in the webpage starting from 0,
	        @param sFieldName - 
	        @param sValue -                
	 * Returns: 
	 *      @return Nil
	 * **********************************************************************************************************
	 */
	private void highlightLastGridRowNormal(@Arg("gridId") String  gridId,@Arg("rowCount") int rowCount) throws Exception {

		String colObj[] = {null,null};
		setErrorRecovery(BasicErrorRecovery.ERR_GENERIC_ERROR_CODE, ErrorRecoveryAction.Ignore);
		for(int cnt=0;cnt<10;cnt++){
			try{
				colObj=web.document(e1Browser).executeJsFunction("highlightRowSelector", gridId,Integer.toString(rowCount-1));
				delay(2000);
			}catch(Exception e){};
			if((colObj[0]!=null)&&((colObj[0].length()!=0))){
				break;
			}
		}
		if((colObj[1]).equals("radio")){
			web.radioButton(e1Browser+"/web:form[@id='E1PaneForm']/web:input_radio[@id='"+colObj[0]+"']").click();
			info( "Row found & Clicked the selector radio button");
		}else if((colObj[1]).equals("checkbox")){
			//DOMCheckbox chk=web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+colObj[0]+"']");
			web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+colObj[0]+"']").focus();
			web.checkBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+colObj[0]+"']").check(true);
			info("Rowselector  found and selected for row "+rowCount);
		}else{
			getLogger().error("[highlightLastGridRow] Failed: row identification Failed: Grid has no rows");
			web.window(e1BrowserWindow).capturePage();
			beginStep("[highlightLastGridRow] Failed: row identification Failed: Grid has no rows");
			{
				testFailure("row identification Failed: Grid has no rows");
			} endStep();
		}
	}
	/************************************************************************************************************
	 * Function: validateGridRowColEnabled
	 * Description: This function will validate that the specified grid cells are enabled 
	 * Created By: Sravan
	 * Modified By: Anusha
	 * Date: April 2011
	 * To be incorporated: Nil
	 * Input Parameters:
	 *          @param iIndex : index of the grid in the webpage starting from 0
	 * 			@param iRow : visible row index of the specified row
	 * 			@param param :Col name that needs to be validated
	 * @return NA
	 * Example : validateGridRowColEnabled(0,0, "Current Billed Amount")
	 * **********************************************************************************************************

	 */public void validateGridRowColEnabled(@Arg("iIndex")int iIndex, @Arg("iRow")int iRow, @Arg("param")	String param) throws Exception {
		 info("Starting:Function validateGridRowColEnabled");
		 String params[] = Pattern.compile("[;]").split(param);
		 int prmCnt=params.length;
		 int rowIndex;
		 Boolean bIsError = false;
		 checkFrame();
		 String gridId=getGridObjReference(iIndex);
		 if(gridId!=null){
			 String rowcount[]=web.document(e1Browser).executeJsFunction("getvisibleRowCount",gridId);
			 int rowCount=Integer.parseInt(rowcount[0]);
			 if(iRow>(rowCount-1)){
				 getLogger().error("Validating Grid Row data for row "+iRow+1+"failed: Grid only has " + rowCount+ " rows.");
				 beginStep("[validateGridRowColEnabled] Validating Grid Row data for row "+iRow+1+"failed: Grid only has " + rowCount+ " rows.");
				 {
					 web.window(e1BrowserWindow).capturePage();
					 testFailure("Validating Grid Row data for row "+iRow+1+"failed: Grid only has " + rowCount+ " rows.");
				 }
				 endStep();
				 return;
			 }
			 rowIndex=getRowIndexForVisibleRow(gridId, iRow);
			 for(int idx=0;idx<prmCnt;idx++){
				 bIsError=false;
				 String colIndex=getColIndexForColName(gridId, params[idx]);
				 if(colIndex!=null){
					 String[] className={null};
					 try{
						 //clickGridRowCol(iIndex, iRow, colName[0]);
						 web.document(e1Browser).executeJsFunction("clickGridAtRowCol", gridId.toString(),""+rowIndex,colIndex);
					 }catch(Exception e)
					 {e.printStackTrace();}	
					 try{
						 //clickGridRowCol(iIndex, iRow, colName[0]);
						 className=web.document(e1Browser).executeJsFunction("getGridCellClassName",gridId,Integer.toString(rowIndex),colIndex);
					 }catch(Exception e)
					 {//e.printStackTrace();
					 }
					 if(className[0]!=null){
						 //if(className[0].equalsIgnoreCase("JSTextfield")){
						 if(className[0].contains("JSTextfield")){
							 info("Validating Enabled Cell, Column: " + params[idx] + " is enabled.");
							 beginStep("validateGridRowColEnabled");
							 {
								 getStepResult().isPassed();
							 }
							 endStep();
						 }else if(className[0].equalsIgnoreCase("null")){ //For Checkbox
							 String[] sCellValue = web.document(e1Browser).executeJsFunction("getGridRowCellValue", gridId,Integer.toString(rowIndex),colIndex);
							 String sCellData = sCellValue[0];
							 info("cell value = "+sCellValue[0]);
							 if(sCellValue[0].equalsIgnoreCase("1") ||sCellValue[0].equalsIgnoreCase("0")){
								 String[] bChecked = web.document(e1Browser).executeJsFunction("isGridCellChecked",gridId,Integer.toString(rowIndex),colIndex);
								 info("bChecked" +bChecked[0]);
								 if(bChecked[0].equalsIgnoreCase("true") || bChecked[0].equalsIgnoreCase("false")){
									 String[] bDisabled = web.document(e1Browser).executeJsFunction("isGridCheckboxDisabled",gridId,Integer.toString(rowIndex),colIndex);

									 if(bDisabled[0].equalsIgnoreCase("false")){
										 //if("true".equalsIgnoreCase(sCellData.trim()) || "false".equalsIgnoreCase(sCellData.trim())){
										 info("Validating Disabled Cell, Column: " + params[idx] + " is disabled.");
										 /*beginStep("ValidateGridRowColEnabled");
										 {
											 getStepResult().isPassed();
										 }
										 endStep();
										 //}*/
									 } else{
										 bIsError=true;
									 }
								 } else{

									 String[] bDisabled = web.document(e1Browser).executeJsFunction("isGridCellDisabled",gridId,Integer.toString(rowIndex),colIndex);
									 info("Gridcell disabled = "+bDisabled[0]);
									 if(bDisabled[0].equalsIgnoreCase("false")){
										 info("Validating Enabled Cell, Column: " + params[idx] + " is enabled.");
										 /* beginStep("validateGridRowColEnabled");
										 {
											 getStepResult().isPassed();
										 }
										 endStep();*/
									 }else{
										 bIsError =true;
									 }
								 }
							 }else if(sCellValue[0].trim().matches("[a-zA-Z0-9#]*")) {
								 //if(web.exists(e1Browser+"/web:div[@id='gce*'",10)){
								 String[] isDisabled = web.document(e1Browser).executeJsFunction("isGridCellDisabled", gridId,Integer.toString(rowIndex),colIndex);
								 info("Gridcell disabled = "+isDisabled[0]);
								 //info(params[idx]+" gridobj in div len = "+oGridObj.size());
								 //String[] sGridID = web.document(e1Browser).executeJsFunction("getGridCellId",gridId,Integer.toString(rowIndex),colIndex);
								 if(isDisabled[0].equalsIgnoreCase("false")){
									 info("Validating Enabled Cell, Column: " + params[idx] + " is Enabled.");
									 /* beginStep("validateGridRowColEnabled");
									 {
										 getStepResult().isPassed();
									 }endStep();*/
									 //}
								 }else{
									 bIsError =true;
								 }
							 }else{
								 bIsError =true;
							 }
						 }else{
							 bIsError =true;
						 }
					 }
					 if(bIsError){
						 web.window(e1BrowserWindow).capturePage();
						 beginStep("[validateGridRowColEnabled] failed: Column " + params[idx] + "is not enabled");
						 {

							 testFailure("validateGridRowColEnabled failed: Column " + params[idx] + "is not enabled");
						 }
						 endStep();
						 //info("Finished:Function validateGridRowColEnabled");
					 }

				 }
				 else{
					 getLogger().error("Column identification failed: unable to identify column " + params[idx] + ".");
					 web.window(e1BrowserWindow).capturePage();
					 beginStep("[validateGridRowColEnabled] Column identification failed: unable to identify column " + params[idx] + ".");
					 {

						 testFailure("Column identification failed: unable to identify column " + params[idx] + ".");
					 }
					 endStep();
					 //info("Finished:Function ValidateGridRowColEnabled");
					 //return;
				 }
			 }
		 }
		 valCount=valCount+prmCnt;
		 info("Finished:Function ValidateGridRowColEnabled");
	 }
		

	 /************************************************************************************************************
	  * Function: validateGridRowColDisabled
	  * Description: This function will validate that the specified grid cells are disabled i.e. can not take input 
	  * Created By: Sravan
	  * Date: April 2011
	  * To be incorporated: Nil
	  * Input Parameters:
	  *          @param iIndex : index of the grid in the webpage starting from 0
	  * 			@param iRow : visible row index of the specified row
	  * 			@param param : Col name that needs to be validated
	  * @return NA
	  * Example : validateGridRowColDisabled(0,0,"G/LDate;AccountNumber");
	  * **********************************************************************************************************
	  */
	 public void validateGridRowColDisabled(@Arg("iIndex") int iIndex, @Arg("iRow") int iRow, @Arg("param") String param) throws Exception {
		 info("Starting:Function ValidateGridRowColDisabled");
		 
		 String params[] = Pattern.compile("[;]").split(param);
		 int prmCnt=params.length;
		 int rowIndex;
		 boolean bIsError = false,isGridColIntoView=false,isGridRowIntoView=false;
		 checkFrame();
		 String gridId=getGridObjReference(iIndex);
		 if(gridId!=null){
			 String rowcount[]=web.document(e1Browser).executeJsFunction("getvisibleRowCount",gridId);
			 int rowCount=Integer.parseInt(rowcount[0]);
			 //info(""+rowCount);
			 if(iRow>(rowCount-1)){

				 getLogger().error("Validating Grid Row data for row "+iRow+1+"failed: Grid only has " + rowCount+ " rows.");
				 beginStep("[validateGridRowColDisabled] Validating Grid Row data for row "+iRow+1+"failed: Grid only has " + rowCount+ " rows.");
				 {
					 web.window(e1BrowserWindow).capturePage();
					 testFailure("Validating Grid Row data for row "+iRow+1+"failed: Grid only has " + rowCount+ " rows.");
				 }
				 endStep();
				 return;
			 }
			 rowIndex=getRowIndexForVisibleRow(gridId, iRow);
			 isGridRowIntoView = scrollGridRowIntoView(gridId,rowIndex);
			 for(int idx=0;idx<prmCnt;idx++){
				incrementValidationCount(1);
				 bIsError=false;
				 String colIndex=getColIndexForColName(gridId, params[idx]);
				 isGridColIntoView = scrollGridColumnIntoView(gridId,rowIndex+"", colIndex);
				 if(colIndex!=null){
					 //String[] className=web.document(e1Browser).executeJsFunction("getGridCellClassNameWithoutScroll",gridId,Integer.toString(rowIndex),colIndex);
					 String[] className={null};
					 try{
						 web.document(e1Browser).executeJsFunction("clickGridAtRowCol", gridId.toString(),""+rowIndex,colIndex);
					 }catch(Exception e)
					 {e.printStackTrace();}	
					 try{
						 className=web.document(e1Browser).executeJsFunction("getGridCellClassName",gridId,Integer.toString(rowIndex),colIndex);
					 }catch(Exception e)
					 {//e.printStackTrace();
					 }
					  if(className[0]!=null){
                                   if(className[0].equalsIgnoreCase("JSTextfieldDisabled")){
                                                   info("Validating Disabled Cell, Column: " + params[idx]+ " is disabled.");
                                                   continue; 
                                              }else if(className[0].equalsIgnoreCase("null")){ //For Checkbox                                                      
                                                   String[] sType = web.document(e1Browser).executeJsFunction("getElementType",gridId,Integer.toString(rowIndex),colIndex);
                                                   if((sType[0].equalsIgnoreCase("checkbox")) && (!sType[0].equalsIgnoreCase("null"))){
                                                         String[] bDisabled = web.document(e1Browser).executeJsFunction("isGridCheckboxDisabled",gridId,Integer.toString(rowIndex),colIndex);
                                                         if(bDisabled[0].equalsIgnoreCase("true")){                                                                  
                                                                      info("Validating Disabled Cell, Column: " + params[idx]+ " is disabled.");
                                                                     continue;                                                                    
                                                          }else{
                                                               web.window(e1BrowserWindow).capturePage();
                                                               testFailure("validateGridRowColDisabled failed: Column " + params[idx]+ "is not disabled in the row "+iRow);
                                                         }
                                                   }else{
                                                         
                                                         String[] isDisabled = web.document(e1Browser).executeJsFunction("isGridCellDisabled", gridId,Integer.toString(rowIndex),colIndex);
                                                         if(isDisabled[0].equalsIgnoreCase("true")){
                                                               info("Validating Disabled Cell, Column: " + params[idx] + " is disabled.");
                                                         }else{
                                                               web.window(e1BrowserWindow).capturePage();
                                                               testFailure("validateGridRowColDisabled failed: Column " + params[idx]+ "is not disabled in the row "+iRow);
                                                         }
                                                   }      
                                             }else{
                                                   String[] isDisabled = web.document(e1Browser).executeJsFunction("isGridCellDisabled", gridId,Integer.toString(rowIndex),colIndex);
                                                   if(isDisabled[0].equalsIgnoreCase("true")){
                                                         info("Validating Disabled Cell, Column: " + params[idx] + " is disabled.");
                                                   }else{
                                                          web.window(e1BrowserWindow).capturePage();
                                                          testFailure("validateGridRowColDisabled failed: Column " + params[idx]+ "is not disabled in the row "+iRow);
                                                   }
                                             }
                                       }else{
                                               web.window(e1BrowserWindow).capturePage();
											   testFailure("validateGridRowColDisabled failed: ClassName not defined for Column " + params[idx]+ " in the row "+iRow);
                                             }
					 }else{
					 
						 web.window(e1BrowserWindow).capturePage();
						 testFailure("Column identification failed: unable to identify column " + params[idx] + ".");
					 }
				 }
			 }else{
                        web.window(e1BrowserWindow).capturePage();
                        testFailure("Grid with ID" +gridId+ " not found");
                   }
		
		 		 info("Finished:Function validateGridRowColDisabled");
	 }
	 /************************************************************************************************************
	  * Function: validateGridRowColUnEditable
	  * Description: This function can be used to validate that an entire row of a grid is non-editable/disabledCreated 
	  * By: Satya Ravi Kuamr Varma
	  * Date: February 2013
	  * To be incorporated: Nil
	  * Input Parameters:
	  * @param iIndex :Iindex of the grid in the webpage starting from 0.
	  * @param iRow :visible row index starting from 0Returns:
	  * @return Nil
	  * **********************************************************************************************************
	  */
	 public void validateGridRowColUnEditable(@Arg("iIndex") int iIndex, @Arg("iRow") int iRow, String colName) throws Exception {
		 info("Starting:Function validateGridRowColUnEditable");
		 int rowIndex, rowCount,flag=0;
		 checkFrame();

		 String gridId = getGridObjReference(iIndex); 
		 // Checking if Grid object is returned successfully
		 if(gridId!=null) 
		 {  
			 //info(gridId);//Checking for Valid Row 
			 String[] output = web.document(e1Browser).executeJsFunction("getvisibleRowCount", gridId);
			 rowCount = Integer.parseInt(output[0]);
			 //info(""+rowCount);
			 if(iRow >=rowCount){
				 iRow=iRow+1;
				 web.window(e1BrowserWindow).capturePage();
				 beginStep("[validateGridRowColUnEditable] Failed:Validating Grid Row: "+ iRow + " and Grid only has " + rowCount +" row");
				 {           
					 testFailure("Validating Grid Row:" +iRow + "and Grid only has "+rowCount +"  row");
				 }endStep();
				 return;
			 }


			 rowIndex = getRowIndexForVisibleRow(gridId, iRow);
			 String colIndex=getColIndexForColName(gridId, colName);
			 if(colIndex!=null){
				 String [] className = null;
				 try{
					 //clickGridRowCol(iIndex, iRow, colName[0]);
					 web.document(e1Browser).executeJsFunction("clickGridAtRowCol", gridId.toString(),""+rowIndex,colIndex);
				 }catch(Exception e)
				 {e.printStackTrace();} 
				 try{
					 //clickGridRowCol(iIndex, iRow, colName[0]);
					 className=web.document(e1Browser).executeJsFunction("getGridCellClassName",gridId,Integer.toString(rowIndex),colIndex);
				 }catch(Exception e)
				 {//e.printStackTrace();
				 }
				 if(className[0]!=null){
					 if(className[0].equalsIgnoreCase("JSTextfieldDisabled")){
						 beginStep("validateGridRowColUnEditable");
						 {
							 getStepResult().isPassed();
						 }
						 endStep();
					 }else{ //For Checkbox
						 String[] sCellValue = web.document(e1Browser).executeJsFunction("getGridRowCellValue", gridId,Integer.toString(rowIndex),colIndex);
						 String sCellData = sCellValue[0];
						 sCellValue[0]=sCellValue[0].replaceAll(" ", "");
						 sCellValue[0]=sCellValue[0].replaceAll("-", "");
						 sCellValue[0]=sCellValue[0].replaceAll("=", "");
						 if(sCellValue[0].equalsIgnoreCase("1") ||sCellValue[0].equalsIgnoreCase("0")){
							 String[] bChecked = web.document(e1Browser).executeJsFunction("isGridCellChecked",gridId,Integer.toString(rowIndex),colIndex);
							 //info("bChecked" +bChecked[0]);
							 if(bChecked[0].equalsIgnoreCase("true") || bChecked[0].equalsIgnoreCase("false")){
								 String[] bDisabled = web.document(e1Browser).executeJsFunction("isGridCheckboxDisabled",gridId,Integer.toString(rowIndex),colIndex);
								 if(bDisabled[1].equalsIgnoreCase("false")){
									 beginStep("validateGridRowColUnEditable");
									 {
										 getStepResult().isPassed();
									 }
									 endStep();
									 //}
								 } else{
									 //bIsError=true;
									 web.window(e1BrowserWindow).capturePage();
									 testFailure("validateGridRowColUnEditable failed: Column " + colName+ " is editable");
									 return;

								 }
							 } else{
								 String[] isDisabled = web.document(e1Browser).executeJsFunction("isGridCellDisabled", gridId,Integer.toString(rowIndex),colIndex);
								 if(isDisabled[1].equalsIgnoreCase("false")){
									 beginStep("validateGridRowColUnEditable");
									 {
										 getStepResult().isPassed();
									 }endStep();
									 //}
								 }else{
									 web.window(e1BrowserWindow).capturePage();
									 testFailure("validateGridRowColUnEditable failed: Column " + colName+ " is editable");
									 return;
								 }

							 }
						 }else if((sCellValue[0].trim().matches("[a-zA-Z_0-9#]+"))) {
							 String[] isDisabled = web.document(e1Browser).executeJsFunction("isGridCheckboxDisabled", gridId,Integer.toString(rowIndex),colIndex);
							 try{
							 if(isDisabled[1].equalsIgnoreCase("false")){
								 beginStep("validateGridRowColUnEditable");
								 {
									 getStepResult().isPassed();
								 }endStep();

							 }else{
								 web.window(e1BrowserWindow).capturePage();
								 testFailure("validateGridRowColUnEditable failed: Column " + colName+ " is editable");
								 return;
							 }}catch(Exception e){
								 beginStep("validateGridRowColUnEditable:Link is editable");
								 {
									 getStepResult().isPassed();
								 }endStep();
							 }
						 }else{
							 web.window(e1BrowserWindow).capturePage();
							 testFailure("validateGridRowColUnEditable failed: Column " + colName+ " is editable");
							 return;
						 }
					 }
				 }
			 }else{
				 beginStep("[validateGridRowColUnEditable] Column identification failed: unable to identify column " + colName + ".");
				 {
					 web.window(e1BrowserWindow).capturePage();
					 testFailure("Column identification failed: unable to identify column " + colName + ".");
				 }
				 endStep();
				 info("Finished:Function validateGridRowColUnEditable");
			 }
		 }
		 valCount=valCount+1;
		 info("Finished:Function validateGridRowColUnEditable ");
	 }
	 /************************************************************************************************************
	  * Function: validateGridRowUnEditable
	  * Description: This function can be used to validate that an entire row of a grid is non-editable/disabledCreated 
	  * By: Satya Ravi Kuamr Varma
	  * Date: February 2013
	  * To be incorporated: Nil
	  * Input Parameters:
	  * @param iIndex :Iindex of the grid in the webpage starting from 0.
	  * @param iRow :visible row index starting from 0Returns:
	  * @return Nil
	  * **********************************************************************************************************
	  */
	 public void validateGridRowUnEditable(@Arg("iIndex") int iIndex, @Arg("iRow") int iRow) throws Exception {
		 info("Starting:Function validateGridRowUnEditable");
		 int rowIndex, rowCount,flag=0;
		 checkFrame();
		 String gridId = getGridObjReference(iIndex); 
		 // Checking if Grid object is returned successfully
		 if(gridId!=null){  
			 //info(gridId);//Checking for Valid Row 
			 String[] output = web.document(e1Browser).executeJsFunction("getvisibleRowCount", gridId);
			 rowCount = Integer.parseInt(output[0]);
			 //info(""+rowCount);
			 if(iRow >=rowCount){
				 iRow=iRow+1;
				 web.window(e1BrowserWindow).capturePage();
				 beginStep("[validateGridRowUnEditable] Failed:Validating Grid Row: "+ iRow + " and Grid only has " + rowCount +" row");
				 {           
					 testFailure("Validating Grid Row:" +iRow + "and Grid only has "+rowCount +"  row");
				 }endStep();
				 return;
			 }
			 String[] output1 = web.document(e1Browser).executeJsFunction("getColLen", gridId);
			 int colCount=Integer.parseInt(output1[0]);
			 colCount= colCount-1;

			 rowIndex = getRowIndexForVisibleRow(gridId, iRow);
			 for(int startCol=0;startCol<=colCount;startCol++)
			 {
				 String[] colName = web.document(e1Browser).executeJsFunction("getColLabel", gridId,Integer.toString(startCol));
				 info("colname"+colName[0]);
				 if(colName[0]!=null)
				 {
					 String[] colIsHidden = web.document(e1Browser).executeJsFunction("gridCellIsHidden", gridId,Integer.toString(startCol));
					 if(colIsHidden[0].equalsIgnoreCase("true")){
						 continue;
					 }
					 String colIndex=getColIndexForColName(gridId, colName[0]);
					 if(colIndex!=null){
						 String [] className;
						 try{
							 //clickGridRowCol(iIndex, iRow, colName[0]);
							 web.document(e1Browser).executeJsFunction("clickGridAtRowCol", gridId.toString(),""+rowIndex,colIndex);
						 }catch(Exception e)
						 {e.printStackTrace();}	
						 try{
							 //clickGridRowCol(iIndex, iRow, colName[0]);
							 className=web.document(e1Browser).executeJsFunction("getGridCellClassName",gridId,Integer.toString(rowIndex),colIndex);
						 }catch(Exception e)
						 {//e.printStackTrace();
							 startCol=startCol-1;
							 continue;}

						 if(className[0]!=null){
							 if(className[0].equalsIgnoreCase("JSTextfieldDisabled")){
								 beginStep("validateGridRowUnEditable");
								 {
									 getStepResult().isPassed();
								 }
								 endStep();
							 }else{ //For Checkbox
								 String[] sCellValue = web.document(e1Browser).executeJsFunction("getGridRowCellValue", gridId,Integer.toString(rowIndex),colIndex);
								 String sCellData = sCellValue[0];
								 sCellValue[0]=sCellValue[0].replaceAll(" ", "");
								 sCellValue[0]=sCellValue[0].replaceAll("-", "");
								 sCellValue[0]=sCellValue[0].replaceAll("=", "");
								 if(sCellValue[0].equalsIgnoreCase("1") ||sCellValue[0].equalsIgnoreCase("0")){
									 String[] bChecked = web.document(e1Browser).executeJsFunction("isGridCellChecked",gridId,Integer.toString(rowIndex),colIndex);
									 //info("bChecked" +bChecked[0]);
									 if(bChecked[0].equalsIgnoreCase("true") || bChecked[0].equalsIgnoreCase("false")){
										 String[] bDisabled = web.document(e1Browser).executeJsFunction("isGridCheckboxDisabled",gridId,Integer.toString(rowIndex),colIndex);
										 if(bDisabled[1].equalsIgnoreCase("false")){
											 beginStep("validateGridRowUnEditable");
											 {
												 getStepResult().isPassed();
											 }
											 endStep();
											 //}
										 } else{
											 web.window(e1BrowserWindow).capturePage();
											 testFailure("validateGridRowUnEditable failed: Column " + colName[0]+ " is editable");
											 return;

										 }
									 } else{
										 String[] isDisabled = web.document(e1Browser).executeJsFunction("isGridCellDisabled", gridId,Integer.toString(rowIndex),colIndex);
										 if(isDisabled[1].equalsIgnoreCase("false")){
											 beginStep("validateGridRowUnEditable");
											 {
												 getStepResult().isPassed();
											 }endStep();
											 //}
										 }else{
											 web.window(e1BrowserWindow).capturePage();
											 testFailure("validateGridRowUnEditable failed: Column " + colName[0]+ " is editable");
											 return;
										 }

									 }
								 }else if(sCellValue[0].trim().matches("[a-zA-Z_0-9#]+")) {
									 String[] isDisabled = web.document(e1Browser).executeJsFunction("isGridCheckboxDisabled", gridId,Integer.toString(rowIndex),colIndex);
									 try{
									 if(isDisabled[1].equalsIgnoreCase("false")){
										 beginStep("validateGridRowUnEditable");
										 {
											 getStepResult().isPassed();
										 }endStep();

									 }else{
										 web.window(e1BrowserWindow).capturePage();
										 testFailure("validateGridRowUnEditable failed: Column " + colName[0]+ " is editable");
										 return;
									 }}catch(Exception e){
										 beginStep("validateGridRowUnEditable:Link on the cell.Cell not directly editable");
										 {
											 getStepResult().isPassed();
										 }endStep();
									 }
								 }else{
									 web.window(e1BrowserWindow).capturePage();
									 testFailure("validateGridRowUnEditable failed: Column " + colName[0]+ " is editable");
									 return;
								 }
							 }
						 }
					 }else{
						 beginStep("[validateGridRowUnEditable] Column identification failed: unable to identify column " + colName[0] + ".");
						 {
							 web.window(e1BrowserWindow).capturePage();
							 testFailure("Column identification failed: unable to identify column " + colName[0] + ".");
						 }
						 endStep();
						 info("Finished:Function validateGridRowUnEditable");
					 }
				 }
			 }
		 }
		 valCount=valCount+1;
		 info("Finished:Function validateGridRowUnEditable ");
	 }

	 /************************************************************************************************************
	  * Function: validateGridRowDisabled
	  * Description: This function can be used to validate that an entire row of a grid is non-editable/disabled
	  * Created By: Neha
	  * Modified By: Sravan
	  * Date: April 2011
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param iIndex :Iindex of the grid in the webpage starting from 0.
	  * 		@param iRow :visible row index starting from 0
	  * Returns: 
	  * 		@return Nil
	  * **********************************************************************************************************
	  */
	 public void validateGridRowDisabled(@Arg("iIndex") int iIndex, @Arg("iRow") int iRow) throws Exception {
         info("Starting:Function validateGridRowDisabled");
         int rowIndex, rowCount,flag=0;
         boolean bIsError;
         checkFrame();
         String gridId = getGridObjReference(iIndex); 
          // Checking if Grid object is returned successfully
         if(gridId!=null){                  
               String[] output = web.document(      e1Browser).executeJsFunction("getvisibleRowCount", gridId);
               rowCount = Integer.parseInt(output[0]);
               //info(""+rowCount);
               if(iRow >=rowCount){
                     iRow=iRow+1;
                     web.window(e1BrowserWindow).capturePage();
                     beginStep("[validateGridRowDisabled] Failed:Validating Grid Row: "+ iRow + " and Grid only has " + (rowCount+1) +" row");
                     {          
                           testFailure("Validating Grid Row:" +iRow + "and Grid only has "+(rowCount+1) +"  row");
                     }endStep();
                     return;
               }
               String[] output1 = web.document(e1Browser).executeJsFunction("getColLen", gridId);
               int colCount=Integer.parseInt(output1[0]);
               colCount= colCount-1;

               rowIndex = getRowIndexForVisibleRow(gridId, iRow);
               for(int startCol=0;startCol<=colCount;startCol++){
               incrementValidationCount(1);
                     if(startCol!=0){
                           if((startCol==100)||(startCol==200)||(startCol==300)){
                                 browserRefresh();
                           }
                     }
                     String[] colName = web.document(e1Browser).executeJsFunction("getColLabel", gridId,Integer.toString(startCol));
                     info("colname: "+colName[0]);
                     if(colName[0]!=null){
                           //colIndex=Integer.toString(ivx);
                           String[] colIsHidden = web.document(e1Browser).executeJsFunction("gridCellIsHidden", gridId,Integer.toString(startCol));
                           if(colIsHidden[0].equalsIgnoreCase("true")){
                                 continue;
                           }
                           bIsError=false;
                           
                           String colIndex=getColIndexForColName(gridId, colName[0]);
                           if(!isGridRowIntoView){
                                 isGridColIntoView = scrollGridColumnIntoView(gridId,colIndex);
                                 isGridRowIntoView = scrollGridRowIntoView(gridId,rowIndex); 
                            }
                           isGridColIntoView = scrollGridColumnIntoView(gridId,colIndex);
                           if(!isGridColIntoView){
                                   isGridColIntoView = scrollGridColumnIntoView(gridId,colIndex);      
                             }   
                           String[] className={null};
                           if(colIndex!=null){
                                 try{
                                       web.document(e1Browser).executeJsFunction("clickGridAtRowCol", gridId.toString(),""+rowIndex,colIndex);
                                 }catch(Exception e)
                                 {
                                       //e.printStackTrace();
                                 }    
                                 try{                                       
                                   className=web.document(e1Browser).executeJsFunction("getGridCellClassName",gridId,Integer.toString(rowIndex),colIndex);
                                       
                                  }catch(Exception e) {
                                       //e.printStackTrace();                                      
                                  }    

                                       if(className[0]!=null){
                                             if(className[0].equalsIgnoreCase("JSTextfieldDisabled")){
                                                   info("Validating Disabled Cell, Column: " + colName[0]+ " is disabled.");
                                                   continue; 
                                              }else if(className[0].equalsIgnoreCase("null")){ //For Checkbox                                                      
                                                   String[] sType = web.document(e1Browser).executeJsFunction("getElementType",gridId,Integer.toString(rowIndex),colIndex);
                                                   if((sType[0].equalsIgnoreCase("checkbox")) && (!sType[0].equalsIgnoreCase("null"))){
                                                         String[] bDisabled = web.document(e1Browser).executeJsFunction("isGridCheckboxDisabled",gridId,Integer.toString(rowIndex),colIndex);
                                                         if(bDisabled[0].equalsIgnoreCase("true")){                                                                  
                                                                      info("Validating Disabled Cell, Column: " + colName[0]+ " is disabled.");
                                                                     continue;                                                                    
                                                          }else{
                                                               web.window(e1BrowserWindow).capturePage();
                                                               testFailure("validateGridRowDisabled failed: Column " + colName[0]+ "is not disabled in the row "+iRow);
                                                         }
                                                   }else{
                                                         
                                                         String[] isDisabled = web.document(e1Browser).executeJsFunction("isGridCellDisabled", gridId,Integer.toString(rowIndex),colIndex);
                                                         if(isDisabled[0].equalsIgnoreCase("true")){
                                                               info("Validating Disabled Cell, Column: " + colName[0] + " is disabled.");
                                                         }else{
                                                               web.window(e1BrowserWindow).capturePage();
                                                               testFailure("validateGridRowDisabled failed: Column " + colName[0]+ "is not disabled in the row "+iRow);
                                                         }
                                                   }      
                                             }else{
                                                   String[] isDisabled = web.document(e1Browser).executeJsFunction("isGridCellDisabled", gridId,Integer.toString(rowIndex),colIndex);
                                                   if(isDisabled[0].equalsIgnoreCase("true")){
                                                         info("Validating Disabled Cell, Column: " + colName[0] + " is disabled.");
                                                   }else{
                                                          web.window(e1BrowserWindow).capturePage();
                                                          testFailure("validateGridRowDisabled failed: Column " + colName[0]+ "is not disabled in the row "+iRow);
                                                   }
                                             }
                                       }else{
                                               web.window(e1BrowserWindow).capturePage();
											   testFailure("validateGridRowDisabled failed: ClassName not defined for Column " + colName[0]+ " in the row "+iRow);
                                             }
                                 
                                 }
                                 }else{
                                       web.window(e1BrowserWindow).capturePage();
                                       testFailure("Column identification failed: unable to identify column " + colName[0] + ".");
                                 }
                                 }
                                 }else{
                                       web.window(e1BrowserWindow).capturePage();
                                       testFailure("Grid with ID" +gridId+ " not found");
                                 }
                                 info("Finished:Function validateGridRowDisabled ");
                       }

	 /************************************************************************************************************
	  * Function: ValidateGridRowBoldText
	  * Description: This function is used to validate text of a grid row as Bold 
	  * Created By: Neha
	  * Date: March 2011
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param iIndex :Index of the Grid(webTable)If there is multiple grids on a page, the index starts with 0 from top to bottom.
	  * 		@param iRow :visible row index starting from 0
	  * Returns: 
	  * 		@return Nil
	  * **********************************************************************************************************
	  */
	 public void validateGridRowBoldText(@Arg("iIndex") int iIndex, @Arg("iRow") int iRow) throws Exception {
		 info("Starting:Function validateGridRowBoldText");
		 int rowIndex, rowCount, matchingRow, idx;
		 checkFrame();
		 String gridId = getGridObjReference(iIndex); 
		 //info(gridId);
		 // Checking if Grid object is returned successfully
		 if(gridId!=null) {   //Checking for Valid Row 
			 String[] output = web.document(	e1Browser).executeJsFunction("getvisibleRowCount", gridId);
			 rowCount = Integer.parseInt(output[0]);
			 //info(rowCount+"\n"+iRow);
			 if(iRow >=rowCount){
				 iRow=iRow+1;
				 web.window(e1BrowserWindow).capturePage();
				 beginStep("[ValidateGridRowBoldText] Failed:Validating Grid Row: "+ iRow + " and Grid only has " + rowCount +" row");
				 {	
					 testFailure("Validating Grid Row:" +iRow + "and Grid only has "+rowCount +"  row");
				 }endStep();
				 return;
			 }
			 String[] colName = web.document(e1Browser).executeJsFunction("getColLabel", gridId,"3");
			 //info(colName[0]);
			 String colIndex = getColIndexForColName(gridId, colName[0]);
			 rowIndex = getRowIndexForVisibleRow(gridId, iRow);
			 String[] cellOuterHTML = web.document(e1Browser).executeJsFunction("gridCellOuterHTML",gridId,Integer.toString(rowIndex), colIndex);
			 //info(cellOuterHTML[0]);
			 if(!cellOuterHTML[0].toLowerCase().contains("font-weight: bold")) {
				 getLogger().error("[ValidateGridRowBoldText] Failed:Validating Bold Text:Text is not Bold for the Grid Row");
				 web.window(e1BrowserWindow).capturePage();
				 beginStep("[ValidateGridRowBoldText] Failed:Validating Bold Text:Text is not Bold for the Grid Row ");
				 {	
					 testFailure("Validating Bold Text:Text is not Bold for the Grid Row ");
				 }endStep();
			 } else{
				 info("Validating Bold Text: Text is Bold for the Grid Row");
			 }
		 }
		 valCount=valCount+1;
		 info("Finished:Function ValidateGridRowBoldText ");
	 }

	 /************************************************************************************************************
	  * Function: validateGridRowStrikethrough
	  * Description: This function is used to validate text of a grid row as Bold 
	  * Created By: Neha
	  * Modified By: Sravan (written condition for hidden columns)
	  * Date: March 2011
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param iIndex :Iindex of the grid in the webpage starting from 0.
	  * 		@param iRow :visible row index starting from 0
	  * Returns: 
	  * 		@return Nil
	  * **********************************************************************************************************
	  */

	 public void validateGridRowStrikethrough(@Arg("iIndex") int iIndex, @Arg("iRow") int iRow) throws Exception {
		 info("Starting:Function validateGridRowStrikethrough");
		 int rowIndex, rowCount;
		 checkFrame();
		 String gridId = getGridObjReference(iIndex); 
		 // Checking if Grid object is returned successfully
		 if(gridId!=null) 		{   //Checking for Valid Row 
			 String[] output = web.document(	e1Browser).executeJsFunction("getvisibleRowCount", gridId);
			 rowCount = Integer.parseInt(output[0]);
			 if(iRow >=rowCount){
				 iRow=iRow+1;
				 web.window(e1BrowserWindow).capturePage();
				 beginStep("[validateGridRowStrikethrough] Failed:Validating Grid Row: "+ iRow + " and Grid only has " + rowCount +" row");
				 {		
					 testFailure("Validating Grid Row:" +iRow + "and Grid only has "+rowCount +"  row");
				 }endStep();
				 return;
			 }
			 String[] output1 = web.document(e1Browser).executeJsFunction("getColLen", gridId);
			 int colCount=Integer.parseInt(output1[0]);
			 //colCount= colCount-1;
			 int  tempcolCnt=colCount; 
			 String colIndex,colName[];
			 do{
				 tempcolCnt=tempcolCnt-1;
				 colName = web.document(e1Browser).executeJsFunction("getColLabel", gridId,Integer.toString(tempcolCnt));
				 colIndex = getColIndexForColName(gridId, colName[0]);
			 }while(colIndex==null);
			 rowIndex = getRowIndexForVisibleRow(gridId, iRow);
			 String[] strikethroughState = web.document(e1Browser).executeJsFunction("applyStrikeThrough", gridId,Integer.toString(rowIndex),colIndex);
			 String strikeValidation ="False";
			 web.window(e1BrowserWindow).capturePage();
			 if(strikethroughState[0].equals(strikeValidation)) {
				 beginStep("[validateGridRowStrikethrough] Failed:Cancel unsuccessful Line has not been Cancelled");
				 {	
					 web.window(e1BrowserWindow).capturePage();
					 testFailure("Cancel unsuccessful Line has not been Cancelled");
				 }endStep();
			 } else {
				 info("Confirm Cancel :Line has been Cancelled");
				 beginStep("[validateGridRowStrikethrough]: Line has been Cancelled", 0);
				 {
					 getStepResult().isPassed();
				 }endStep();
			 }
		 }
		 valCount=valCount+1;
		 info("Finished:Function validateGridRowStrikethrough ");
	 }
	 /************************************************************************************************************
	  * Function: outputGridRowData
	  * Description: This function will capture the contents of multiple cells 
	  * 				of specified row of the grid  in datatable.
	  * Created By: Sravan
	  * Date: March 2011
	  * To be incorporated: Nil
	  * Input Parameters:
	  * 			@param iIndex : index of the grid in the webpage starting from 0
	  * 			@param iRow : visible row index of the specified row
	  * 			@param sParam : semicolon separated columnheaders
	  * Returns:
	  * 			@return Column Names in datatable
	  * **********************************************************************************************************
	  */
	 public String[] outputGridRowData(@Arg("iIndex") int iIndex, @Arg("iRow") int iRow, @Arg("sParam") String sParam)throws Exception {
		 info("Starting:Function outputGridRowData");
		 String param[] = Pattern.compile("[;]").split(sParam);
		 int rowIndex;
		 String gridId,colIndex,fieldVal;
		 String retArr[]=new String[param.length];
		 if (!bDB) {
			 checkFrame();
			 gridId=getGridObjReference(iIndex);
			 if(gridId!=null){
				 String rowcount[]=web.document(e1Browser).executeJsFunction("getvisibleRowCount",gridId);

				 int rowCount = 0;
				 try{rowCount=Integer.parseInt(rowcount[0]);}catch (NumberFormatException e) {
					 warn("numberformat exception "+rowcount[0]);
				 }
				 if(iRow>(rowCount-1)){
					 beginStep("[outputGridRowData] outputting grid row data failed: Grid only has " + rowCount+ " rows.");
					 {
						 web.window(e1BrowserWindow).capturePage();
						 testFailure("outputting grid row data failed: Grid only has " + rowCount+ " rows.");						
					 }endStep();
					 return retArr;
				 }	
				 rowIndex=getRowIndexForVisibleRow(gridId, iRow);
				 for(int idx=0;idx<param.length;idx++){
					 String tempFld=param[idx];
					 //Keeping column header intact as given by automator for addition in datatable 
					 //String dtPar=param[idx];
					 colIndex=getColIndexForColName(gridId, tempFld);
					 if(colIndex!=null){

						 String cellVal[]=web.document(e1Browser).executeJsFunction("getGridRowCellValue",gridId,Integer.toString(rowIndex),colIndex);
						 fieldVal=cellVal[0];

						 tempFld=tempFld.replaceAll(" ", "");
						 int appender=checkColumnExists(tempFld);
						 String newTempFld;
						 if(appender==0){
							 newTempFld=tempFld;
						 }else{
							 newTempFld=tempFld+appender;
						 }

						 datatable.getGlobalDatatable().addColumn("Global",newTempFld.trim(),0);
						 datatable.getGlobalDatatable().setValue("Global", 0, newTempFld.trim(),fieldVal);
						 //datatable.addColumn("Global",tempFld.trim(),0);
						 //datatable.setValue("Global", 0, tempFld.trim(),fieldVal);
						 beginStep("[outputGridRowData] Passed: Indentified column "+tempFld+ " and the captured cell value "+fieldVal+" stored in datatable");
						 {
							 getStepResult().isPassed();
						 }endStep();
						 retArr[idx]=newTempFld.trim();
					 }else{
						 beginStep("[outputGridRowData] outputting grid row data failed: Failed to identify column "+tempFld);
						 {
							 web.window(e1BrowserWindow).capturePage();
							 testFailure("outputting grid row data failed: Failed to identify column "+tempFld);
						 }endStep();
						 retArr[idx]="";
					 }
				 }
			 }
		 }else{
			 gridId=getDataBrowserGridObjReference();
			 String rowcount[]=web.document(sDBBrowser).executeJsFunction("getvisibleRowCount",gridId);
			 int rowCount=Integer.parseInt(rowcount[0]);
			 if(iRow>(rowCount-1)){
				 beginStep("[outputGridRowData] outputting grid row data failed: Grid only has " + rowCount+ " rows.");
				 {
					 web.window(sDBBrowserWindow).capturePage();
					 testFailure("outputting grid row data failed: Grid only has " + rowCount+ " rows.");						
				 }endStep();
				 return retArr;
			 }	
			 rowIndex=getRowIndexForVisibleRow(gridId, iRow);
			 for(int idx=0;idx<(param.length);idx++){
				 boolean flag=false;
				 String tempFld=param[idx].replaceAll(" ","");
				 colIndex=getColIndexForColName(gridId, tempFld);
				 if(colIndex!=null){

					 String cellVal[]=web.document(sDBBrowser).executeJsFunction("getGridRowCellValue",gridId,Integer.toString(rowIndex),colIndex);
					 fieldVal=cellVal[0];

					 tempFld=tempFld.replaceAll(" ", "");
					 int appender=checkColumnExists(tempFld);
					 String newTempFld;
					 if(appender==0){
						 newTempFld=tempFld;
					 }else{
						 newTempFld=tempFld+appender;
					 }
					 //newTempFld=newTempFld.replaceAll(" ", "");
					 datatable.getGlobalDatatable().addColumn("Global",newTempFld.trim(),0);
					 datatable.getGlobalDatatable().setValue("Global", 0, newTempFld.trim(),fieldVal);
					 //datatable.addColumn("Global",tempFld.trim(),0);
					 //datatable.setValue("Global", 0, tempFld.trim(),fieldVal);
					 beginStep("[outputGridRowData] Passed: Indentified column "+tempFld+ "and the captured cell value "+fieldVal+" stored in datatable");
					 {
						 getStepResult().isPassed();
					 }endStep();
					 retArr[idx]=newTempFld.trim();
				 }else{
					 beginStep("[outputGridRowData] outputting grid row data failed: Failed to identify column "+tempFld);
					 {
						 web.window(sDBBrowserWindow).capturePage();
						 testFailure("outputting grid row data failed: Failed to identify column "+tempFld);
					 }endStep();
					 retArr[idx]="";
				 }
			 }

		 }
		 info("Finished :Function outputGridRowData");
		 return retArr;
	 }
	 /************************************************************************************************************
	  * Function: clickGridRowImg(iIndex,iRow,sFieldName)  
	  * Description: This function will click under the specified column of the specified row on the grid.Created 
	  * By: Varma
	  * Date: March 2011
	  * To be incorporated: Nil 
	  * InputParameters:
	  * @param iIndex - index of the grid in the webpage starting from 0
	  * @param iRow - Visible row number starting from 0
	  * @param sFieldName - column header of the cell to be clicked 
	  * Returns: Nil
	  * **********************************************************************************************************
	  */ 
	 public void clickGridRowImg(@Arg("iIndex") int iIndex,@Arg("iRow") int iRow, @Arg("sFieldName") String sFieldName)throws Exception {
		 info("Starting:Function clickGridRowImg ");
		 checkFrame();
		 String gridId = getGridObjReference(iIndex);
		 if(gridId!=null){
			 int rCount=getGridRowCountByIndex(iIndex);
			 if(iRow>(rCount-1)){
				 web.window(e1BrowserWindow).capturePage();
				 beginStep("[clickGridRowimg] Clicking grid row "+(iRow+1)+" Failed:  grid only has "+rCount+" rows");
				 {
					 testFailure("Clicking grid row "+(iRow+1)+" Failed:  grid only has "+rCount+" rows");
				 } endStep();
				 return;
			 }			
			 String colIndex=getColIndexForColName(gridId,sFieldName);
			 if(colIndex!=null){
				 int rowIndex=getRowIndexForVisibleRow(gridId,iRow);
				 String[] gridCellId = web.document(e1Browser).executeJsFunction("clickGridImgByIndex", gridId,""+rowIndex,colIndex, "0");
				 customClick(web.image(e1Browser+"/web:form[@id='E1PaneForm']/web:img[@id='"+gridCellId[0]+"']"));
				 //web.image(e1Browser+"/web:form[@id='E1PaneForm']/web:img[@id='"+gridCellId[0]+"']").fireEvent("onClick");
				 info("Identified Image " + sFieldName + "& clicked");
			 }else{
				 web.window(e1BrowserWindow).capturePage();
				 beginStep("[clickGridRowImg] Image identification Failed:  Failed to identify Image "+ sFieldName);
				 {
					 testFailure("Failed to Identify Image " + sFieldName);
				 } endStep();
			 }
		 }
		 info("Finished:Function clickGridRowImg ");
	 }



	 /************************************************************************************************************
	  * Function: validateGridRowImage
	  * Description: This function will validate the image under the specified column of the specified row in a grid
	  * Created By: Neha
	  * Date: April 2011
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param iIndex :Iindex of the grid in the webpage starting from 0.
	  * 		@param iRow :visible row index starting from 0
	  * 		@param sColName :column header under which to validate the image
	  * 		@param sAltPpty :alt property of the image to be validated
	  * Returns: 
	  * 		@return Nil
	  * **********************************************************************************************************
	  */

	 public void validateGridRowImage(@Arg("iIndex") int iIndex, @Arg("iRow") int iRow,@Arg("sColName") String sColName,@Arg("sAltPpty") String sAltPpty) throws Exception {
		 info("Starting:Function validateGridRowImage");
		 int rowIndex, rowCount;
		 String iColIndex;
		 checkFrame();
		 String gridId = getGridObjReference(iIndex); 
		 // Checking if Grid object is returned successfully
		 if(gridId!=null)  { 
			 //Checking for Valid Row 
			 String[] output = web.document(e1Browser).executeJsFunction("getvisibleRowCount", gridId);
			 rowCount = Integer.parseInt(output[0]);
			 if(iRow > rowCount){
				 iRow=iRow+1;
				 web.window(e1BrowserWindow).capturePage();
				 beginStep("[validateGridRowImage] Failed:Validating Grid Row: "+ iRow + " and Grid only has " + rowCount +" row");
				 {		
					 testFailure("Validating Grid Row:" +iRow + "and Grid only has "+rowCount +"  row");
				 }endStep();
				 return;
			 }
			 String[] colIndex = web.document(e1Browser).executeJsFunction("gridColIndex", gridId,sColName);
			 if(colIndex[0].equals("1")){
				 iColIndex= colIndex[1];
			 }
			 else{
				 iColIndex= getColIndexForColName(gridId, sColName);
			 }	
			 if(iColIndex!=null){

				 rowIndex = getRowIndexForVisibleRow(gridId, iRow);
				 String[] altProperty = web.document(e1Browser).executeJsFunction("cellImageObject",gridId,Integer.toString(rowIndex), iColIndex);
				 if(altProperty[0].equals(sAltPpty)){

					 info("Validate Row Image : Image exists with alt=" + altProperty[0] + " in the row");
				 }
				 else {

					 web.window(e1BrowserWindow).capturePage();
					 beginStep("[validateGridRowImage] Validate Row Image : Image exists with alt=" + altProperty[0] + " in the row. Expected alt=" + sAltPpty);
					 {	
						 testFailure("Validate Row Image : Image exists with alt=" + altProperty[0] + " in the row. Expected alt=" + sAltPpty);
					 }
					 endStep();
				 }
			 }else{
				 web.window(e1BrowserWindow).capturePage();
				 beginStep("[validateGridRowImage] Validate Row Image : column "+sColName+ " Not found in the grid");
				 {	
					 testFailure("Validate Row Image : column "+sColName+ " Not found in the grid");
				 }
				 endStep();
			 }
		 }
		 valCount=valCount+1;
		 info("Finished:Function validateGridRowImage ");
	 }	
	 /************************************************************************************************************
	  * Function: validateGridRowDupColData
	  * Description: This function can be used to validate the grid row data for those columns, in a database which have two or more occurrences with same header
	  * Created By: Sravan
	  * Date: April 2011
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *          @param iIndex - index of the grid in the webpage starting from 0
	  *          @param iRow : visible row index of the specified row
	  *          @param sParams - semicolon separated columnHeader=value pairs
	  *          @param sAlias - semicolon separated Alias name for the columns, in the same order
	  * Returns:Nil 
	  * Example:        validateGridRowDupColData(0, 0, "DocumentNumber=161;DoTy=R2;DocCo=05959", "SDOC;SDCT;SKCO")
	  * **********************************************************************************************************
	  */
	 public void validateGridRowDupColData(@Arg("iIndex") int iIndex,@Arg("iRow") int iRow, @Arg("Param") String sParam,@Arg("sAliases") String sAliases) throws Exception {		
		 info("Starting:Function ValidateGridRowDupColData");	
		 String tempFld,tempVal;
		 String param[] = Pattern.compile("[;]").split(sParam);
		 int paramCnt=param.length;
		 String alias[] = Pattern.compile("[;]").split(sAliases);
		 int aliasCnt=alias.length;
		 //info(paramCnt+","+aliasCnt);
		 if(paramCnt!=aliasCnt){
			 //getLogger().error("Discrepency in the function call, Alias for all the Column names are not provided.");
			 beginStep("[ValidateGridRowDupColData] Discrepency in the function call, Alias for all the Column names are not provided.");
			 {
				 testFailure("Discrepency in the function call, Alias for all the Column names are not provided.");
			 }
			 endStep();
			 return;
		 }
		 int rowIndex;
		 String gridId,colIndex;
		 if(!bDB){
			 checkFrame();
			 gridId=getGridObjReference(iIndex);
			 if(gridId!=null){
				 String rowcount[]=web.document(e1Browser).executeJsFunction("getvisibleRowCount",gridId);
				 int rowCount=Integer.parseInt(rowcount[0]);
				 if(iRow>(rowCount-1)){
					 //getLogger().error("Validating Grid Row data for row "+iRow+1+"failed: Grid only has " + rowCount+ " rows.");
					 beginStep("[ValidateGridRowDupColData] Validating Grid Row data for row "+iRow+1+" Failed:");
					 {
						 web.window(e1BrowserWindow).capturePage();
						 testFailure("Validating Grid Row data for row "+iRow+1+"failed: Grid only has " + rowCount+ " rows.");
					 }
					 endStep();
					 return;
				 }
			 }
		 }else{
			 gridId=getDataBrowserGridObjReference();
			 for(int idx=0;idx<paramCnt;idx++){
				 boolean flag=false;
				 String fieldVal[] = Pattern.compile("[=]").split(param[idx]);
				 fieldVal[0]=fieldVal[0].replaceAll(" ","");
				 if(fieldVal.length==2) {
					 tempFld=fieldVal[0];
					 tempVal=fieldVal[1];
				 } else {
					 tempFld=fieldVal[0];
					 tempVal="";
				 }
				 String[] colLen = web.document(sDBBrowser).executeJsFunction("getColLen", gridId);
				 int colLength=Integer.parseInt(colLen[0]);
				 rowIndex=getRowIndexForVisibleRow(gridId, iRow);
				 for(int ivx=0 ; ivx<colLength;ivx++){
					 String colLabel[] = web.document(sDBBrowser).executeJsFunction("getColLabel", gridId,""+ivx);
					 colLabel[0]=colLabel[0].replaceAll(" ", "");
					 colLabel[0]=colLabel[0].replaceAll("&#37;", "%");
					 colLabel[0]=colLabel[0].replaceAll("&#39;", "'");
					 colLabel[0]=colLabel[0].replaceAll("&#45;", "-");
					 colLabel[0]=colLabel[0].replaceAll("&#40;", "(");
					 colLabel[0]=colLabel[0].replaceAll("&#41;", ")");
					 colLabel[0]=colLabel[0].replaceAll("&#42;", "*");
					 colLabel[0]=colLabel[0].replaceAll("&#43;", "+");
					 if(tempFld.trim().equalsIgnoreCase(colLabel[0].trim())){
						 String[] qbeFld = web.document(sDBBrowser).executeJsFunction("getQBEFldId", gridId,""+ivx);
						 web.textBox(sDBBrowser+"/web:form[@id='E1PaneForm']/web:input_text[@id='"+qbeFld[0]+"']").fireEvent("onHelp");
						 Thread.sleep(2000);
						 if(web.exists("/web:window[@title='Item Help*']",10)){	
							 String sAliasString = web.element("/web:window[@title='Item Help*']/web:document[@index='0']/web:b[@text='Alias:*']").getAttribute("innerhtml");
							 //info("Alias value = " +sAliasString);
							 web.window("/web:window[@title='Item Help*']").close();
							 Thread.sleep(3000);
							 String sAliasName[] = Pattern.compile("[:]").split(sAliasString);
							 if(alias[idx].equalsIgnoreCase(sAliasName[1].trim())){
								 flag =true;

								 String[] cellVal = web.document(sDBBrowser).executeJsFunction("getGridRowCellValue", gridId.toString(),Integer.toString(rowIndex),""+ivx);
								 if((cellVal[0].startsWith("-")) || (cellVal[0].endsWith("-"))){
									 if( (tempVal.startsWith("-"))||(tempVal.endsWith("-"))){
										 tempVal=tempVal.replace("-", "");
										 cellVal[0]=cellVal[0].replace("-", "");
									 }
								 }
								 try{
									 double d1=Double.parseDouble(tempVal);
									 double d2=Double.parseDouble(cellVal[0]);
									 tempVal=Double.toString(d1);
									 cellVal[0]=Double.toString(d2);
								 }
								 catch(NumberFormatException e){						  
								 }
								 if(tempVal.trim().equals(cellVal[0].trim())){
									 info("ValidateGridRowDupColData PASSED:Identified " +tempFld +" field and expected value " + tempVal+"validated");
									 beginStep("[ValidateGridRowDupColData]: PASSED: Identified " +tempFld +" field and expected value " + tempVal+"validated");
									 {
										 getStepResult().isPassed();
									 }endStep();
									 break;
								 }else{
									 //getLogger().error("Validating Grid Row data for row "+iRow+1+" and column "+tempFld+"failed: expected value is "+tempVal+" actual value "+cellVal[0]);
									 beginStep("[ValidateGridRowDupColData] Validating Grid Row data for row "+iRow+1+" and column "+tempFld+"failed ");
									 {
										 web.window(sDBBrowserWindow).capturePage();
										 testFailure("Validating Grid Row data for row "+iRow+1+" and column "+tempFld+"failed: expected value is "+tempVal+" actual value "+cellVal[0]);
									 }
									 endStep();
									 break;
								 }								
							 }
						 }
					 }
				 }
				 if(!flag){
					 //getLogger().error("Column "+tempFld+"identification failed in table"+sTableName);
					 beginStep("[ValidateGridRowDupColData] column "+tempFld+"identification failed in table"+sTableName);
					 {
						 web.window(sDBBrowserWindow).capturePage();
						 testFailure("Column "+tempFld+"identification failed in table"+sTableName);
					 }
					 endStep();
				 }
			 }
		 }
		 valCount=valCount+param.length;
		 info("Finished:Function ValidateGridRowDupColData");

	 }

	 /************************************************************************************************************
	  * Function: outputGridRowDupColData
	  * Description: This function will output the grid row data for duplicate columns in data browser
	  * Created By: Sravan
	  * Date: April 2011
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *          @param iIndex - index of the grid in the webpage starting from 0
	  *          @param iRow : visible row index of the specified row
	  *          @param sParams - semicolon separated columnHeader=value pairs
	  *          @param sAlias - semicolon separated Alias name for the columns, in the same order
	  * Returns:Nil 
	  * Example:        OutPutGridRowDupColData(0, 1, "BatchNumber", "ICU")
	  * **********************************************************************************************************
	  */
	 public String[] outputGridRowDupColData(@Arg("iIndex") int iIndex,@Arg("iRow") int iRow, @Arg("sParam") String sParam,@Arg("sAliases") String sAliases) throws Exception {

		 info("Starting:Function outputGridRowDupColData");	
		 String tempFld,tempVal;
		 int rowIndex;
		 String param[] = Pattern.compile("[;]").split(sParam);
		 int paramCnt=param.length;
		 String retArr[]=new String[paramCnt];
		 String alias[] = Pattern.compile("[;]").split(sAliases);
		 int aliasCnt=alias.length;
		 if(paramCnt!=aliasCnt){
			 //getLogger().error("Discrepency in the function call, Alias for all the Column names are not provided.");
			 beginStep("[outputGridRowDupColData] Discrepency in the function call, Alias for all the Column names are not provided.");
			 {
				 testFailure("Discrepency in the function call, Alias for all the Column names are not provided.");
			 }
			 endStep();
			 return null;
		 }
		 String gridId=getDataBrowserGridObjReference();
		 for(int idx=0;idx<paramCnt;idx++){
			 boolean flag=false;		
			 tempFld=param[idx].replaceAll(" ", "");
			 String[] colLen = web.document(sDBBrowser).executeJsFunction("getColLen", gridId);
			 int colLength=Integer.parseInt(colLen[0]);
			 rowIndex=getRowIndexForVisibleRow(gridId, iRow);
			 for(int ivx =0 ; ivx<colLength;ivx++){
				 String[] colLabel = web.document(sDBBrowser).executeJsFunction("getColLabel", gridId,Integer.toString(ivx));
				 colLabel[0]=colLabel[0].replaceAll(" ", "");
				 if(tempFld.trim().equalsIgnoreCase(colLabel[0].trim())){
					 String[] qbeFld = web.document(sDBBrowser).executeJsFunction("getQBEFldId", gridId,Integer.toString(ivx));
					 web.textBox(sDBBrowser+"/web:form[@id='E1PaneForm']/web:input_text[@id='"+qbeFld[0]+"']").fireEvent("onHelp");
					 Thread.sleep(2000);
					 if(web.exists("/web:window[@title='Item Help*']",10)){
						 String sAliasString = web.element("/web:window[@title='Item Help*']/web:document[@index='0']/web:b[@text='Alias:*']").getAttribute("innerhtml");
						 //info("Alias value = " +sAliasString);
						 web.window("/web:window[@title='Item Help*']").close();
						 Thread.sleep(3000);
						 String sAliasName[] = Pattern.compile("[:]").split(sAliasString);
						 if(alias[idx].equalsIgnoreCase(sAliasName[1].trim())){
							 flag =true;
							 String[] cellVal = web.document(sDBBrowser).executeJsFunction("getGridRowCellValue", gridId.toString(),Integer.toString(rowIndex),Integer.toString(ivx));
							 tempVal=cellVal[0];

							 tempFld=tempFld.replaceAll(" ", "");
							 int appender=checkColumnExists(tempFld);
							 String newTempFld;
							 if(appender==0){
								 newTempFld=tempFld;
							 }else{
								 newTempFld=tempFld+appender;
							 }
							 //newTempFld=newTempFld.replaceAll(" ", "");
							 datatable.getGlobalDatatable().addColumn("Global",newTempFld.trim(),0);
							 datatable.getGlobalDatatable().setValue("Global", 0, newTempFld.trim(),tempVal);
							 retArr[idx]=newTempFld.trim();
							 beginStep("[outputGridRowDupColData] Passed: Indentified column "+tempFld+ "and the captured cell value "+tempVal+" stored in datatable");
							 {
								 getStepResult().isPassed();
							 }endStep();
						 }
					 }
				 }
			 }
			 if(!flag){
				 //getLogger().error("Column "+tempFld+"identification failed in table"+sTableName);
				 beginStep("[outputGridRowDupColData] column "+tempFld+"identification failed in table"+sTableName);
				 {
					 web.window(sDBBrowserWindow).capturePage();
					 testFailure("Column "+tempFld+"identification failed in table"+sTableName);
				 }
				 endStep();
			 }
		 }

		 info("Finished:Function outputGridRowDupColData");
		 return retArr;

	 }
	 /************************************************************************************************************
	  * Function: setGridDupColQBEValues
	  * Description: This function can be used to set QBE values for those columns in a Data browser Grid, which have two or more occurrences with same header
	  * Created By: Prakruthi
	  * Modified By: Sravan
	  * Date: March 2011
	  * To be incorporated:Nil
	  * Input Parameters: 
	  *          @param iIndex - index of the grid in the webpage starting from 0
	  *          @param sParams - semicolon separated columnHeader=value pairs
	  *          @param sAlias - semicolon separated Alias name for the columns, in the same order
	  * Returns:Nil 
	  * Example:        setGridDupColQBEValues( 0, "DocumentNumber=161;DoTy=R2;DocCo=05959", "SDOC;SDCT;SKCO")
	  * **********************************************************************************************************
	  */

	 public void setGridDupColQBEValues(@Arg("iIndex") int iIndex, @Arg("sParam") String sParam, @Arg("sAlias") String sAlias) throws Exception {
		 String tempFld= null ,tempVal, sCellData = null;
		 Pattern pat = Pattern.compile("[;]");
		 String param[] = pat.split(sParam);
		 String alias[] = pat.split(sAlias);
		 int paramCount = param.length;
		 int aliasCount = alias.length;
		 int idx;
		 if(paramCount != aliasCount){
			 //getLogger().error("FAILED: [setDBGridDupColQBEValues]: Discrepency in the function call, Alias for all the Column names are not provided.");
			 web.window(e1BrowserWindow).capturePage();
			
			 testFailure("FAILED: [setDBGridDupColQBEValues]: Discrepency in the function call, Alias for all the Column names are not provided.");
			 return;
		 } else {
			 String gridId = getDataBrowserGridObjReference();
			 if(gridId!=null) {
				 int flag = 0 ;				
				 for(idx=0;idx<paramCount;idx++) {				
					 Pattern pat1 = Pattern.compile("[=]");
					 String fieldVal[] = pat1.split(param[idx]);
					 if(fieldVal.length==2) {
						 tempFld=fieldVal[0];
						 tempFld=tempFld.replaceAll(" ", "");
						 tempVal=fieldVal[1];
					 } else {
						 tempFld=fieldVal[0];
						 tempFld=tempFld.replaceAll(" ", "");
						 tempVal="";
					 }
					 String[] colLen = web.document(sDBBrowser).executeJsFunction("getColLen", gridId);
					 int colLength=Integer.parseInt(colLen[0]);
					 info("collen ="+colLen[0]);
					 for(int ivx =0 ; ivx<colLength;ivx++){
						 String[] colLabel = web.document(sDBBrowser).executeJsFunction("getColLabel", gridId,Integer.toString(ivx));
						 colLabel[0]=colLabel[0].replaceAll(" ", "");
						 //info("col labl= "+colLabel[0]);
						 if(tempFld.trim().equalsIgnoreCase(colLabel[0].trim())){
							 String[] qbeFld = web.document(sDBBrowser).executeJsFunction("getQBEFldId", gridId,Integer.toString(ivx));
							 // web.textBox(sDBBrowser+"/web:form[@id='E1PaneForm']/web:input_text[@id='"+qbeFld[0]+"']").fireEvent("onHelp");
							 web.textBox(sDBBrowser+"/web:form[@id='E1PaneForm']/web:input_text[@id='"+qbeFld[0]+"']").click();
							 Thread.sleep(5000);
							 pressKeyChar("F1");
							 Thread.sleep(10000);	
							 info("qbe fld= "+qbeFld[0]);
							 if(web.exists("/web:window[@title='Item Help*']",10)){
								 //	 String sAliasString = web.element("/web:window[@title='Item Help*']/web:document[@index='0']/web:b[@text='Alias:*']").getAttribute("innerhtml");
								 String sAliasString = web.element("/web:window[@title='Item Help*']/web:document[@index='0']/web:b[@text='Alias:*']").getAttribute("text");	
								 info("Alias value = " +sAliasString);
								 web.window("/web:window[@title='Item Help*']").close();
								 Thread.sleep(2000);
								 pat1 = Pattern.compile("[:]");
								 String sAliasName[] = pat1.split(sAliasString);
								 if(alias[idx].equalsIgnoreCase(sAliasName[1].trim())){
									 flag =1;
									 String[] output1 = web.document(sDBBrowser).executeJsFunction("setQBECellElemForColumn", gridId.toString(),Integer.toString(ivx),tempVal);									
									 web.textBox(sDBBrowser+"/web:form[@id='E1PaneForm']/web:input_text[@id='"+qbeFld[0]+"']").fireEvent("onChange");
									 info("PASSED:Set QBE - Identified " +tempFld +" field and Entered " + tempVal);
									 info("output1= "+output1[0]);
									 beginStep("[setDBGridDupColQBEValues]: PASSED: Set QBE - Identified " +tempFld +" field and Entered " + tempVal);
									 {
										 getStepResult().isPassed();
									 }endStep();
									 break;
								 }
							 }
						 }
					 }
					 if(flag == 0){
						 //getLogger().error("FAILED: [setDBGridDupColQBEValues]: Column Identification, Failed to identify Column "+tempFld +" in table "+sTableName);//+TableName);
						 web.window(sDBBrowserWindow).capturePage();
						
						 testFailure("FAILED: [setDBGridDupColQBEValues]: Column Identification, Failed to identify Column "+tempFld +" in table "+sTableName)
;					 }
				 }				
			 }
		 }
	 }
	 /************************************************************************************************************
	  * Function: postByBatchWait
	  * Description: To wait until the batch status to become 'D" during post by batch.
	  * Created By: Ravi
	  * Date: March 2011
	  * To be incorporated: Nil
	  * Input Parameters: Nil
	  * Returns: Nil

	  * **********************************************************************************************************
	  */
	 public void postByBatchWait() throws Exception {
		 boolean Flag=false;
		 checkFrame();
		 setHeaderRadioButton(2, "All Batches");
		 clickToolBarImage("Find");
		 String gridId = getGridObjReference(0);
		 int gridcount = getGridRowCount();
		 if(gridcount ==1) {
			 String colIndex=getColIndexForColName(gridId,"BatchStatus");
			 String batchStatus="";
			 for(int i=0;i<150;i++){
				 String[] output=null;
				 try{
					 output = web.document(e1Browser).executeJsFunction("getGridRowCellValue", gridId,"0",colIndex);
				 }catch (Exception e) {
					 continue;
				 }
				 batchStatus=output[0].trim(); 
				 if (batchStatus.equals("D"))  {
					 info("Batch has been posted Succesfully");
					 getStepResult().isPassed();
					 Flag=true;
					 break;
				 }else if (batchStatus.equals("E")) {
					 info("Batch has been ended in error");
					 Flag=false;
					 web.window(e1BrowserWindow).capturePage();
					 beginStep("[postByBatchWait] Batch Status identification Failed:Batch has been ended in error");
					 {
						 OSPreferences("Fail");
						 fail("Batch has been ended in error");

					 }
					 endStep(); 
					 break;
				 }
				 clickToolBarImage("Find");

			 }
			 if(!Flag){
				 web.window(e1BrowserWindow).capturePage();
				 beginStep("[postByBatchWait] Batch Status identification Failed:Batch has been ended in "+batchStatus);
				 {
					 OSPreferences("Fail");
					 fail("Batch Ended in "+batchStatus);

				 }
				 endStep();
			 }
		 } else{
			 web.window(e1BrowserWindow).capturePage();
			 beginStep("[postByBatchWait] Batch Status identification Failed:  Failed to identify row "+ "No Batches exists");
			 {
				 OSPreferences("Fail");
				 fail("Failed to Identify row " + "No Batches exists");

			 }
			 endStep();
		 }
		 valCount=valCount+1;
	 }

	 //------------------------------------------END of Grid Functions-----------------------------------------------------


	 //------------------------------------------START of Tree Grid Functions---------------------------------------------
	 /************************************************************************************************************
	  * Function: getTreeGrid
	  * Description: This function will check for the tree grid with given index and returns corresponding DOMTable
	  * Created By: Sravan & Xiochun Chen
	  * Date: April 2011
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *                      @param iIndex : index of the Tree starting from 0
	  * Returns: 
	  *                      @return DOMTable for the given index
	  * **********************************************************************************************************
	  */
	 public DOMTable getTreeGrid(int iIndex) throws AbstractScriptException, Exception {
		 if(docIndex==null){
			 getDocIndex();
		 }
		 info("Starting Function : getTreeId");
		 DOMDocument document = web.document(e1Browser);
		 if(web.exists(e1Browser+"/web:table[@id='jdeTree*']",20))
		 {
			 List<DOMElement> allTables = document.getElementsByTagName("table");
			 List<String> gridTreeRealIndex = new ArrayList<String>();
			 for(DOMElement table : allTables) {
				 String id = table.getAttribute("id");
				 if(id != null && id.startsWith("jdeTree")) {
					 gridTreeRealIndex.add(table.getIndex());
				 }
			 }
			 DOMTable table = web.table(e1Browser+"/web:table[@index='"+gridTreeRealIndex.get(iIndex) +"']");
			 info("Found Treegrid with index "+iIndex);
			 beginStep("getTreeGrid Passed: Found Tree and returned");
			 {
				 getStepResult().isPassed();
			 }
			 endStep();
			 info("Finished Function : getTreeId");
			 return table;
		 }
		 getLogger().error("Treegrid with index "+iIndex+" not found");
		 beginStep("getTreeGrid Failed: No Tree found");
		 {
			 web.window(e1BrowserWindow).capturePage();
			 testFailure("Treegrid with index "+iIndex+" not found");
		 }
		 endStep();
		 info("Finished Function : getTreeId");
		 return null;
	 }


	 /************************************************************************************************************
	  * Function: clickTreeRowImageByIndex
	  * Description: This function can be used to click a particular image(selected based on index) in the specified row and column of the tree grid
	  * Created By: Sravan & Xiochun Chen
	  * Date: April 2011
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *                      @param iIndex : index of the Tree starting from 0
	  *                      @param colIndex : column index starting from 0 (Generally 1)
	  *                      @param sValue : value of the cell in which Image is to be clicked
	  *                      @param ImgIndex : Index of the image starting from 0 
	  * Returns: 
	  *                      Nil
	  * Example: clickTreeRowImageByIndex(0,1,"Chairs",2);
	  * **********************************************************************************************************
	  */
	 public void clickTreeRowImageByIndex(int iIndex, int colIndex, String sValue, int imgIndex)throws AbstractScriptException, Exception {
		 checkFrame();
		 if(docIndex==null){
			 getDocIndex();
		 }
		 info("Starting Function : clickTreeRowImageByIndex");
		 DOMTable table = getTreeGrid(iIndex);
		 if(table.exists()){
			 int targetRow = getTreeRowNo(iIndex, colIndex, sValue);
			 if(targetRow!=-1){
				 info("Target Row:" + targetRow);
				 List<DOMElement> rows = table.getElementsByTagName("tr");
				 if(targetRow <= rows.size()) {
					 DOMElement row = rows.get(targetRow -1);
					 List<DOMElement> columns = row.getElementsByTagName("td");
					 if(colIndex < columns.size()) {
						 DOMElement column = columns.get(colIndex);
						 List<DOMElement> images  = column.getElementsByTagName("img");
						 if(imgIndex < images.size()) {
							 DOMElement img = images.get(imgIndex);
							 String imgBeforeClick=img.getAttribute("alt");
							 customClick(img);
							 syncFrame();
							 rows = table.getElementsByTagName("tr");
							 row = rows.get(targetRow -1);
							 columns = row.getElementsByTagName("td");
							 column = columns.get(colIndex);
							 images  = column.getElementsByTagName("img");
							 String imgAfterClick="";
							 try{
								 img = images.get(imgIndex);
								 imgAfterClick=img.getAttribute("alt");
							 }catch (Exception e) {

							 }
							 if(imgBeforeClick.trim().equalsIgnoreCase(imgAfterClick.trim())){
								 getLogger().error("Expand/Collapse Image is not clicked");
								 beginStep("clickTreeRowImageByIndex Failed: Expand/Collapse Image is not clicked");
								 {
									 web.window(e1BrowserWindow).capturePage();
									 testFailure("Expand/Collapse Image is not clicked");
								 }
								 endStep();
							 }else{
								 info("Expand/Collapse Image is not clicked");
								 beginStep("clickTreeRowImageByIndex Passed: Expand/Collapse Image is not clicked");
								 {
									 getStepResult().isPassed();
								 }
								 endStep();
							 }
						 }else{
							 getLogger().error("No image with index "+iIndex+" exists");
							 beginStep("clickTreeRowImageByIndex Failed: No image with index "+iIndex+" exists");
							 {
								 web.window(e1BrowserWindow).capturePage();
								 testFailure("No image with index "+iIndex+" exists");
							 }
							 endStep();
						 }
					 }

				 }
			 }else{
				 getLogger().error("No Row with value "+sValue+" found");
				 beginStep("clickTreeRowImageByIndex Failed: No Row with value "+sValue+" found");
				 {
					 web.window(e1BrowserWindow).capturePage();
					 testFailure("No Row with value "+sValue+" found");
				 }
				 endStep();
			 }			
		 }else{
			 getLogger().error("Treegrid with index "+iIndex+" not found");
			 beginStep("clickTreeRowImageByIndex Failed: No Tree found");
			 {
				 web.window(e1BrowserWindow).capturePage();
				 testFailure("Tree with index "+iIndex+" not found");
			 }
			 endStep();
		 }

		 info("Finished Function : clickTreeRowImageByIndex");
	 }
	 /************************************************************************************************************
	  * Function: clickTreeRowImageByName
	  * Description: This function can be used to click a particular image(selected based on index) in the specified row and column of the tree grid
	  * Created By: Sravan & Xiochun Chen
	  * Date: April 2011
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *                      @param iIndex : index of the Tree starting from 0
	  *                      @param colIndex : column index starting from 0 (Generally 1)
	  *                      @param sValue : value of the cell in which Image is to be clicked
	  *                      @param ImgName : Alt property of the image 
	  * Returns: 
	  *                      Nil
	  * Example: clickTreeRowImageByName(0,1,"Chairs",Expand);
	  * **********************************************************************************************************
	  */
	 public void clickTreeRowImageByName(int iIndex, int colIndex, String sValue, String imgName)throws  Exception {
		 checkFrame();
		 if(docIndex==null){
			 getDocIndex();
		 }
		 info("Starting Function : clickTreeRowImageByName");
		 DOMTable table = getTreeGrid(iIndex);
		 if(table.exists()){
			 int targetRow = getTreeRowNo(iIndex, colIndex, sValue);
			 if(targetRow!=-1){
				 List<DOMElement> rows = table.getElementsByTagName("tr");
				 if(targetRow <= rows.size()) {
					 DOMElement row = rows.get(targetRow -1);
					 List<DOMElement> columns = row.getElementsByTagName("td");
					 if(colIndex < columns.size()) {
						 DOMElement column = columns.get(colIndex);
						 List<DOMElement> images  = column.getElementsByTagName("img");
						 boolean flag=false;
						 for(int i=0;i<images.size();i++){
							 DOMElement img=images.get(i);
							 String imgBeforeClick=img.getAttribute("alt");
							 if(imgBeforeClick==null){
								 continue;
							 }
							 if(imgBeforeClick.equalsIgnoreCase("Root Node Collapsed")){
								 imgBeforeClick="Expand";
							 }
							 if(imgBeforeClick.equalsIgnoreCase("Root Node Expanded")){
								 imgBeforeClick="Collapse";
							 }
							 if(imgBeforeClick.toUpperCase().contains(imgName.toUpperCase())){
								 flag=true;
								 customClick(img);
								 syncFrame();
								 rows = table.getElementsByTagName("tr");
								 row = rows.get(targetRow -1);
								 columns = row.getElementsByTagName("td");
								 column = columns.get(colIndex);
								 images  = column.getElementsByTagName("img");
								 String imgAfterClick="";
								 try{
									 img = images.get(i);
									 imgAfterClick=img.getAttribute("alt");
								 }catch (Exception e) {

								 }
								 if(imgAfterClick.equalsIgnoreCase("Root Node Collapsed")){
									 imgAfterClick="Expand";
								 }
								 if(imgAfterClick.equalsIgnoreCase("Root Node Expanded")){
									 imgAfterClick="Collapse";
								 }
								 if(imgBeforeClick.trim().equalsIgnoreCase(imgAfterClick.trim())){
									 getLogger().error("Expand/Collapse Image is not clicked");
									 beginStep("clickTreeRowImageByName Failed: Expand/Collapse Image is not clicked");
									 {
										 web.window(e1BrowserWindow).capturePage();
										 testFailure("Expand/Collapse Image is not clicked");
									 }
									 endStep();
								 }else{
									 info("Expand/Collapse Image is not clicked");
									 beginStep("clickTreeRowImageByName Passed: Expand/Collapse Image is not clicked");
									 {
										 getStepResult().isPassed();
									 }
									 endStep();
								 }
								 break;
							 }
						 }
						 if(!flag){
							 getLogger().error("No image with name "+imgName+" exists");
							 beginStep("clickTreeRowImageByName Failed: No image with name "+imgName+" exists");
							 {
								 web.window(e1BrowserWindow).capturePage();
								 testFailure("No image with name "+imgName+" exists");
							 }
							 endStep();
						 }
					 }

				 }
			 }else{
				 getLogger().error("No Row with value "+sValue+" found");
				 beginStep("clickTreeRowImageByName Failed: No Row with value "+sValue+" found");
				 {
					 web.window(e1BrowserWindow).capturePage();
					 testFailure("No Row with value "+sValue+" found");
				 }
				 endStep();
			 }			
		 }else{
			 getLogger().error("Treegrid with index "+iIndex+" not found");
			 beginStep("clickTreeRowImageByName Failed: No Tree found");
			 {
				 web.window(e1BrowserWindow).capturePage();
				 testFailure("Tree with index "+iIndex+" not found");
			 }
			 endStep();
		 }

		 info("Finished Function : clickTreeRowImageByName");
	 }

	 /************************************************************************************************************
	  * Function: getTreeRowNo
	  * Description: This function will search for a value in Tree grid cell under specified column 
	  * Created By: Sravan & Xiochun Chen
	  * Date: April 2011
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *                      @param iIndex : index of the Tree starting from 0
	  *                      @param colIndex : column index startinig from 0
	  *                      @param sValue : value to be searched under specified column
	  * Returns: 
	  *                      @return matched row number starting from 1, -1 if not found any matching row
	  * **********************************************************************************************************
	  */
	 public int getTreeRowNo(int iIndex, int colIndex, String sValue) throws Exception{
		 checkFrame();
		 if(docIndex==null){
			 getDocIndex();
		 }
		 info("Starting Function : getTreeRowNo");
		 DOMTable table = getTreeGrid(iIndex);
		 if(table.exists()){
			 for(int i = 0; i < table.getRowCount(); i++){
				 try {
					 String cellValue = table.getCell(i+1, colIndex + 1);
					 if((cellValue.startsWith("-")) || (cellValue.endsWith("-"))){
						 if( (sValue.startsWith("-"))||(sValue.endsWith("-"))){
							 sValue=sValue.replace("-", "");
							 cellValue=cellValue.replace("-", "");
						 }
					 }
					 try{
						 double d1=Double.parseDouble(sValue);
						 double d2=Double.parseDouble(cellValue);
						 sValue=Double.toString(d1);
						 cellValue=Double.toString(d2);
					 }
					 catch(NumberFormatException e){						  
					 }
					 if(sValue.trim().equalsIgnoreCase(cellValue.trim())) {
						 info("Found Row and returned row number"+i);
						 beginStep("getTreeRowNo Passed: Found Row and returned row number");
						 {
							 getStepResult().isPassed();
						 }
						 endStep();
						 info("Finished Function : getTreeRowNo");
						 return i+1;
					 }					 
				 }catch(Exception e) {
					 //ignore this exception here.
					 //e.printStackTrace();					 
				 }				 
			 }			 
		 }

		 info("No row with value "+sValue+" found");

		 info("Finished Function : getTreeRowNo");
		 return -1;
	 }

	 /************************************************************************************************************
	  * Function: highlightTreeRow
	  * Description: This function will  select a row in the tree grid based on the search value under specified column  
	  * Created By: Sravan
	  * Date: April 2011
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *                      @param iIndex : index of the Tree starting from 0
	  *                      @param colIndex : column index startinig from 0
	  *                      @param sValue : value to be searched under specified column
	  * Returns: 
	  *                      @return Nil
	  * **********************************************************************************************************
	  */
	 public void highlightTreeRow(@Arg("iIndex")int iIndex, @Arg("colIndex")int colIndex, @Arg("sValue")	String sValue)throws Exception {
		 checkFrame();
		 if(docIndex==null){
			 getDocIndex();
		 }
		 info("Starting Function: highlightTreeRow");
		 int rn;
		 DOMTable table = getTreeGrid(iIndex);
		 if(table.exists()){
			 rn=getTreeRowNo(iIndex, colIndex, sValue);
			 info("target row number is "+rn);
			 List<DOMElement> rows = table.getElementsByTagName("tr");
			 if(rn!=-1){
				 DOMElement row = rows.get(rn-1);
				 List<DOMElement> columns = row.getElementsByTagName("td");
				 if((colIndex-1) < columns.size()) {
					 DOMElement column = columns.get(colIndex-1);
					 List<DOMElement> radios  = column.getElementsByTagName("INPUT");
					 DOMElement rad = radios.get(0);
					 rad.click();
					 info("highlightTreeRow: Found Row and highlighted");
					 beginStep("highlightTreeRow Passed: Found Row and highlighted");
					 {
						 getStepResult().isPassed();
					 }
					 endStep();

				 }else{
					 getLogger().error("No row with value "+sValue+" found");
					 beginStep("highlightTreeRow Failed: No row with value "+sValue+" found");
					 {
						 web.window(e1BrowserWindow).capturePage();
						 testFailure("No row with value "+sValue+" found");
					 }
					 endStep();
				 }
			 }
		 }
		 info("Finished Function: highlightTreeRow");
	 }


	 /************************************************************************************************************
	  * Function: getTreeRowCount
	  * Description: This function will  return the row count of the specified tree grid  
	  * Created By: Sravan
	  * Date: April 2011
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *                      @param iIndex : index of the Tree starting from 0
	  * Returns: 
	  *                      @return row count of the tree grid
	  * **********************************************************************************************************
	  */
	 public int getTreeRowCount(@Arg("iIndex") int iIndex) throws Exception {
		 checkFrame();
		 info("Starting Function: getTreeRowCount");
		 int rc;
		 DOMTable table = getTreeGrid(iIndex);
		 if(table.exists()){
			 rc=table.getRowCount();
			 info("getTreeRowCount: Found Tree and returned row count "+rc);
			 beginStep("getTreeRowCount Passed: Found Row and returned row count");
			 {
				 getStepResult().isPassed();
			 }
			 endStep();
			 info("Finished Function: getTreeRowCount");
			 return rc;
		 }
		 getLogger().error("No tree with index "+iIndex+" found");
		 beginStep("getTreeRowCount Failed: No tree with index "+iIndex+" found");
		 {
			 web.window(e1BrowserWindow).capturePage();
			 testFailure("No tree with index "+iIndex+" found");
		 }
		 endStep();
		 info("Finished Function: getTreeRowCount");
		 return -1;
	 }


	 /************************************************************************************************************
	  * Function: highlightLastTreeRow
	  * Description: This function will  select last row in the tree grid   
	  * Created By: Sravan
	  * Date: April 2011
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *                      @param iIndex : index of the Tree starting from 0
	  * Returns: 
	  *                      @return Nil
	  * **********************************************************************************************************
	  */
	 public void highlightLastTreeRow(@Arg("iIndex")int iIndex)throws Exception {
		 info("Starting Function: highlightLastTreeRow");
		 checkFrame();
		 int rc;
		 DOMTable table = getTreeGrid(iIndex);
		 if(table.exists()){
			 rc=table.getRowCount();
			 List<DOMElement> rows = table.getElementsByTagName("tr");
			 DOMElement row = rows.get(rc-1);
			 List<DOMElement> columns = row.getElementsByTagName("td");
			 DOMElement column = columns.get(0);
			 List<DOMElement> radios  = column.getElementsByTagName("INPUT");
			 DOMElement rad = radios.get(0);
			 rad.click();
			 info("highlightLastTreeRow: Found Row and highlighted");
			 beginStep("highlightLastTreeRow Passed: Found Row and highlighted");
			 {
				 getStepResult().isPassed();
			 }
			 endStep();
		 }else{
			 getLogger().error("No tree with index "+iIndex+" found");
			 beginStep("highlightLastTreeRow Failed: No tree with index "+iIndex+" found");
			 {
				 web.window(e1BrowserWindow).capturePage();
				 testFailure("No tree with index "+iIndex+" found");
			 }
			 endStep();
		 }
		 info("Finished Function: highlightLastTreeRow");
	 }
	 //------------------------------------------END of Tree Grid Functions-----------------------------------------------

	 //------------------------------------------START of UBE Functions---------------------------------------------------

	 /************************************************************************************************************
	  * Function: UBEClear  
	  * Description: Deletes previous UBE output for a List of specific Reports and Versions. 
	  *                This code performs the following actions:
	  *                      - Opens the Batch Versions application, navigates to Submitted
	  *                      - Jobs screen, finds any previous output for the versions of the UBEs specified, 
	  *                      - deletes all previous outputs, closes Submitted Jobs and
	  *                      - closes the Batch Versions application.  
	  *                It repeats this for each report passed in. After deleting jobs it checks to see if any
	  *                jobs still exist.  If so it   will return False.
	  * Created By: Prakruthi
	  * Modified By: Neha & Govardhan
	  * Date: January 2011
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *      @param sReportsList - A comma separated list of Report IDs and Versions                        
	  * Returns: 
	  *          @return True if records are successfully deleted
	  *                      False if UBE records still exist after delete
	  * **********************************************************************************************************
	  */
	 public boolean UBEClear(@Arg("sReportsList") String sReportsList) throws Exception {
		 info("Starting:Function UBEClear");

		 String sReports;
		 boolean isPassed=false,failed=false;
		 int count=0;

		 try {
			 fastPath("WSJ");
			 syncFrame();
			 sReportsList=sReportsList.replace(";", ",");
			 String[] aReportsList = sReportsList.split(",");
			 if(!(web.exists("//web:span[@text='*Submitted Job Search']")))
			 {
				 testFailure("UBEClear failed: Submitted Jobs page not opened.");
				 CapturePage();
				 return false;
			 }

			 clickOnImage("Advanced Query", "id", "AQDesignIcon");

			 web.textBox("//web:input_text[@id='G0_1_Q7']").setText("D");
			 clickOnImage("Advanced Query", "id", "AQAddIconqbe0_1.8");
			 web.textBox("//web:input_text[@id='G0_1_Q7']").setText("E");
			 clickOnImage("Advanced Query", "id", "AQAddIconqbe0_1.8");
			 web.textBox("//web:input_text[@id='G0_1_Q7']").setText("");
			 setHeaderRadioButton(1, "Match Any");

			 for(int iReport=0;iReport<aReportsList.length;iReport++){
				 String sReport=aReportsList[iReport];
				 if(sReport.length()>18){
					 sReport=sReport.substring(0, 17);
				 }

				 web.textBox("//web:input_text[@id='G0_1_Q22']").setText(sReport.trim()+"*"); 
				 //clickToolBarImage("Find");
				 customClick(web.image("//web:img[@alt='Find*']"));
				 Thread.sleep(1000);
				 syncFrame();
				 //Delete all instances if grid table exists
				 if(getGridRowCountByIndex(0) != 0){
					 if(web.exists("//web:img[@alt='Go to end']",10)){
						 web.image("//web:img[@alt='Go to end']").click();
						 syncFrame();
					 }

					 selectAllCheckbox(0);
					 web.image("//web:img[@alt='Delete*']").click();

					 Thread.sleep(3000);
					 int invex=0, flag=0;
					 //Wait up to 3 seconds for delete confirmation
					 String sDialogBox = "/web:dialog_confirm[@text='Are you sure that you want to delete the selected item?' or @index='0']";
					 if(!web.confirmDialog(sDialogBox).exists()){
						 web.image("//web:img[@alt='Delete*']").click();
						 Thread.sleep(3000);
					 }
					 setErrorRecovery(WebErrorRecovery.ERR_OBJECT_NOT_FOUND_ERROR,ErrorRecoveryAction.Ignore);
					 //info(web.confirmDialog(sDialogBox).exists());
					 if(web.confirmDialog(sDialogBox).exists()){
						 //info("dialog box exists");                                                                                      
						 web.confirmDialog(sDialogBox).clickOk();
						 Thread.sleep(3000);
						 syncFrame();
						 //info("after clicking ok button. Dialog box exists= "+web.exists(sDialogBox,2));
						 while(web.exists(sDialogBox,2)){
							 //info("Inside while: trying again to click OK button");
							 web.confirmDialog(sDialogBox).clickOk();
							 invex++;
							 if(invex == 10){
								 info("Tried to click OK "+invex+ " times.");
								 web.window("/web:window[@index='0' or @text='Microsoft Internet Explorer|Windows Internet Explorer']").close();
								 flag++;
								 syncFrame();
								 //selectAllCheckbox(0);
								 //clickToolBarImage("Delete");
								 getLogger().warn("Delete Confirmation: Clicked OK on delete confiramtion 11 times still the window exists, Window reopened");
								 if(flag ==3){
									 getLogger().error("ERROR: Delete Confirmation - Clicked OK on delete confiramtion 11 times & refreshing the window two times,still the window exists, Window reopened");     
									 beginStep("[UBEClear] Failed, Delete Confirmation - Clicked OK on delete confiramtion 11 times & refreshing the window two times, still the window exists, Window reopened");
									 {
										 web.window(e1BrowserWindow).capturePage();
										 testFailure(" Delete Confirmation - Clicked OK on delete confiramtion 11 times & refreshing the window two times, still the window exists, Window reopened");
									 }endStep();

									 //if multiple reports are being supposed to cleared then function terminates from other Reports also. This can be not done.
									 //return false;
									 count--;
									 failed=true;

								 }
							 }
						 }
					 } else{
						 getLogger().warn("Delete Confirmation: No Delete Confirmation window was found.");
					 }
					 if(failed)
						 continue;
				 }
				 if(getFrameName().equals("Batch Versions - Delete Job Control Prompt")){
					 clickToolBarImage("OK");
				 }
				 setErrorRecovery(WebErrorRecovery.ERR_OBJECT_NOT_FOUND_ERROR,ErrorRecoveryAction.ReportErrorAndContinue);
				 //Check to see if all instances were deleted
				 customClick(web.image("//web:img[@alt='Find*']"));
				 Thread.sleep(1000);
				 syncFrame();

				 if(getGridRowCountByIndex(0) > 0){
					 getLogger().error("ERROR:UBE Results for " + aReportsList[iReport] + " were not successfully cleared.  Records still exist after delete.");  
					 beginStep("[UBEClear] Failed, UBE Results for " + aReportsList[iReport] + " were not successfully cleared.  Records still exist after delete.");
					 {
						 count--;
						 web.window(e1BrowserWindow).capturePage();
						 testFailure("UBE Results for " + aReportsList[iReport] + " were not successfully cleared.  Records still exist after delete.");
					 }endStep();
					 continue;
				 }else{
					 info("Passed: UBE Results for " + aReportsList[iReport] + " were successfully cleared.");
					 beginStep("[UBEClear]  Passed", 0);
					 {
						 count++;
						 getStepResult().isPassed();
					 }
					 endStep();
				 }

			 }
			 customClick(web.image("//web:img[@alt='Close*']"));
			 Thread.sleep(1000);
			 syncFrame();

			 //syncFrame();
			 //customClick(web.image("//web:img[@alt='Close*']"));
			 //Thread.sleep(1000);
			 syncFrame();
		 }catch(Exception e){
			 if(count==sReportsList.split(",").length)
				 isPassed=true;
			 info("Functionality ended with Failures...");
			 //e.printStackTrace();
		 }
		 finally {
			 {
				 //isPassed=true;
				 if(count==sReportsList.split(",").length)
					 isPassed=true;
				 info("Applications being closed properly...");
				 if(web.exists(e1Browser+"/web:span[@text='*Submitted Job Search']",5)) {
					 customClick(web.image("//web:img[@alt='Close (Ctrl+Alt+L)']"));
					 Thread.sleep(1000);
					 syncFrame();                                                                  
				 }
				 /* if(web.exists(e1Browser+"/web:span[@text='*Work With Batch Versions - Available Versions']",5)) {
                                                      customClick(web.image("//web:img[@alt='Close*']"));
                                                      Thread.sleep(1000);
                                                      syncFrame();
                                       }*/
				 //removed after moving to WSJ fastpath
			 } // it will give no effect once functionality got passed without any issues
		 }

		 info("Finished:Function UBEClear ");
		 return isPassed;
	 }


	 /************************************************************************************************************
	  * Function: UBEWait  
	  * Description: Waits for one or more UBE Reports and Versions to finish processing.
	  * 				This code performs the following actions:
	  * 					- Opens the Batch Versions application, selects Work with Servers from the Form exit, 
	  * 						enters the Report ID and version in the QBE line and clicks Find.
	  * 					- It checks the status and clicks Find until the status	changes to E or D 
	  * 						or the wait time expires.
	  * 					- It repeats this for each report passed in.
	  * Created By: Prakruthi
	  * Modified By: Neha
	  * Date: February 2011
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *      @param sReportsList - The UBE ID and Version (separated by underscore) to run (i.e. "R06394_XJDE0001")
	  *      					  Multiple UBEs and Versions can be passed in, separated by commas 
	  *      					  (i.e. "R06394_XJDE0001,R08394_QATEST1")
	  *      @param iIterations - The no: of times Page will be refreshed by clicking on find,until staus changes to D or E           		
	  * Returns: 
	  * 		@return True if all of the UBEs get to status "D" in the appointed time
'					False if any of the UBEs end in status "E", or if the time runs out
	  * **********************************************************************************************************
	  */
	 public boolean UBEWait(@Arg("sReportsList") String sReportsList,@Arg("iIterations") int iIterations) throws Exception {
		 info("Starting:Function UBEWait");
		 String sReports;
		 boolean bStatus = true;
		 int iWait=0,iLoop;
		 fastPath("WSJ");
		 sReportsList=sReportsList.replace(";"	, ",");
		 String[] aReportsList = sReportsList.split(",");
		 if(iIterations == 0){
			 iWait =1;//Loop at least once
		 } else if(iIterations>0){
			 iWait = iIterations;
		 }

		 for(int iReport=0;iReport<aReportsList.length;iReport++){
			 String sReport=aReportsList[iReport];
			 /* if(sReport.length()>18){
				 sReport=sReport.substring(0, 17);
			 }*///done on 16.1.17 when observerd that qbe filter does not truncate the report name anymore...
			 setGridQBEValues(0, "Job=" + sReport.trim() + "*");
			 customClick(web.image("//web:img[@alt='Find*']"));
			 Thread.sleep(1000);
			 syncFrame();
			 //click find image till there is any data present in the grid. It will try for max iWait Times
			 int iRowCount=0;
			 for( iLoop=0;iLoop<iWait;iLoop++){	
				 iRowCount = getGridRowCountByIndex(0);
				 info("In for: Clicked find = "+iLoop +" Row count= "+iRowCount);
				 if(iRowCount != 0)
					 break; //exit for
				 //clickToolBarImage("Find");
				 customClick(web.image("//web:img[@alt='Find*']"));
				 Thread.sleep(1000);
				 syncFrame();
			 }
			 if(iRowCount>1){
				 //bStatus = false;
				 getLogger().warn("Warning: UBE Wait - More than one instance of the UBE and Version " + aReportsList[iReport] + " was found in the list of results.");	
				 CapturePage();

			 }else if(iRowCount == 0){
				 setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.Fail);
				 bStatus = false;
				 getLogger().error("ERROR: UBE Wait - No UBE instance was found for UBE and Version " + aReportsList[iReport] + " in Submitted Jobs after 2 minutes.");	
				 beginStep("[UBEWait] Failed,UBE Wait - No UBE instance was found for UBE and Version " + aReportsList[iReport] + " in Submitted Jobs after 2 minutes.");
				 {
					 OSPreferences("Fail");
					 web.window(e1BrowserWindow).capturePage();
					 fail("UBE Wait - No UBE instance was found for UBE and Version " + aReportsList[iReport] + " in Submitted Jobs after 2 minutes.");

				 }endStep();
				 setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.ReportErrorAndContinue);
			 } 
			 if(bStatus == false){
				 customClick(web.image("//web:img[@alt='Close*']"));
				 Thread.sleep(1000);
				 syncFrame();


				 beginStep("[UBEWait] Failed, UBEWAIT");
				 {
					 web.window(e1BrowserWindow).capturePage();
					 getStepResult().setError("UBEWAIT Failed");
				 }endStep();
				 return false;
			 }
			 String gridId = getGridObjReference(0);
			 String colIndex = getColIndexForColName(gridId, "Status");
			 //info("Grid ID = "+gridId+"  Col Index = "+colIndex);
			 String[] sStatus=null;
			 for(iLoop=0;iLoop<iWait;iLoop++){
				 sStatus = web.document(e1Browser).executeJsFunction("getGridRowCellValue", gridId.toString(),"0",colIndex);
				 //info("Status = "+sStatus[0]);
				 if( sStatus[0].equalsIgnoreCase("D")){
					 //info("Inside IF status = D");
					 info("Passed: UBEWait - UBE instance for UBE and Version " + aReportsList[iReport] + " completed successfully.");
					 beginStep("[UBEWait]  Passed. UBE Wait completed successfully", 0);
					 {
						 getStepResult().isPassed();
					 }endStep();
					 break; //Exit For
				 } else if(sStatus[0].equalsIgnoreCase("E")){
					 //info("Inside else if status = E");
					 setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.Fail);
					 getLogger().error("ERROR: UBE Wait - UBE instance for UBE and Version " + aReportsList[iReport] + " ended in error.");	
					 beginStep("[UBEWait] Failed, UBE Wait - UBE instance for UBE and Version " + aReportsList[iReport] + " ended in error.");
					 {
						 OSPreferences("Fail");
						 web.window(e1BrowserWindow).capturePage();
						 fail(" UBE Wait - UBE instance for UBE and Version " + aReportsList[iReport] + " ended in error.");
					 }endStep();
					 setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.ReportErrorAndContinue);
					 break; //Exit For
				 }
				 //clickToolBarImage("Find");
				 customClick(web.image("//web:img[@alt='Find*']"));
				 Thread.sleep(1000);
				 syncFrame();

			 }
			 if(!sStatus[0].equalsIgnoreCase("D")){
				 setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.Fail);
				 //info("Inside if status != D");
				 getLogger().error("ERROR: UBE Wait - UBE instance for UBE and Version " + aReportsList[iReport] + "did not finish or errored out within "+ iIterations+" clicks.  The last status was "+sStatus[0]+" .");	
				 beginStep("[UBEWait] Failed, UBE Wait - UBE instance for UBE and Version " + aReportsList[iReport] + "did not finish or errored out within "+ iIterations+" clicks.  The last status was "+sStatus[0]+" .");
				 {
					 OSPreferences("Fail");
					 web.window(e1BrowserWindow).capturePage();
					 fail(" UBE Wait - UBE instance for UBE and Version " + aReportsList[iReport] + "did not finish or errored out within "+ iIterations+" clicks.  The last status was "+sStatus[0]+" .");
				 }endStep();		    
				 getLogger().error("ERROR: UBE Wait - Function UBEWait Failed, Exiting ");	
				 beginStep("[UBECloseXML] Failed, Function UBEWait Failed, Exiting ");
				 {
					 OSPreferences("Fail");
					 web.window(e1BrowserWindow).capturePage();
					 fail("Failed: Function UBEWait Failed, Exiting ");
				 }endStep();
				 return false;
			 }
		 }
		 customClick(web.image("//web:img[@alt='Close*']"));
		 Thread.sleep(2000);
		 syncFrame();

		 //customClick(web.image("//web:img[@alt='Close*']"));
		 Thread.sleep(1000);
		 syncFrame();
		 valCount=valCount+aReportsList.length;
		 info("Finished:Function UBEWait ");		
		 return true;
	 }

	 /************************************************************************************************************
	  * Function: UBESubmit  
	  * Description: Submits a single UBE Report and Version from Batch Versions. 
	  * 				This code performs the following actions:
	  * 					- Opens the Batch Versions application, enters the Report ID,	
	  * 						enters the version in the QBE line and clicks Find. 
	  * 					- It then selects the UBE and navigates through the resulting screens to submit it.
	  * Created By: Sravan
	  * Date: March 2011
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *      @param sReport : sReport - The Report ID and Version (separated by an underscore) to be run (i.e. "R06394_XJDE0002")                                 
	  * Returns: 
	  *                      @return True or False
	  * **********************************************************************************************************
	  */
	 public boolean UBESubmit(@Arg("sReport") String sReport)throws Exception {
		 info("Starting:Function UBESubmit");
		 String sReportID,sVersionID;
		 String[] sUBE=Pattern.compile("[_]").split(sReport);
		 sReportID=sUBE[0];
		 sVersionID=sUBE[1];
		 fastPath("BV");
		 setGridQBEValues(0, "Version="+sVersionID);
		 setHeaderText("0", "Batch", sReportID);

		 clickToolBarImage("Find");


		 if(getGridRowCount()==0){
			 web.window(e1BrowserWindow).capturePage();

			 customClick(web.image("//web:img[@alt='Close*']"));
			 Thread.sleep(1000);
			 syncFrame();
			 beginStep("[UBESubmit] Failed, The UBE and/or Version " + sReport + " was not found.");
			 {                               
				 OSPreferences("Fail");
				 fail("The UBE and/or Version " + sReport + " was not found.");

			 }endStep();
			 return false;
		 }
		 selectDeselectByRowNo(0, 0);

		 customClick(web.image("//web:img[@id='hc_Select']"));
		 Thread.sleep(1000);
		 syncFrame();
		 if(isError()){
			 web.window(e1BrowserWindow).capturePage();
			 customClick(web.image("//web:img[@alt='Close*']"));
			 Thread.sleep(1000);
			 syncFrame();

			 beginStep("[UBESubmit] Failed, Function UBESubmit Failed");
			 {
				 OSPreferences("Fail");
				 fail("Function UBESubmit Failed");
				 getStepResult().setError("Function UBESubmit Failed");

			 }endStep();
			 return false;
		 }
		 if(web.exists(e1Browser+"/web:span[@text='*Version Prompting']",10)){
			 customClick(web.image("//web:img[@id='hc0']"));
			 Thread.sleep(1000);
			 syncFrame();

			 if(isError()){
				 web.window(e1BrowserWindow).capturePage();
				 customClick(web.image("//web:img[@id='hc_Cancel']"));
				 Thread.sleep(1000);
				 syncFrame();

				 customClick(web.image("//web:img[@id='hc_Close']"));
				 Thread.sleep(1000);
				 syncFrame();

				 beginStep("[UBESubmit] Failed, Failed in Version Prompting");
				 {
					 getStepResult().setError("Failed in Version Prompting");
				 }
				 endStep();
				 return false;
			 }
		 }
		 if(web.exists(e1Browser+"/web:span[@text='Processing Options ']",10)){
			 customClick(web.image("//web:img[@alt='OK (Ctrl+Alt+O)' or @id='hc_Select']"));
			 syncFrame();
			 if(isError()){
				 web.window(e1BrowserWindow).capturePage();
				 customClick(web.image("//web:img[@id='hc2']"));
				 Thread.sleep(1000);
				 syncFrame();

				 customClick(web.image("//web:img[@id='hc_Close']"));
				 Thread.sleep(1000);
				 syncFrame();
				 beginStep("[UBESubmit] Failed, Failed in Processing Options");
				 {                                
					 getStepResult().setError("Failed in Processing Options");

				 }endStep();
				 return false;
			 }				
		 }
		 int cnt=0;
		 while(!web.exists(e1Browser+"/web:a[@text='Document Setup']",10)){	//loop if doc setup is not identified
			 Thread.sleep(1000);
			 cnt++;
			 if(cnt>60){
				 OSPreferences("Fail");
				 beginStep("[UBEDataSelection] Failed, Failed in Processing Options");
				 {                                
					 fail("Failed in Processing Options");

				 }endStep();
			 }
		 }
		 UBESetXML();
		 if(isError()&& getFrameName().equalsIgnoreCase("Printer Selection")){
			 web.window(e1BrowserWindow).capturePage();
			 customClick(web.image("//web:img[@id='hc_Cancel']"));
			 Thread.sleep(1000);
			 syncFrame();


			 beginStep("[UBESubmit] Failed, Function UBESubmit Failed in Printer Selection Page");
			 {                                
				 getStepResult().setError("Function UBESubmit Failed in Printer Selection Page");

			 }endStep();
			 return false;
		 }
		 customClick(web.image("//web:img[@id='hc_Close']"));
		 Thread.sleep(1000);
		 syncFrame();

		 if((isError())&& (getFrameName().contains("Work With Batch Versions - Available Versions"))){
			 web.window(e1BrowserWindow).capturePage();					
			 customClick(web.image("//web:img[@id='hc_Close']"));
			 Thread.sleep(1000);
			 syncFrame();

			 beginStep("[UBESubmit] Failed, Function UBESubmit Failed in Work With Batch Versions");
			 {                                
				 getStepResult().setError("Function UBESubmit Failed in Work With Batch Versions");

			 }endStep();
			 return false;
		 }
		 info("Ending:Function UBESubmit");
		 return true;			


	 }
	 /************************************************************************************************************
	  * Function: UBEDataSelection  
	  * Description: This Function is used to submit the UBE with multiple data selection. 
	  * Created By: Sravan
	  * Date: Febraury 2011
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *      @param sReportId : Batch to be submitted
	  *      @param sVersionID: Version to be submitted
	  *      @param dataSelections: Multiple dataselections  seperated by semicolons                                
	  * Returns: 
	  *                      @return Nil
	  * **********************************************************************************************************
	  */
	 public void UBEDataSelection(@Arg("sReportId") String sReportId, @Arg("sVersionID") String sVersionID, @Arg("dataSelections") String dataSelections) throws Exception {
		 info("Starting:Function UBEDataSelection");
		 boolean bTC=false;String frame;
		 fastPath("BV");
		 setHeaderText("0", "Batch", sReportId);
		 web.textBox("//web:input_text[@index='0']").fireEvent("onChange");
		 syncFrame();
		 setGridQBEValues(0, "Version="+sVersionID);


		 clickToolBarImage("Find");		 
		 boolean emptyReturn=isError();
		 if(getGridRowCount()==0){
			 web.window(e1BrowserWindow).capturePage();
			 customClick(web.image("//web:img[@id='hc_Close']"));
			 Thread.sleep(1000);
			 syncFrame();
			 //clickToolBarImage("Close");
			 beginStep("[UBEDataSelection] Failed, The UBE "+sReportId+"and/or version "+sVersionID+"not found");
			 {         
				 OSPreferences("Fail");
				 fail("The UBE "+sReportId+"and/or version "+sVersionID+"not found");

			 }endStep();
		 }
		 selectDeselectByRowNo(0, 0);
		 customClick(web.image("//web:img[@id='hc_Select']"));
		 syncFrame();
		 //clickToolBarImage("Select");
		 if(isError()){
			 web.window(e1BrowserWindow).capturePage();
			 customClick(web.image("//web:img[@id='hc_Close']"));
			 Thread.sleep(1000);
			 syncFrame();
			 //clickToolBarImage("Close");
			 beginStep("[UBEDataSelection] Failed, The UBE "+sReportId+"and/or version "+sVersionID+"not found");
			 {                                
				 getStepResult().setError("The UBE "+sReportId+"and/or version "+sVersionID+"not found");

			 }endStep();
		 }
		 if(web.exists(e1Browser+"/web:span[@text='*Version Prompting']",10)){
			 setHeaderCheckBox(0, "DataSelection", true);
			 customClick(web.image("//web:img[@id='hc0']"));
			 syncFrame();
			 if(isError()){
				 web.window(e1BrowserWindow).capturePage();
				 customClick(web.image("//web:img[@id='hc_Cancel']"));
				 Thread.sleep(1000);
				 customClick(web.image("//web:img[@id='hc_Close']"));
				 Thread.sleep(1000);
				 syncFrame();
				 //clickToolBarImage("Close");
				 beginStep("[UBEDataSelection] Failed, Failed in Version Prompting");
				 {
					 getStepResult().setError("Failed in Version Prompting");
				 }
				 endStep();
			 }
		 }else if(web.exists(e1Browser+"/web:span[@text='*Table Conversion Prompting*']",10)){
			 bTC=true;
			 web.checkBox("//web:form[@id='E1PaneForm']/web:input_checkbox[@id='C0_38' or @name='0_38']").check(true);
			 customClick(web.image("//web:img[@id='hc0']"));
		 }
		 String dataSelection[]=Pattern.compile("[;]").split(dataSelections);
		 int webListCount=0;
		 for(int id=0;id<dataSelection.length;id++){
			 //info(id);
			 //info(dataSelection.length);
			 String rowData[]=Pattern.compile("[|]").split(dataSelection[id]);
			 String operator=rowData[0];
			 String leftOperand=rowData[1];
			 String comparision=rowData[2];
			 String rightOperand=rowData[3];
			 if(id>0 && !rightOperand.trim().equalsIgnoreCase("Literal")){
				 if(! web.exists("//web:select[(@name='LeftOperand"+(id+1)+"') and multiple mod 'False']",2)){
					 web.link("//web:span[@text=' Add Row ']").click();
					 syncFrame();
				 }
			 }
			 if(id>0){
				 if(! web.exists("//web:select[(@name='LeftOperand"+(id+1)+"') and multiple mod 'False']",2)){
					 web.link("//web:a[@text=' Add Row ']").click();					
				 }
			 }
			 if(id==0){
				 for(int idx1=0;idx1<8;idx1++){
					 if(web.exists("//web:input_checkbox[@name='Select"+(idx1+1)+"']",10)){
						 web.checkBox("//web:input_checkbox[@name='Select"+(idx1+1)+"']").check(true);
					 }else{
						 break;
					 }
				 }
				 customClick(web.image("//web:img[@id='hc952']"));
				 syncFrame();
			 }
			 //info("left operand: "+ leftOperand+"  Comparision: "+comparision+" right Operand: "+rightOperand);
			 if(! operator.equals("Where")){
				 selectWebListItem(webListCount+0, operator);
				 webListCount=webListCount+1;
			 }
			 selectWebListItem(webListCount+0, leftOperand);
			 selectWebListItem(webListCount+1, comparision);
			 selectWebListItem(webListCount+2, rightOperand);
			 webListCount=webListCount+3;

			 syncFrame();
			 if(rightOperand.equals("Literal")){
				 String literalValue=rowData[4].toUpperCase();
				 String values=rowData[5];
				 if(literalValue.equals("SINGLEVALUE")){
					 web.textBox("//web:input_text[@id='LITtf']").setText(values);
					 web.image("//web:img[@id='hc_Select']").click();
					 syncFrame();
				 }else if(literalValue.equals("RANGEOFVALUES")){
					 String valueRange[]=Pattern.compile("[-]").split(values);
					 if(valueRange.length==1){
						 OSPreferences("Fail");
						 fail("Range Of Values should be given two values");
					 }else{
						 valueRange[0]=valueRange[0].replace("~", "-");
						 valueRange[1]=valueRange[1].replace("~", "-");
						 web.link("//web:a[@text='Range of Values']").click();
						 web.textBox("//web:input_text[@id='LITtfFrom']").setText(valueRange[0]);
						 web.textBox("//web:input_text[@id='LITtfTo']").setText(valueRange[1]);
						 web.image("//web:img[@id='hc_Select']").click();
						 syncFrame();
					 }
				 }else if(literalValue.equals("LISTOFVALUES")){
					 String valueList[]=Pattern.compile("[,]").split(values.replace("-", ","));
					 web.link("//web:a[@text='List of Values']").click();
					 while(! (web.selectBox("//web:select[(@id='litList' or @name='litList') and multiple mod 'False']").getAttribute("length")).equals("0")){
						 web.image("//web:img[@id='hc952']").click();
					 }	
					 for(int iList=0;iList<valueList.length;iList++){

						 if(! valueList[iList].equals("")){
							 info(valueList[iList]);
							 valueList[iList]=valueList[iList].replaceAll("~", "-");
							 if(web.exists("//web:input_text[@id='LITtfList']",6)){
								 web.textBox("//web:input_text[@id='LITtfList']").click();
								 web.textBox("//web:input_text[@id='LITtfList']").setText(valueList[iList]);
								 web.image("//web:img[@id='hc950']").click();
								 syncFrame();
								 //Thread.sleep(10);									
							 }
						 }								
					 }
					 //Thread.sleep(10);							
					 //clickToolBarImage("OK");
					 customClick(web.image("//web:img[@alt='OK (Ctrl+Alt+O)' or @id='hc_Select']"));

					 syncFrame();
					 //Thread.sleep(10);
				 }
			 }
		 }
		 syncFrame();
		 customClick(web.image("//web:img[@alt='OK (Ctrl+Alt+O)' or @id='hc_Select']"));

		 syncFrame();
		 if(isError()){
			 web.window(e1BrowserWindow).capturePage();
			 customClick(web.image("//web:img[@id='hc2']"));
			 customClick(web.image("//web:img[@id='hc_Close']"));
			 Thread.sleep(1000);
			 syncFrame();

			 beginStep("[UBEDataSelection] Failed, Failed after DataSelection");
			 {                                
				 fail("Failed after DataSelection");

			 }endStep();
		 }
		 if(!bTC){
			 if(web.exists(e1Browser+"/web:span[@text='Processing Options ']",10)){
				 customClick(web.image("//web:img[@alt='OK (Ctrl+Alt+O)' or @id='hc_Select']"));
				 syncFrame();
			 }
			 if(isError()){
				 web.window(e1BrowserWindow).capturePage();
				 customClick(web.image("//web:img[@id='hc2']"));
				 Thread.sleep(1000);
				 syncFrame();
				 customClick(web.image("//web:img[@id='hc_Close']"));
				 Thread.sleep(1000);
				 syncFrame();
				 beginStep("[UBEDataSelection] Failed, Failed in Processing Options");
				 {                                
					 fail("Failed in Processing Options");

				 }endStep();
			 }
			 int cnt=0;
			 while(!web.exists(e1Browser+"/web:a[@text='Document Setup']",10)){	// loop if doc setup is not identified
				 Thread.sleep(1000);
				 cnt++;
				 if(cnt>60){
					 OSPreferences("Fail");
					 beginStep("[UBEDataSelection] Failed, Failed in Processing Options");
					 {                                
						 fail("Failed in Processing Options");

					 }endStep();
				 }
			 }
			 UBESetXML();
			 if(isError() && getFrameName().equalsIgnoreCase("Printer Selection")){
				 web.window(e1BrowserWindow).capturePage();
				 customClick(web.image("//web:img[@id='hc_Cancel']"));
				 syncFrame();
				 beginStep("[UBEDataSelection] Failed, Failed in Printer selection Page");
				 {                                
					 fail("Failed in Printer selection Page");

				 }endStep();
			 }
		 }
		 customClick(web.image("//web:img[@id='hc_Close']"));
		 Thread.sleep(1000);
		 syncFrame();
		 if((isError())&& (getFrameName().contains("Work With Batch Versions - Available Versions"))){
			 web.window(e1BrowserWindow).capturePage();					
			 customClick(web.image("//web:img[@id='hc_Close']"));
			 Thread.sleep(1000);
			 syncFrame();
			 beginStep("[UBEDataSelection] Failed, Failed in dataselection");
			 {                                
				 fail("Failed in dataselection");

			 }endStep();
		 }


		 info("Ending:Function UBEDataSelection");
	 }

	 /************************************************************************************************************
	  * Function: UBESetXML  
	  * Description: This function can be used to turn on XML output when submitting a UBE.
	  * 				It will simply click the Document Setup tab, click the OSA Interface checkbox,
	  * 				enter XML in the edit box, then click OK.
	  * Created By: Prakruthi
	  * Date: January 2011
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *      @param Nil             		
	  * Returns: 
	  * 		@return Nil
	  * **********************************************************************************************************
	  */
	 public void UBESetXML() throws Exception {
		 info("Starting:Function UBESetXML");
		 if(docIndex==null){
			 getDocIndex();
		 }
		 String e1Form= "/";
		 if(web.exists("//web:form[@id='E1PaneForm']", 150)){
			 int cnt=0;
			 do{ 
				 web.link(e1Browser+"/web:a[@text='Document Setup']").focus();
				 web.link(e1Browser+"/web:a[@text='Document Setup']").click();
				 //Thread.sleep(1000);
				 cnt=cnt+1;
				 syncFrame();
				 if(cnt>10){
					 OSPreferences("Fail");
					 web.window(e1BrowserWindow).capturePage();
					 fail("Unable to click on Printer selection form");
				 }
			 }while(!web.checkBox(e1Form+"/web:input_checkbox[@id='C0_98']").exists());
			 web.checkBox(e1Form+"/web:input_checkbox[@id='C0_98']").check(true);
			 web.textBox(e1Form+"/web:input_text[@id='C0_100']").click();
			 web.textBox(e1Form+"/web:input_text[@id='C0_100']").setText("XML");
			 web.textBox(e1Form+"/web:input_text[@id='C0_100']").pressTab();
			 clickToolBarImage("OK");

		 }else{
			 web.window(e1BrowserWindow).capturePage();
			 testFailure("E1 Page not exists");
		 }
		 info("Finished:Function UBESetXML ");		
	 }

	 /************************************************************************************************************
	  * Function: UBECloseXML  
	  * Description: Closes XML Browser window plus Submitted Jobs & AVailable Batch Versions forms.
	  * 				This code performs the following actions: Closes XML Browser window plus 
	  * 				Submitted Jobs & AVailable Batch Versions forms and leaves user at Welcome form
	  * NOTE: Use in conjunction with Function UBESelectXMLOutput 
	  * Created By: Prakruthi
	  * Date: January 2011
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *      @param Nil             		
	  * Returns: 
	  * 		@return Nil
	  * **********************************************************************************************************
	  */
	 public void UBECloseXML() throws Exception {
		 info("Starting:Function UBECloseXML");
		 if(web.window(xmlBrowser).exists(150, TimeUnit.SECONDS)){
			 info("xml page exists");
			 web.window(xmlBrowser).close();
			 setErrorRecovery(WebErrorRecovery.ERR_OBJECT_NOT_FOUND_ERROR,ErrorRecoveryAction.Ignore);
			 if(web.exists("/web:dialog_unknown[@text='Do you want to open or save this file?' or @index='0']",10)){
				 web.dialog("/web:dialog_unknown[@text='Do you want to open or save this file?' or @index='0']").clickButton(2);
			 }
			 setErrorRecovery(WebErrorRecovery.ERR_OBJECT_NOT_FOUND_ERROR,ErrorRecoveryAction.ReportErrorAndContinue);
		 }else{
			 beginStep("[UBECloseXML] Failed, XML could not be closed");
			 {
				 //web.window(e1BrowserWindow).capturePage();
				 testFailure("XML could not be closed");
			 }endStep();
		 }
		 info("Finished:Function UBECloseXML ");		
	 }

	 public int openNewWindow(String url) throws  Exception
	 {
		 web.document("//web:document").executeJavaScript("window.open('','_blank')");
		 int i=0;
		 while(web.exists("/web:window[@index='"+i+"']")){
			 //System.out.println(" window i exist:"+i);
			 ++i;
		 }
		 web.window("/web:window[@index='"+(i-1)+"']").navigate(url);
		 delay(3000);
		 return i-1;
	 }

	 
	 /************************************************************************************************************
	  * Function: UBEGetXML
	  * Description: Sequence to access the XML output for a specific report & version.Once you have the 
	  * 				XML report up then turn on 'Record' in QTP and perform an XML checkpoint.
	  * 				This code performs the following actions:
	  * 					- Opens the Batch Versions application, navigates to Submitted
	  * 					- Jobs screen, Finds the report & version of the UBEs specified.
	  * 					- Selects the row returned. Navigates to Row Reports button on toolbar 
	  * 					- and selects the View OSA option.
	  * Created By: Sravan
	  * Modified By: Neha
	  * Date: September 2013
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param sReport - The Report ID and Version (separated by an underscore) to be run (i.e. "R06394_XJDE0002")
	  * Returns: 
	  * 		@return Nil
	  * **********************************************************************************************************
	  */
	 public void UBEGetXML(@Arg("sReport") String sReport) throws Exception {				
		 info("Starting:Function UBEGetXML");
		 if(docIndex==null){
			 getDocIndex();
		 }		 
		 closeXMLBrowsers();
		 String osName = System.getProperty("os.name");
		 String xmlFileLoc = null;
		 File file = null;
		 /*if(osName.equalsIgnoreCase("Windows 8.1") || osName.equalsIgnoreCase("Windows 10") || osName.equalsIgnoreCase("Windows 10.0")){
			 createNewFolderInCDrive();
			 xmlFileLoc = "c:\\ScriptResources\\"+sReport+".xml";
			 file = new File(xmlFileLoc);
		 }else{
			 xmlFileLoc = "c:\\"+sReport+".xml";
			 file = new File(xmlFileLoc);
		 }
		 boolean success = file.delete();
		 if (success) {
			 info("[DeleteFile]: "+xmlFileLoc+" found and Deleted successfully");
		 }else {
			 info("File not exists in the location : "+xmlFileLoc);
		 }*/
		 if(osName.equalsIgnoreCase("Windows 8.1") || osName.equalsIgnoreCase("Windows 10") || osName.equalsIgnoreCase("Windows 10.0")){
				// createNewFolderInCDrive();
				// xmlFileLoc = "c:\\ScriptResources\\"+sReport+".xml";
				 xmlFileLoc="C:\\Users\\"+System.getProperty("user.name")+"\\Downloads\\";//+sReport+".xml";
				 file = new File(xmlFileLoc);
			 }else{
				 xmlFileLoc = "c:\\";//+sReport+".xml";
				 file = new File(xmlFileLoc);
			 }
			File[] listFiles = file.listFiles();
			for(File f : listFiles){
				if(f.getName().contains(""+sReport) && f.getName().contains(".xml")){			
					if (f.delete())
					{
						info("[DeleteFile]: "+f.getName()+" found and Deleted successfully");
					} else {
					    System.out.println("File "+f.getName()+" does not exists.");
					}
				}
			}
			if(osName.equalsIgnoreCase("Windows 8.1") || osName.equalsIgnoreCase("Windows 10") || osName.equalsIgnoreCase("Windows 10.0")){
					// createNewFolderInCDrive();
					// xmlFileLoc = "c:\\ScriptResources\\"+sReport+".xml";
					 xmlFileLoc="C:\\Users\\"+System.getProperty("user.name")+"\\Downloads\\"+sReport+".xml";
					 file = new File(xmlFileLoc);
				 }else{
					 xmlFileLoc = "c:\\"+sReport+".xml";
					 file = new File(xmlFileLoc);
			}
		 fastPath("bv");
		 selectFormMenu("Submitted Jobs");
		 if(sReport.length()>18){
			 sReport=sReport.substring(0, 17);
		 }
		 setGridQBEValues(0,"Job=" + sReport.trim() + "*");
		 clickToolBarImage("Find");
		 if(getGridRowCount()==0){
			 getLogger().error("The UBE and/or Version " + sReport + " was not found.");
			 beginStep("[UBESelectXMLOutput] Failed, The UBE and/or Version " + sReport + " was not found.");
			 {
				 web.window(e1BrowserWindow).capturePage();
				 customClick(web.image("//web:img[@id='hc_Close']"));
				 syncFrame();
				 customClick(web.image("//web:img[@id='hc_Close']"));
				 getStepResult().setError("The UBE and/or Version " + sReport + " was not found.");

			 }endStep();
			 return;
		 }
		 selectDeselectByRowNo(0, 0);
		 /* if(web.exists("//web:img[@alt='Row (Ctrl+Alt+R)' or @id='ROW_EXIT_BUTTON']",10)){
			 customClick(web.image("//web:img[@alt='Row (Ctrl+Alt+R)' or @id='ROW_EXIT_BUTTON']"));
			 info("Clicked on ToolbarImage Row");   
		 }
		 if (web.exists("//web:nobr[@innerText='View OSA ' and @text='View OSA ']",10)){
			 web.element("//web:nobr[@innerText='View OSA ' and @text='View OSA ']").click();
			 info("Clicked on Row Exit item View OSA");
		 }*/
		 selectRowMenu("View OSA");
		 Thread.sleep(5000);
		 int count=0;
		 setErrorRecovery(WebErrorRecovery.ERR_OBJECT_NOT_FOUND_ERROR,ErrorRecoveryAction.Ignore);	

		 info("type of browser:"+browser.getBrowser());
		 
		 if (browser.getBrowser() instanceof FireFoxBrowser){
			
			/* web.element("//web:td[@id='GridLabel0_1.Records']").mouseClick(3,3);
			 if(!web.exists("/web:dialog_unknown[(@text='Enter name of file to save to…' or @text='Save As') and @index='0']",10)){
				 
				 for(int j=0;j<sRepName.length();j++){
					 //info(""+sRepName.charAt(j));
					 if(sRepName.charAt(j)==':')
						 pressHotkeys("SHIFT+;");
					 else if(sRepName.charAt(j)=='\\')
						 pressKeyChar("BACKWARDSLASH");
					 else if(sRepName.charAt(j)=='_')
						 pressHotkeys("SHIFT+-");
					 else
					  pressKeyChar(""+sRepName.charAt(j));
				 }
				 pressKeyChar("Enter");
			 }
			 while(web.exists("/web:dialog_unknown[(@text='Enter name of file to save to…' or @text='Save As') and @index='0']",10)){
				 info("the dialog save as exist");
				 web.dialog("/web:dialog_unknown[(@text='Enter name of file to save to…' or @text='Save As') and @index='0']").focus();
				 web.dialog("/web:dialog_unknown[(@text='Enter name of file to save to…' or @text='Save As') and @index='0']").setText(0, "c:\\"+sReport+".xml");
				 web.dialog("/web:dialog_unknown[(@text='Enter name of file to save to…' or @text='Save As') and @index='0']").clickButton(1);
			 }*/
			 //IF block added by sunil on 10.1.19 if default selection is made on open xml notification
			 if(web.dialog("/web:dialog_unknown[@text='Download' or @index='0']").exists())
			 {
				 web.dialog(105,"/web:dialog_unknown[@text='Download' or @index='0']").selectRadio(0);
				 web.dialog(105,"/web:dialog_unknown[@text='Download' or @index='0']").selectRadio(1);  

				 web.dialog(105,"/web:dialog_unknown[@text='Download' or @index='0']").clickButton(0);
			 }
			 while(web.exists("/web:dialog_unknown[(@text='Enter name of file to save to…' or @text='Save As') and @index='0']",10)){ 
				 info("the dialog save as exist");
				 web.dialog("/web:dialog_unknown[(@text='Enter name of file to save to…' or @text='Save As') and @index='0']").focus();
				 web.dialog("/web:dialog_unknown[(@text='Enter name of file to save to…' or @text='Save As') and @index='0']").setText(0, xmlFileLoc);
				 if(osName.equalsIgnoreCase("Windows 8.1") || osName.equalsIgnoreCase("Windows 10") || osName.equalsIgnoreCase("Windows 10.0")){
					 web.dialog(122, "/web:dialog_unknown[@text='Enter name of file to save to…' or @index='0']").clickButton(1); 
				 }else{
					 web.dialog(122, "/web:dialog_unknown[@text='Enter name of file to save to…' or @index='0']").clickButton(0); 
				 }
			 }
			 if(!web.exists("/web:dialog_unknown[(@text='Enter name of file to save to…' or @text='Save As') and @index='0']",10)){
				 info("file is saved");
				 int xmlWindowIndex;
				 if(osName.equalsIgnoreCase("Windows 8.1") || osName.equalsIgnoreCase("Windows 10") || osName.equalsIgnoreCase("Windows 10.0")){
					  xmlWindowIndex=openNewWindow("file://c:/ScriptResources/"+sReport+".xml");

				 }else{
					 xmlWindowIndex=openNewWindow("file://c:/"+sReport+".xml");
				 }
				 Thread.sleep(5000);
				 count++;			
				 if(count==11){
					 getLogger().error("Click open tried 11 times but xml is not opened");
					 web.window(xmlBrowser).close();
					 web.window(e1BrowserWindow).capturePage();
					 beginStep("[UBEGetXML] Failed,Click open tried 11 times but xml is not opened");
					 {
						 fail("Click open tried 11 times but xml is not opened");
					 }endStep();
					 return;
				 }
			 }
			 else{
				 OSPreferences("Fail");
				 fail("Download dialogue not found, Please check your Browser version & settings");
			 }

			 
		 }
		 else  if ((browser.getBrowser() instanceof ChromeBrowser)){
			 //info("yes ff");
			 if(!web.exists("/web:dialog_unknown[(@text='Enter name of file to save to…' or @text='Save As') or @index='0']",10)){
				 OSPreferences("Fail");
				 fail("Download dialogue not found, Please check your Browser version & settings");
			 }
			 while(web.exists("/web:dialog_unknown[(@text='Enter name of file to save to…' or @text='Save As') or @index='0']",10)){
				 info("the dialog save as exist");
				 web.dialog("/web:dialog_unknown[(@text='Enter name of file to save to…' or @text='Save As') or @index='0']").focus();
				 web.dialog("/web:dialog_unknown[(@text='Enter name of file to save to…' or @text='Save As') or @index='0']").setText(0, xmlFileLoc);
				 if(osName.equalsIgnoreCase("Windows 8.1") || osName.equalsIgnoreCase("Windows 10") || osName.equalsIgnoreCase("Windows 10.0")){
					 web.dialog("/web:dialog_unknown[(@text='Enter name of file to save to…' or @text='Save As') or @index='0']").clickButton(1);
				 }else{
					 web.dialog("/web:dialog_unknown[(@text='Enter name of file to save to…' or @text='Save As') or @index='0']").clickButton(0);
				 }
			 }
			 if(!web.exists("/web:dialog_unknown[(@text='Enter name of file to save to…' or @text='Save As') or @index='0']",10)){
				 info("file is saved");
				 int xmlWindowIndex;
				 if(osName.equalsIgnoreCase("Windows 8.1") || osName.equalsIgnoreCase("Windows 10") || osName.equalsIgnoreCase("Windows 10.0")){
					  xmlWindowIndex=openNewWindow("file://c:/ScriptResources/"+sReport+".xml");
				 }else{
					 xmlWindowIndex=openNewWindow("file://c:/"+sReport+".xml");
				 }

				 Thread.sleep(5000);
				 count++;			
				 if(count==11){
					 getLogger().error("Click open tried 11 times but xml is not opened");
					 web.window(xmlBrowser).close();
					 web.window(e1BrowserWindow).capturePage();
					 beginStep("[UBEGetXML] Failed,Click open tried 11 times but xml is not opened");
					 {
						 fail("Click open tried 11 times but xml is not opened");
					 }endStep();
					 return;
				 }
			 }
			 else{
				 OSPreferences("Fail");
				 fail("Download dialogue not found, Please check your Browser version & settings");
			 }

		 }	

		 else if((browser.getBrowser() instanceof InternetExplorerBrowser) || (browser.getBrowser() instanceof MicrosoftEdgeBrowser)){
			  info("its ie");
			 while(web.notificationBar(e1BrowserWindow).exists()){

				 String text1=web.notificationBar(e1BrowserWindow).getText();
				 info("Notification Text="+text1);
				 if(text1.toLowerCase().contains("do you want to"))
					{
					 web.notificationBar(4,e1BrowserWindow).clickButton("Save");
					}
				 if(text1.contains("download has completed")||(text1.contains("finished downloading")))
				 {
					 info("inside download completed");
					 web.notificationBar(e1BrowserWindow).clickButton("Open");
					 Thread.sleep(5000);
					 break;
				 }
				 if(text1.contains("Would you like to store your password for"))
				 {
					 web.notificationBar(e1BrowserWindow).clickButton("Not for this site");
				 }
				 if(text1.contains("Would you like to make Internet Explorer your default browser"))
				 {
					 web.notificationBar(e1BrowserWindow).clickButton("No");
				 }
				 Thread.sleep(5000);
				 //info("inside ie11 utility");
				 count++;			
				 if(count==11){
					 getLogger().error("Click open tried 11 times but xml is not opened");
					 web.window(xmlBrowser).close();
					 web.window(e1BrowserWindow).capturePage();
					 beginStep("[UBEGetXML] Failed,Click open tried 11 times but xml is not opened");
					 {
						 fail("Click open tried 11 times but xml is not opened");
					 }endStep();
					 return;
				 }
			 }
		 }
		 setErrorRecovery(WebErrorRecovery.ERR_OBJECT_NOT_FOUND_ERROR,ErrorRecoveryAction.ReportErrorAndContinue);
		 if(web.exists("//web:img[@id='hc_Close']",10)){
			 customClick(web.image("//web:img[@id='hc_Close']"));
			 Thread.sleep(1000);
			 syncFrame();           	
		 }else{
			 getLogger().error("Failed to close Submitted Jobs");
			 web.window(e1BrowserWindow).capturePage();
			 beginStep("[UBEGetXML] Failed, Failed to close Submitted Jobs");
			 {
				 getStepResult().setError("Failed to close submitted Jobs");
			 }endStep();
			 return;
		 }
		 customClick(web.image("//web:img[@id='hc_Close']"));
		 syncFrame();
		 setErrorRecovery(WebErrorRecovery.ERR_OBJECT_NOT_FOUND_ERROR,ErrorRecoveryAction.ReportErrorAndContinue);
		 info("Finished:Function UBEGetXML ");  
	 }

	 /************************************************************************************************************
	  * Function: UBEGetPDF
	  * Description: Sequence to access the PDF output for a specific report & version.Once you have the 
	  * 				PDF report up then turn on 'Record' in QTP and save the PDF file to the location c:\Text.pdf.
	  * 				This code performs the following actions:
	  * 					- Opens the Batch Versions application, navigates to Submitted
	  * 					- Jobs screen, Finds the report & version of the PDF specified.
	  * 					- Selects the row returned. Navigates to Row Reports button on toolbar 
	  * 					- and selects the View PDF option.
	  * Created By: Amutha
	  * Modified BY:Sravan
	  * Modified By:Neha
	  * Date:  September 2013
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param sReport - The Report ID and Version (separated by an underscore) to be run (i.e. "R06394_XJDE0002")
	  * Returns: 
	  * 		@return Nil
	  * **********************************************************************************************************
	  */
	 public void UBEGetPDF(@Arg("sReport") String sReport) throws Exception {				
		 info("Starting:Function UBEGetPDF");
		 if(docIndex==null){
			 getDocIndex();
		 }
		 String osName = System.getProperty("os.name");
		 String pdfFileLoc = null;
		 File file = null;
		 /*if(osName.equalsIgnoreCase("Windows 8.1") || osName.equalsIgnoreCase("Windows 10") || osName.equalsIgnoreCase("Windows 10.0")){
			 createNewFolderInCDrive();
			 pdfFileLoc = "c:\\ScriptResources\\"+sReport+".pdf";
			 file = new File(pdfFileLoc);
		 }else{
			 pdfFileLoc = "c:\\"+sReport+".pdf";
			 file = new File(pdfFileLoc);
		 }
		 boolean success = file.delete();
		 if (success) {
			 info("[DeleteFile]: "+pdfFileLoc+" found and Deleted successfully");
		 }else {
			 info("File not exists");
		 }*/
		 if(osName.equalsIgnoreCase("Windows 8.1") || osName.equalsIgnoreCase("Windows 10") || osName.equalsIgnoreCase("Windows 10.0")){
				// createNewFolderInCDrive();
				// pdfFileLoc = "c:\\ScriptResources\\"+sReport+".pdf";
				 pdfFileLoc="C:\\Users\\"+System.getProperty("user.name")+"\\Downloads\\";//+sReport+".pdf";
				 file = new File(pdfFileLoc);
			 }else{
				 pdfFileLoc = "c:\\";//+sReport+".pdf";
				 file = new File(pdfFileLoc);
			 }

			 File[] listFiles = file.listFiles();
			 for(File f : listFiles){
				 if(f.getName().contains(""+sReport) && f.getName().contains(".pdf")){			
					 if (f.delete())
					 {
						 info("[DeleteFile]: "+f.getName()+" found and Deleted successfully");
					 } else {
						 System.out.println("File "+f.getName()+" does not exists.");
					 }
				 }
			 }
			 
			 if(osName.equalsIgnoreCase("Windows 8.1") || osName.equalsIgnoreCase("Windows 10") || osName.equalsIgnoreCase("Windows 10.0")){
				 // createNewFolderInCDrive();
				 // pdfFileLoc = "c:\\ScriptResources\\"+sReport+".pdf";
				 pdfFileLoc="C:\\Users\\"+System.getProperty("user.name")+"\\Downloads\\"+sReport+".pdf";
				 file = new File(pdfFileLoc);
			 }else{
				 pdfFileLoc = "c:\\"+sReport+".pdf";
				 file = new File(pdfFileLoc);
			 }
		 fastPath("bv");
		 selectFormMenu("Submitted Jobs");
		 if(sReport.length()>18){
			 sReport=sReport.substring(0, 17);
		 }
		 setGridQBEValues(0,"Job=" + sReport.trim() + "*");
		 clickToolBarImage("Find");
		 int i=getGridRowCount();
		 if(i==0){
			 getLogger().error("The PDF and/or Version " + sReport + " was not found.");
			 beginStep("[UBEGetPDF] Failed, The PDF and/or Version " + sReport + " was not found.");
			 {
				 web.window(e1BrowserWindow).capturePage();
				 customClick(web.image("//web:img[@id='hc_Close']"));
				 syncFrame();
				 customClick(web.image("//web:img[@id='hc_Close']"));
				 getStepResult().setError("The PDF and/or Version " + sReport + " was not found.");

			 }endStep();
			 return;
		 }
		 selectDeselectByRowNo(0, 0);
		 if(browser.getBrowser() instanceof ChromeBrowser){
			 if(web.exists("//web:img[@alt='Row (Ctrl+Alt+R)' or @id='ROW_EXIT_BUTTON']",10)){
				 web.image("//web:img[@alt='Row (Ctrl+Alt+R)' or @id='ROW_EXIT_BUTTON']").click();
				 info("Clicked on ToolbarImage Row");   
			}
			if (web.exists("//web:nobr[@innerText='View PDF ' or @text='View PDF ']",10)){
				 web.element("//web:nobr[@innerText='View PDF ' or @text='View PDF ']").click();
				 info("Clicked on Row Exit item View PDF");
			}
		 }else{
			 //For firefox browser selectRowMenu is not working.
			 selectRowMenu("View PDF");
		 }
		 Thread.sleep(5000);
		 int count=0;	
		 setErrorRecovery(WebErrorRecovery.ERR_OBJECT_NOT_FOUND_ERROR,ErrorRecoveryAction.Ignore);
		 info("type of browser:"+browser.getBrowser());
		 if ((browser.getBrowser() instanceof ChromeBrowser)){
			 //info("yes ff");
			 if(!web.exists("/web:dialog_unknown[(@text='Enter name of file to save to…' or @text='Save As') and @index='0']",10)){
				 OSPreferences("Fail");
				 fail("Download dialogue not found, Please check your Browser version & settings");
			 }
			 while(web.exists("/web:dialog_unknown[(@text='Enter name of file to save to…' or @text='Save As') and @index='0']",10)){
				 info("the dialog save as exist");
				 web.dialog("/web:dialog_unknown[(@text='Enter name of file to save to…' or @text='Save As') and @index='0']").focus();
				 web.dialog("/web:dialog_unknown[(@text='Enter name of file to save to…' or @text='Save As') and @index='0']").setText(0, pdfFileLoc);
				// web.dialog("/web:dialog_unknown[(@text='Enter name of file to save to…' or @text='Save As') and @index='0']").clickButton(0);
				 if(osName.equalsIgnoreCase("Windows 8.1") || osName.equalsIgnoreCase("Windows 10") || osName.equalsIgnoreCase("Windows 10.0")){
					 web.dialog(122, "/web:dialog_unknown[@text='Enter name of file to save to…' or @index='0']").clickButton(1); 
				 }else{
					 web.dialog(122, "/web:dialog_unknown[@text='Enter name of file to save to…' or @index='0']").clickButton(0); 
				 }
			 }
			 if(!web.exists("/web:dialog_unknown[(@text='Enter name of file to save to…' or @text='Save As') and @index='0']",10)){
				 info("file is saved");

			 }
			 else{
				 OSPreferences("Fail");
				 fail("Download dialogue not found, Please check your Browser version & settings");
			 }
		 }	
		 else  if (browser.getBrowser() instanceof FireFoxBrowser){
				
				/* web.element("//web:td[@id='GridLabel0_1.Records']").mouseClick(3,3);
				 if(!web.exists("/web:dialog_unknown[(@text='Enter name of file to save to…' or @text='Save As') and @index='0']",10)){
					 
					 for(int j=0;j<sRepName.length();j++){
						 //info(""+sRepName.charAt(j));
						 if(sRepName.charAt(j)==':')
							 pressHotkeys("SHIFT+;");
						 else if(sRepName.charAt(j)=='\\')
							 pressKeyChar("BACKWARDSLASH");
						 else if(sRepName.charAt(j)=='_')
							 pressHotkeys("SHIFT+-");
						 else
						  pressKeyChar(""+sRepName.charAt(j));
					 }
					 pressKeyChar("Enter");
				 }
				 while(web.exists("/web:dialog_unknown[(@text='Enter name of file to save to…' or @text='Save As') and @index='0']",10)){
					 info("the dialog save as exist");
					 web.dialog("/web:dialog_unknown[(@text='Enter name of file to save to…' or @text='Save As') and @index='0']").focus();
					 web.dialog("/web:dialog_unknown[(@text='Enter name of file to save to…' or @text='Save As') and @index='0']").setText(0, "c:\\"+sReport+".xml");
					 web.dialog("/web:dialog_unknown[(@text='Enter name of file to save to…' or @text='Save As') and @index='0']").clickButton(1);
				 }*/
				 
			 if(web.dialog("/web:dialog_unknown[@text='Download' or @index='0']").exists())
			 {
				 web.dialog(105,"/web:dialog_unknown[@text='Download' or @index='0']").selectRadio(0);
				 web.dialog(105,"/web:dialog_unknown[@text='Download' or @index='0']").selectRadio(1);  

				 web.dialog(105,"/web:dialog_unknown[@text='Download' or @index='0']").clickButton(0);
			 }
				 while(web.exists("/web:dialog_unknown[(@text='Enter name of file to save to…' or @text='Save As') and @index='0']",10)){ 
					 info("the dialog save as exist");
					 web.dialog("/web:dialog_unknown[(@text='Enter name of file to save to…' or @text='Save As') and @index='0']").focus();
					 web.dialog("/web:dialog_unknown[(@text='Enter name of file to save to…' or @text='Save As') and @index='0']").setText(0, pdfFileLoc);
					 if(osName.equalsIgnoreCase("Windows 8.1") || osName.equalsIgnoreCase("Windows 10") || osName.equalsIgnoreCase("Windows 10.0")){
						 web.dialog(122, "/web:dialog_unknown[@text='Enter name of file to save to…' or @index='0']").clickButton(1); 
					 }else{
						 web.dialog(122, "/web:dialog_unknown[@text='Enter name of file to save to…' or @index='0']").clickButton(0); 
					 }
				 }
				 if(!web.exists("/web:dialog_unknown[(@text='Enter name of file to save to…' or @text='Save As') and @index='0']",10)){
					 info("file is saved");
				 }
				 else{
					 OSPreferences("Fail");
					 fail("Download dialogue not found, Please check your Browser version & settings");
				 }
		 } else if(browser.getBrowser() instanceof InternetExplorerBrowser || browser.getBrowser() instanceof MicrosoftEdgeBrowser){
			 //info("its ie");

			 while(web.notificationBar(e1BrowserWindow).exists())
			 {
				 String text1=web.notificationBar(e1BrowserWindow).getText();
				 info("Notification Text="+text1);
				 if(text1.toLowerCase().contains("do you want to")  )
				 {
					 web.notificationBar(4,e1BrowserWindow).selectOptionBy("Save", "Save as");
					 Thread.sleep(7000);
				 }
				 else if(text1.contains("download has completed") || text1.contains("finished downloading"))
				 {
					 info("Download has completed.");
					 break;
				 }
				 else if(text1.contains("Would you like to store your password for"))
				 {
					 web.notificationBar(e1BrowserWindow).clickButton("Not for this site");
				 }
				 else if(text1.contains("Would you like to make Internet Explorer your default browser"))
				 {
					 web.notificationBar(e1BrowserWindow).clickButton("No");
				 }
				
				 if(web.exists("/web:dialog_unknown[@text='Save As' or @index='0']", 10))
				 {
					 info("the dialog open pdf exist");
					 web.dialog("/web:dialog_unknown[@text='Save As' or @index='0']").setText(0,""+pdfFileLoc);
					 web.dialog("/web:dialog_unknown[@text='Save As' or @index='0']").clickButton(0);
					 Thread.sleep(6000);
					 info("the dialog save pdf clicked");
				 }
				 else
				 {
					 fail("save As dialog box does not exists");
				 }
				 //web.notificationBar(4,e1BrowserWindow).clickButton("Close");

			 }
		 }
		 setErrorRecovery(WebErrorRecovery.ERR_OBJECT_NOT_FOUND_ERROR,ErrorRecoveryAction.ReportErrorAndContinue);
		 if(web.exists("//web:img[@id='hc_Close']",10)){
			 customClick(web.image("//web:img[@id='hc_Close']"));
			 syncFrame();
			 Thread.sleep(10);                	
		 }else{
			 getLogger().error("Failed to close Submitted Jobs");
			 web.window(e1BrowserWindow).capturePage();
			 beginStep("[UBEGetPDF] Failed, Failed to close Submitted Jobs");
			 {
				 getStepResult().setError("Failed to close submitted Jobs");
			 }endStep();
			 return;
		 }
		 customClick(web.image("//web:img[@id='hc_Close']"));
		 syncFrame();
		 info("Finished:Function UBEGetPDF");  
	 }

	 /************************************************************************************************************
	  * Function: UBEWaitAndGetXML
	  * Description: Sequence to access the XML output for a specific report & version.Once you have the 
	  * 				XML report up then turn on 'Record' in QTP and perform an XML checkpoint.
	  * 				This code performs the following actions:
	  * 					- Opens the Batch Versions application, navigates to Submitted
	  * 					- It checks the status and clicks Find until the status	changes to E or D 
	  * 					  or the wait time expires.
	  * 					- Jobs screen, Finds the report & version of the UBEs specified.
	  * 					- Selects the row returned. Navigates to Row Reports button on toolbar 
	  * 					- and selects the View OSA option.
	  * Created By: Govardhan
	  * Date: August 2012
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param sReport - The Report ID and Version (separated by an underscore) to be run (i.e. "R06394_XJDE0002")
	  * 		@param iIterations - No: of times find will be clicked
	  * Returns: 
	  * 		@return Nil
	  * **********************************************************************************************************
	  */
	 public boolean UBEWaitAndGetXML(@Arg("sReport") String sReport,@Arg("iIterations") int iIterations) throws Exception {				
		 info("Starting:Function UBEWaitAndGetXML");
		 boolean emptyReturn=true;
		 int iWait=0,flag=0;

		 //UBECloseXML();
		 closeXMLBrowsers();

		 try { // This try block helps to close the opened application(s) properly with 'finally' association
			 if(iIterations == 0){
				 iWait =1;//Loop at least once
			 } else if(iIterations>0){
				 iWait = iIterations;
			 }
			 fastPath("WSJ");


			 //Added by Govardhan
			 while(true) {
				 if(!web.exists("//web:span[@text='*Submitted Job Search']")) {
					 info("Submitted Job Search frame is being opened...");
				 }
				 else {
					 if(web.exists("//web:span[@text='*Submitted Job Search']") && (web.exists("//web:img[@alt='Help*']") || web.exists("//web:img[@alt='About (Ctrl+Shift+J)']") || web.exists("//web:td[@alt='About (Ctrl+Shift+J)']")||web.exists("//web:a[@text='About (Ctrl+Shift+J)']"))) {
						 info("Navigation happend successfully...");
						 break;
					 }
					 else
						 continue;

				 }
			 } // while
			 syncFrame();
			 /***********************************/

			 if(sReport.length()>18){
				 sReport=sReport.substring(0, 17);
			 }
			 setGridQBEValues(0,"Job=" + sReport.trim() + "*");
			 customClick(web.image("//web:img[@alt='Find*']"));
			 Thread.sleep(1000);
			 syncFrame();
			 if(getGridRowCount()==0){
				 getLogger().error("The UBE and/or Version " + sReport + " was not found.");
				 beginStep("[UBESelectXMLOutput] Failed, The UBE and/or Version " + sReport + " was not found.");
				 {
					 web.window(e1BrowserWindow).capturePage();
					 customClick(web.image("//web:img[@id='hc_Close']"));
					 Thread.sleep(1000);
					 syncFrame();
					 //customClick(web.image("//web:img[@id='hc_Close']"));
					 //Thread.sleep(1000);
					 //syncFrame();
					 getStepResult().setError("The UBE and/or Version " + sReport + " was not found.");

				 }endStep();
				 emptyReturn=false;
				 //flag=2;
				 int exceptionRequired = 10/0; //ArithmeticException
			 }
			 // Validation for 'Status' to 'D' starts from here
			 String gridId = getGridObjReference(0);
			 String colIndex = getColIndexForColName(gridId, "Status");
			 //info("Grid ID = "+gridId+"  Col Index = "+colIndex);
			 String[] sStatus=null;
			 for(int iLoop=0;iLoop<iWait;iLoop++){
				 sStatus = web.document(e1Browser).executeJsFunction("getGridRowCellValue", gridId.toString(),"0",colIndex);
				 //info("Status = "+sStatus[0]);
				 if( sStatus[0].equalsIgnoreCase("D")){
					 //info("Inside IF status = D");
					 info("Passed: UBEWait - UBE instance for UBE and Version " + sReport + " completed successfully.");
					 beginStep("[UBEWait]  Passed. UBE Wait completed successfully", 0);
					 {
						 getStepResult().isPassed();
					 }endStep();
					 break; //Exit For
				 } else if(sStatus[0].equalsIgnoreCase("E")){
					 //info("Inside else if status = E");
					 setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.Fail);
					 OSPreferences("Fail");
					 getLogger().error("ERROR: UBE Wait - UBE instance for UBE and Version " + sReport + " ended in error.");	
					 beginStep("[UBEWait] Failed, UBE Wait - UBE instance for UBE and Version " + sReport + " ended in error.");
					 {
						 web.window(e1BrowserWindow).capturePage();
						 fail(" UBE Wait - UBE instance for UBE and Version " + sReport + " ended in error.");
					 }endStep();
					 setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.ReportErrorAndContinue);
					 break; //Exit For
				 }
				 customClick(web.image("//web:img[@alt='Find*']"));
				 Thread.sleep(1000);
				 syncFrame();

			 } // for
			 if(!sStatus[0].equalsIgnoreCase("D")){
				 setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.Fail);
				 //info("Inside if status != D");
				 getLogger().error("ERROR: UBE Wait - UBE instance for UBE and Version " + sReport + "did not finish or errored out within "+ iIterations+" clicks.  The last status was "+sStatus[0]+" .");	
				 beginStep("[UBEWait] Failed, UBE Wait - UBE instance for UBE and Version " + sReport + "did not finish or errored out within "+ iIterations+" clicks.  The last status was "+sStatus[0]+" .");
				 {
					 OSPreferences("Fail");
					 web.window(e1BrowserWindow).capturePage();
					 fail(" UBE Wait - UBE instance for UBE and Version " + sReport + "did not finish or errored out within "+ iIterations+" clicks.  The last status was "+sStatus[0]+" .");
				 }endStep();		    
				 getLogger().error("ERROR: UBE Wait - Function UBEWait Failed, Exiting ");	
				 beginStep("[UBECloseXML] Failed, Function UBEWait Failed, Exiting ");
				 {
					 web.window(e1BrowserWindow).capturePage();
					 fail("Failed: Function UBEWait Failed, Exiting ");
				 }endStep();
				 emptyReturn=false;

				 int exceptionRequired = 10/0; //ArithmeticException
			 } // if
			 //Validation for 'Status' to 'D' is over...

			 selectDeselectByRowNo(0, 0);
			 if(web.exists("//web:img[@alt='Row (Ctrl+Alt+R)' or @id='ROW_EXIT_BUTTON']",10)){
				 customClick(web.image("//web:img[@alt='Row (Ctrl+Alt+R)' or @id='ROW_EXIT_BUTTON']"));
				 Thread.sleep(2000);
				 info("Clicked on ToolbarImage Row");   
			 }
			 if (web.exists("//web:nobr[@innerText='View OSA ' and @text='View OSA ']",10)){
				 web.element("//web:nobr[@innerText='View OSA ' and @text='View OSA ']").click();
				 info("Clicked on Row Exit item View OSA");
			 }
			 //selectRowMenu("View OSA");
			 Thread.sleep(5000);
			 int count=0;
			 setErrorRecovery(WebErrorRecovery.ERR_OBJECT_NOT_FOUND_ERROR,ErrorRecoveryAction.Ignore);

			 String version=getIEVersion();
			 if(version.equals("8"))
			 {
				 if(!web.exists("/web:dialog_unknown[@text='Do you want to open or save this file?' or @index='0']",10)){
					 OSPreferences("Fail");
					 fail("Download dialogue not found, Please check your Browser version & settings");
				 }
				 while(web.exists("/web:dialog_unknown[@text='Do you want to open or save this file?' or @index='0']",10)){
					 web.dialog("/web:dialog_unknown[@text='Do you want to open or save this file?' or @index='0']").clickButton(0);
					 Thread.sleep(5000);
					 count++;			
					 if(count==4){
						 getLogger().error("Click open tried 11 times but xml is not opened");
						 web.window(xmlBrowser).close();
						 web.window(e1BrowserWindow).capturePage();
						 beginStep("[UBEGetXML] Failed,Click open tried 11 times but xml is not opened");
						 {
							 fail("Click open tried 11 times but xml is not opened");
						 }endStep();
						 emptyReturn=false;
						 int exceptionRequired = 10/0; //ArithmeticException
					 }
				 } 
			 }
			 else
			 {
				 while(web.notificationBar(e1BrowserWindow).exists()){
					 web.notificationBar(4,e1BrowserWindow).clickButton("Save");
					 web.notificationBar(4,e1BrowserWindow).clickButton("Open");
					 Thread.sleep(5000);
					 count++;			
					 if(count==11){
						 getLogger().error("Click open tried 11 times but xml is not opened");
						 web.window(xmlBrowser).close();
						 web.window(e1BrowserWindow).capturePage();
						 beginStep("[UBEGetXML] Failed,Click open tried 11 times but xml is not opened");
						 {
							 fail("Click open tried 11 times but xml is not opened");
						 }endStep();
						 return false;
					 }
				 }
			 }
			 setErrorRecovery(WebErrorRecovery.ERR_OBJECT_NOT_FOUND_ERROR,ErrorRecoveryAction.ReportErrorAndContinue);

			 if(web.exists("//web:img[@id='hc_Close']",10)){
				 customClick(web.image("//web:img[@id='hc_Close']"));
				 Thread.sleep(1000);
				 syncFrame();
				 Thread.sleep(10);                	
			 }else{
				 getLogger().error("Failed to close Submitted Jobs");
				 web.window(e1BrowserWindow).capturePage();
				 beginStep("[UBEGetXML] Failed, Failed to close Submitted Jobs");
				 {
					 getStepResult().setError("Failed to close submitted Jobs");
				 }endStep();
				 emptyReturn=false;
				 int exceptionRequired = 10/0; //NullPointerException
			 }

			 //customClick(web.image("//web:img[@id='hc_Close']"));
			 //Thread.sleep(1000);
			 //syncFrame();
		 } // try
		 catch(Exception e){
			 flag=1;
			 emptyReturn=false;
			 info("Functionality ended with Failures...");
			 //e.printStackTrace();
		 }
		 finally {
			 if(flag==1) {
				 info("Applications being closed properly...");
				 if(web.exists(e1Browser+"/web:span[@text='*Submitted Job Search']",5)) {
					 customClick(web.image("//web:img[@alt='Close*']"));
					 Thread.sleep(1000);
					 syncFrame();
				 }
				 /* if(web.exists(e1Browser+"/web:span[@text='*Work With Batch Versions - Available Versions']",10)) {
					 customClick(web.image("//web:img[@alt='Close*']"));
					 Thread.sleep(1000);
					 syncFrame();
				 }*/
			 } // it will give no effect once functionality got passed without any issues
		 }
		 valCount=valCount+1;
		 info("Finished:Function UBEWaitAndGetXML ");  
		 OSPreferences("ReportErrorAndContinue");
		 return emptyReturn;
	 }
	 /************************************************************************************************************
	  * Function: UBESubmitAndWait
	  * Description: This is a wrapper function that calls all three UBE functions in succession:
	  * 				UBEClearResults()
	  * 				UBESubmit()
	  * 				UBEWait()
	  * 				This function should be used when a simple UBE needs to be run.
	  * 				A default wait period of 10 minutes is used.
	  * Created By: Prakruthi
	  * Date: March 2011
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *      @param sReport: The UBE ID and version to run, with underscore as the separator 
	  *      		(i.e. "R06394_XJDE0001")                                  
	  * Returns: 
	  * @return 
	  *      @return True if all three functions return True
	  *				False if the function does not complete successfully
	  * **********************************************************************************************************
	  */
	 public boolean UBESubmitAndWait(@Arg("sReport") String sReport) throws Exception {				
		 info("Starting:Function UBESubmitAndWait");
		 info("calling UBEClear");
		 if(!UBEClear(sReport)){

			 beginStep("[UBESubmitAndWait] Failed, UBEClear failed. Exiting");
			 {
				 web.window(e1BrowserWindow).capturePage();
				 fail("UBEClear failed. Exiting..");

			 }endStep();
			 //return false;
		 }
		 info("finished UBEClear");
		 info("calling UBESubmit");
		 if(!UBESubmit(sReport)){

			 beginStep("[UBESubmitAndWait] Failed, UBESubmit failed. Exiting");
			 {
				 web.window(e1BrowserWindow).capturePage();
				 fail("UBESubmit failed. Exiting..");

			 }endStep();
			 return false;
		 }
		 info("finished UBESubmit");
		 info("calling UBEWait");
		 if(!UBEWait(sReport, 10)){

			 beginStep("[UBESubmitAndWait] Failed, UBEWait failed. Exiting");
			 {
				 web.window(e1BrowserWindow).capturePage();
				 fail("UBEWait failed. Exiting..");

			 }endStep();
			 return false;
		 }
		 info("finished UBEWait");
		 info("Finished:Function UBESubmitAndWait ");
		 return true;
	 }
	 /**************************************************************************************************************
	  * Function: validatePDFContainsText
	  * Description:Saves the pdf to C: drive from submitted jobs screen and validates if expected text exists
	  * Created By: Sravan
	  * To be incorporated: Nil
	  * @param sReport Batch report with Version
	  * @param text Text string to find in the PDF file
	  *************************************************************************************************************/
	 public void validatePDFContainsText(@Arg("sReport")String sReport, @Arg("text")String text) throws Exception {
		 UBEGetPDF(sReport);
		 assertPDFContainsText(sReport, text);

	 }
	 /**************************************************************************************************************
	  * Function: validatePDFNotContainsText
	  * Description:Saves the pdf to C: drive from submitted jobs screen and validates if expected text not exists
	  * Created By: Sravan
	  * To be incorporated: Nil
	  * @param sReport Batch report with Version
	  * @param text Text string to find in the PDF file
	  *************************************************************************************************************/
	 public void validatePDFNotContainsText(@Arg("sReport")String sReport, @Arg("text")String text) throws Exception {
		 UBEGetPDF(sReport);
		 assertPDFNotContainsText(sReport, text);

	 }
	 /**************************************************************************************************************
	  * Function: assertPDFContainsText
	  * Description:Assert that a PDF file contains a particular string of text.If the test fails, fail the script
	  * Created By: OATS
	  * Modified By: Sravan
	  * To be incorporated: Nil
	  * @param sReport Batch report with Version
	  * @param text Text string to find in the PDF file
	  *************************************************************************************************************/
	 public void assertPDFContainsText(@Arg("sReport")String sReport, @Arg("text")String text) throws Exception {
			// String pdfFile="c:\\"+sReport+".pdf";
			 info("Starting Function [assertPDFContainsText].");
			 text=text.replaceAll(" ", "");
			 String aText[]=Pattern.compile("[;]").split(text);
			
			 String osName = System.getProperty("os.name");
			 String pdfFile = null;
			 /*if(osName.equalsIgnoreCase("Windows 8.1") || osName.equalsIgnoreCase("Windows 10") || osName.equalsIgnoreCase("Windows 10.0")){
				// createNewFolderInCDrive();
				 pdfFile="C:\\Users\\"+System.getProperty("user.name")+"\\Downloads\\"+sReport+".pdf";
			 }else{
				 pdfFile = "c:\\"+sReport+".pdf";
			 }
			info("Pdf file location : "+pdfFile);*/
			 File file = null;
	            if(osName.equalsIgnoreCase("Windows 8.1") || osName.equalsIgnoreCase("Windows 10") || osName.equalsIgnoreCase("Windows 10.0")){
	                  // createNewFolderInCDrive();
	                  pdfFile="C:\\Users\\"+System.getProperty("user.name")+"\\Downloads\\";//+sReport+".pdf";
	                  file = new File(pdfFile);
	                  File[] listFiles = file.listFiles();
	                  for(File f : listFiles){
	                        // System.out.println("File name : "+f.getName());
	                        if(f.getName().contains(""+sReport) && f.getName().contains(".pdf")){                  
	                        pdfFile="C:\\Users\\"+System.getProperty("user.name")+"\\Downloads\\"+f.getName();
	                              break;
	                        }
	                  }
	            }else{
	                  pdfFile = "c:\\"+sReport+".pdf";
	            }
	            info("Pdf file location : "+pdfFile);

			 if (new File(pdfFile).exists() == false) {
				 throw new ScriptException("PDF file does not exist: " + pdfFile, null, "PDF_NOT_FOUND");
			 }
			 PDDocument doc = new PDDocument();
			 try
			 {
				 doc = PDDocument.load(pdfFile, true);
				 PDFTextStripper textStripper = new PDFTextStripper("UTF-8");
				 String pdfText = textStripper.getText(doc);
				 pdfText=pdfText.replaceAll(newline,"");
				 pdfText=pdfText.replaceAll(" ","");
				 //String nextlinechar=pdfText.substring(7, 8);
				 //info("Actual PDF value: "+pdfText);
				 //pdfText=pdfText.replaceAll(nextlinechar,"");
				 info("Actual PDF value: "+pdfText);
				 for(int a=0;a<aText.length;a++){
					 //aText[a].replaceAll(" ", "");

					 if (!pdfText.contains(aText[a].trim())) {
						 testFailure("PDF file does NOT contain the text: " +aText[a]);
						 //throw new ScriptException("PDF file does NOT contain the text: " +aText[a], null, "PDF_ASSERTION_FAILURE");
					 }else{
						 info("PDF file contains the text: " + aText[a]);
					 }
				 }
			 }catch(Exception e){}
			 finally
			 {
				 if( doc != null )
				 {
					 doc.close();
				 }
			 } 
			 valCount=aText.length+valCount;     
			 info("Finishing Function [assertPDFContainsText].");
		 }

	 /**************************************************************************************************************
	  * Function: assertPDFNotContainsText
	  * Description:Assert that a PDF file does not contain a particular string of text.
	  * Created By: OATS
	  * Modified By: Sravan
	  * To be incorporated: Nil
	  * @param sReport Batch report with Version
	  * @param text Text string to find in the PDF file
	  *************************************************************************************************************/
	 public void assertPDFNotContainsText(@Arg("sReport")String sReport, @Arg("text")String text) throws Exception {
			// String pdfFile="c:\\"+sReport+".pdf";
			 text=text.replaceAll(" ", "");
			 String aText[]=Pattern.compile("[;]").split(text);
			 String pdfFile = null;
			 String osName = System.getProperty("os.name");
			 /*if(osName.equalsIgnoreCase("Windows 8.1") || osName.equalsIgnoreCase("Windows 10") || osName.equalsIgnoreCase("Windows 10.0")){
				 //createNewFolderInCDrive();
				 pdfFile="C:\\Users\\"+System.getProperty("user.name")+"\\Downloads\\"+sReport+".pdf";
			 }else{
				 pdfFile = "c:\\"+sReport+".pdf";
			 }*/File file = null;
	            if(osName.equalsIgnoreCase("Windows 8.1") || osName.equalsIgnoreCase("Windows 10") || osName.equalsIgnoreCase("Windows 10.0")){
	                  // createNewFolderInCDrive();
	                  pdfFile="C:\\Users\\"+System.getProperty("user.name")+"\\Downloads\\";//+sReport+".pdf";
	                  file = new File(pdfFile);
	                  File[] listFiles = file.listFiles();
	                  for(File f : listFiles){
	                        // System.out.println("File name : "+f.getName());
	                        if(f.getName().contains(""+sReport) && f.getName().contains(".pdf")){                  
	                        pdfFile="C:\\Users\\"+System.getProperty("user.name")+"\\Downloads\\"+f.getName();
	                              break;
	                        }
	                  }
	            }else{
	                  pdfFile = "c:\\"+sReport+".pdf";
	            }
	            info("Pdf file location : "+pdfFile);

			 if (new File(pdfFile).exists() == false) {
				 throw new ScriptException("PDF file does not exist: " + pdfFile, null, "PDF_NOT_FOUND");
			 }
			 PDDocument doc = new PDDocument();
			 try{
				 doc = PDDocument.load(pdfFile, true);
				 PDFTextStripper textStripper = new PDFTextStripper("UTF-8");
				 String pdfText = textStripper.getText(doc);
				 pdfText=pdfText.replaceAll(newline,"");
				 pdfText=pdfText.replaceAll(" ","");
				 //String nextlinechar=pdfText.substring(7, 8);
				 //System.out.println(nextlinechar);
				 //info("Actual PDF value: "+pdfText);
				 //pdfText=pdfText.replaceAll(nextlinechar,"");
				 info("Actual PDF value: "+pdfText);
				 for(int a=0;a<aText.length;a++){
					 //aText[a].replaceAll(" ", "");

					 if (pdfText.contains(aText[a].trim())) {
						 testFailure("PDF file  contain the text: " +aText[a]);
						 //throw new ScriptException("PDF file does NOT contain the text: " +aText[a], null, "PDF_ASSERTION_FAILURE");
					 }else{
						 info("PDF file does not contains the text: " + aText[a]);
					 }
				 }         
			 }catch(Exception e){}
			 finally{
				 if( doc != null ){
					 doc.close();
				 }
			 }  
			 valCount=aText.length+valCount;
		 }
	 /**************************************************************************************************************
	  * Function: validateCrmSFAPdf
	  * Description:This function is used to validate repoerts in CRM SFA Scripts
	  * Modified By: Sravan
	  * To be incorporated: Nil
	  * @param sReport Batch report with Version
	  * @param text Text string to find in the PDF file
	  *************************************************************************************************************/
	 public void validateCrmSFAPdf(@Arg("report") String report,@Arg("text") String text) throws Exception {			
		 String sButtonName="Next >>";
		 File file = new File("c:\\"+report+".pdf");
		 boolean success = file.delete();
		 if (success) {
			 info("[DeleteFile]: c:\\"+report+".pdf found and Deleted successfully");
		 }else {
			 info("File not exists");
		 }
		 info("Starting clickWebButton");
		 clickWebButton(0, sButtonName);
		 setErrorRecovery(WebErrorRecovery.ERR_OBJECT_NOT_FOUND_ERROR,ErrorRecoveryAction.Ignore);
		 int count=0;
		 String version=getIEVersion();
		 if(version.equals("8"))
		 {
			 if(!web.exists("/web:dialog_unknown[@text='Do you want to open or save this file?' or @index='0']",10)){
				 OSPreferences("Fail");
				 fail("Download dialogue not found, Please check your Browser version & settings");
			 }
			 while(web.exists("/web:dialog_unknown[@text='Do you want*']",10)){
				 info("the dialog open pdf exist");
				 web.dialog("/web:dialog_unknown[@text='Do you want*']").focus();
				 //web.dialog("/web:dialog_unknown[@text='Do you want to save this file, or find a program online to open it?']").clickButton(1);
				 web.dialog(9,"/web:dialog_unknown[@text='Do you want*']").clickButton(1);

				 getScript("EOneUtility").callFunction("syncFrame");
				 getScript("EOneUtility").callFunction("syncFrame");
				 count++;
				 info("the dialog save pdf clicked "+count);
				 if(count == 11) {
					 info("Failed to Save the PDF");
					 break;
				 }
			 } //while
			 Thread.sleep(30000);
			 ///web:dialog_unknown[@text='Save As' and @index='0']
			 count++;
			 while(web.exists("/web:dialog_unknown[@text='Save*' and @index='0']", 10))
			 {
				 count++;
				 info("the dialog save as exist "+count);
				 web.dialog("/web:dialog_unknown[@text='Save*' and @index='0']").setText(0,"C:\\"+report+".pdf");
				 getScript("EOneUtility").callFunction("syncFrame");
				 web.dialog("/web:dialog_unknown[@text='Save*' and @index='0']").clickButton(0);
				 Thread.sleep(30000);
				 getScript("EOneUtility").callFunction("syncFrame");
				 if(count == 11) {
					 info("Save path entered as required but failed to save");
					 break;
				 }

			 } // while


			 getScript("EOneUtility").callFunction("syncFrame");
			 getScript("EOneUtility").callFunction("syncFrame");
			 getScript("EOneUtility").callFunction("syncFrame");
			 if(web.exists("/web:dialog_unknown[@text='Download Complete']",10)){
				 info("Download Complete dialog exists");
				 web.dialog("/web:dialog_unknown[@text='Download Complete']").clickButton(2);
			 }
			 if(web.exists("/web:dialog_unknown[@text='Download Complete']",10)){
				 info("Download Complete dialog exists");
				 web.dialog("/web:dialog_unknown[@text='Download Complete']").clickButton(2);
			 }
			 syncFrame();
		 }
		 else
		 {
			 while(web.notificationBar(e1BrowserWindow).exists()){
				 web.notificationBar(4,e1BrowserWindow).selectOptionBy("Save", "Save as");
				 info("the dialog open pdf exist");
				 Thread.sleep(6000);
				 info("the dialog save pdf clicked");
				 Thread.sleep(10000);

				 if(web.exists("/web:dialog_unknown[@text='Save As' or @index='0']", 10)){
					 info("the dialog save as exist");
					 web.dialog("/web:dialog_unknown[@text='Save As' or @index='0']").setText(0,"c:\\"+report+".pdf");
					 web.dialog("/web:dialog_unknown[@text='Save As' or @index='0']").clickButton(0);
					 Thread.sleep(1000);

				 } else {
					 web.window(e1BrowserWindow).capturePage();
					 fail("save As dialog box does not exists");
				 }
				 Thread.sleep(4000);
				 web.notificationBar(4,e1BrowserWindow).clickButton("Close");

			 }
		 }
		 info(report+" PDF Saved");
		 setErrorRecovery(WebErrorRecovery.ERR_OBJECT_NOT_FOUND_ERROR,ErrorRecoveryAction.ReportErrorAndContinue);
		 syncFrame();
		 info(report+" PDF Saved");

		 String pdfFile="C:\\"+report+".pdf";
		 String aText[]=Pattern.compile("[,]").split(text);

		 if (new File(pdfFile).exists() == false) {
			 throw new ScriptException("PDF file does not exist: " + pdfFile, null, "PDF_NOT_FOUND");
		 }
		 PDDocument doc = new PDDocument();
		 try
		 {
			 doc = PDDocument.load(pdfFile, true);
			 PDFTextStripper textStripper = new PDFTextStripper("UTF-8");
			 String pdfText = textStripper.getText(doc);
			 pdfText=pdfText.replaceAll(newline,"");

			 info("Actual PDF value: "+pdfText);
			 for(int a=0;a<aText.length;a++){

				 if (!pdfText.contains(aText[a].trim())) {
					 testFailure("PDF file does NOT contain the text: " +aText[a]);
					 //throw new ScriptException("PDF file does NOT contain the text: " +aText[a], null, "PDF_ASSERTION_FAILURE");
				 }
				 else{
					 info("PDF file contains the text: " + aText[a]);
				 }
			 } //for
		 } //try
		 finally
		 {
			 if( doc != null )
			 {
				 doc.close();
			 }
		 }
		 valCount=valCount+aText.length;
	 }
	 /************************************************************************************************************
	  * Function: closeXMLBrowsers
	  * Description: Used to close all the existing XML browsers
	  * Created By: Sravan
	  * Date: March 2011
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param sDateFormat :The format in which we need the date
	  * 		@param iCount :Optional parameter which will give the number of days to be increased/ decreased 
	  * Returns: 
	  * 		@return string date
	  * **********************************************************************************************************
	  */
	 public void closeXMLBrowsers() throws Exception {
		 info("Starting:Function closeXMLBrowsers");
		 closeMicrosoftApps();
		 while(web.exists(xmlBrowser,10)){
			 info("xml page exists");
			 web.window(xmlBrowser).close();
			 if(web.exists("/web:dialog_unknown[@text='Do you want to open or save this file?' or @index='0']",10)){
				 web.dialog("/web:dialog_unknown[@text='Do you want to open or save this file?' or @index='0']").clickButton(2);
			 }
		 }
		 info("Finished:Function closeXMLBrowsers ");
	 }

	 //------------------------------------------END of UBE Functions-----------------------------------------------------
	 //------------------------------------------START of Misc Functions-----------------------------------------------------
	 /************************************************************************************************************
	  * Function: createDate
	  * Description: Get the date in the specified format
	  * Created By: Sravan
	  * Date: January 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param sDateFormat :The format in which we need the date
	  * 		@param day 
	  * 		@param month 
	  * 		@param year 
	  * Returns: 
	  * 		@return string date
	  * **********************************************************************************************************
	  */
	 public String createDate(@Arg("sDateFormat") String sDateFormat, int day, int month, int year ) throws Exception {
		 info("Starting:Function getDate");		 
		 SimpleDateFormat sdf = new SimpleDateFormat(sDateFormat);
		 String [] Parts=sDateFormat.split("/");


		 for(int i=0;i<Parts.length;i++){
			 if(Parts[i].toUpperCase().equals("MM")){
				 if(Integer.toString(month).length()<2){
					 Parts[i]="0"+month;
				 }else{
					 Parts[i]=Integer.toString(month);
				 }
			 }
			 if(Parts[i].toLowerCase().equals("dd")){
				 if(Integer.toString(day).length()<2){
					 Parts[i]="0"+day;
				 }else{
					 Parts[i]=Integer.toString(day);
				 }
			 }
			 if(Parts[i].toLowerCase().contains("yy")){
				 if(Integer.toString(year).length()<2){
					 Parts[i]="0"+year;
				 }else{
					 Parts[i]=Integer.toString(year);
				 }
			 }
		 }


		 String retStr="";
		 for(int i=0;i<Parts.length;i++){
			 if(retStr.length()==0){
				 retStr=Parts[i];
			 }else{
				 retStr=retStr+"/"+Parts[i];
			 }
		 }
		 info("Finished:Function getDate");
		 return retStr;
	 }
	 /************************************************************************************************************
	  * Function: getDate
	  * Description: Get the date in the specified format
	  * Created By: Prakruthi
	  * Modified By: Praneetha
	  * Date: March 2011
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param sDateFormat :The format in which we need the date 
	  * Returns: 
	  * 		@return string date
	  * **********************************************************************************************************
	  */
	 //overloaded function to be called when no iCount is given
	 public String getDate(@Arg("sDateFormat") String sDateFormat ) throws Exception {
		 return getDate(sDateFormat,0);
	 }
	 /************************************************************************************************************
	  * Function: getDate
	  * Description: Get the date in the specified format
	  * Created By: Prakruthi
	  * Modified By: Praneetha
	  * Date: March 2011
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param sDateFormat :The format in which we need the date
	  * 		@param iCount :Optional parameter which will give the number of days to be increased/ decreased 
	  * Returns: 
	  * 		@return string date
	  * **********************************************************************************************************
	  */
	 public String getDate(@Arg("sDateFormat") String sDateFormat,@Arg("iCount") int iCount ) throws Exception {
		 info("Starting:Function getDate");
		 Calendar cal = Calendar.getInstance();
		 SimpleDateFormat sdf = new SimpleDateFormat(sDateFormat);
		 cal.add(Calendar.DATE, iCount);	    
		 info("Finished:Function getDate");
		 return sdf.format(cal.getTime());
	 }
	 /************************************************************************************************************
	  * Function: getDate
	  * Description: Get the date in the specified format
	  * Created By: Prakruthi
	  * Modified By: Praneetha
	  * Date: March 2011
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param sDateFormat :The format in which we need the date
	  * 		@param mCount :parameter which will give the number of months to be increased/ decreased 
	  * 		@param dCount :parameter which will give the number of days to be increased/ decreased
	  * 		@param yCount :parameter which will give the number of years to be increased/ decreased
	  * Returns: 
	  * 		@return string date
	  * **********************************************************************************************************
	  */
	 public String getDate(@Arg("sDateFormat") String sDateFormat,@Arg("mCount") int mCount,@Arg("dCount") int dCount,@Arg("yCount") int yCount ) throws Exception {
		 info("Starting:Function getDate");
		 Calendar cal = Calendar.getInstance();
		 SimpleDateFormat sdf = new SimpleDateFormat(sDateFormat);
		 cal.add(Calendar.DATE, dCount);
		 cal.add(Calendar.MONTH,mCount);
		 cal.add(Calendar.YEAR,yCount);
		 info("Finished:Function getDate");
		 return sdf.format(cal.getTime());
	 }
	 
	 /************************************************************************************************************
		 * Function: getDateTime
		 * Description: Get the date and Time in the specified format
		 * Created By: Ravi
		 * Date: June 2017
		 * * To be incorporated: Nil
		 * Input Parameters: 
		 * 		@param sDateFormat :The format in which we need the date ex:mm/dd/yy HH:mm:ss or ex: HH:mm:ss 	
		 * 		@param dayCount :parameter which will give the number of days to be increased/ decreased
		 * 		@param HourCount :parameter which will give the number of hours to be increased/ decreased 
		 * 		@param MinutedCount :parameter which will give the number of minute to be increased/ decreased
		 * 		@param SecondCount :parameter which will give the number of seconds to be increased/ decreased
		 *      @param Datatablecolname:contains variable name in Datatable
		 * Returns: 
		 * 		@return string date
		 *  
		 * **********************************************************************************************************
		 */
		public void getDateTime(@Arg("sDateFormat") String sDateFormat,@Arg("dayCount") int dCount,@Arg("HourCount") int HCount,@Arg("MinunteCount") int MCount,@Arg("SecondCount") int SCount,@Arg("sDatatableColName") String DatatableColName ) throws Exception {
			info("Starting:Function getDateTime");
			Calendar cal = Calendar.getInstance();
			SimpleDateFormat sdf = new SimpleDateFormat(sDateFormat);
			cal.add(Calendar.DATE, dCount);
			cal.add(Calendar.HOUR_OF_DAY, HCount);
			cal.add(Calendar.MINUTE, MCount);
			cal.add(Calendar.SECOND, SCount);
			info(""+sdf.format(cal.getTime()));
			int appender=(Integer)getScript("EOneUtility").callFunction("checkColumnExists",DatatableColName);
			if(appender!=0){
				DatatableColName=DatatableColName+appender;
			}
			datatable.getGlobalDatatable().addColumn("Global", DatatableColName,0);
			datatable.getGlobalDatatable().setValue("Global", 0, DatatableColName,sdf.format(cal.getTime()));
			info("Finished:Function getDateTime");


		}
		
		public String areDatesEqual(String sArg1,String sArg2)throws Exception{
			SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yy");
			String sDiff=null;
			try{
				Date date1 = sdf.parse(sArg1);
				Date date2=sdf.parse(sArg2);
				info("Date 1:"+date1+" Date 2:"+date2);
				sDiff=""+date1.compareTo(date2);
			}catch(Exception e){sDiff="false";};
			info("SBE1:"+sDiff);
			return sDiff;
		}
	/************************************************************************************************************
		 * Function: dateTimeComparison
		 * Description: Get the Time difference in millisec from two input dates
		 * Created By: Ravi
		 * Date: June 2017
		 * * To be incorporated: Nil
		 * Input Parameters: 
		 * 		@param sInput String 1 :Input of First date
		 *      @param sInput String 2 :Input of Second date
		 *     	@param Date format :Date format, ex:"MM/dd/yyyy HH:mm:ss"
		 *      @param Datatablecolname:contains variable name in Datatable
		 * Returns: 
		 * 		@return the time difference between two dates in miliseconds 
		 * **********************************************************************************************************
		 */
		
		public void dateTimeComparison(@Arg("Input String 1")String sInput1, @Arg("Input String 2")String sInput2, @Arg("Dateformat")String Dateformat,@Arg("DatatableColName")String DatatableColName)throws Exception {
			info("Starting :Function dateTimeComparison ");
			
			
			
			sInput1 = sInput1.trim();
			sInput2 = sInput2.trim();
			long totalSecondDiff=0;
			
			
			info("First captured Date :"+sInput1);

			info("Second Captured Date :"+sInput2);
			//HH converts hour in 24 hours format (0-23), day calculation
			//SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
			SimpleDateFormat format = new SimpleDateFormat(Dateformat);
			Date d1 = null;
			Date d2 = null; 

			try {
				d1 = format.parse(sInput1);
				d2 = format.parse(sInput2);

				//in milliseconds
				totalSecondDiff = d2.getTime() - d1.getTime();
				//if difference of dates is required in second then divide 1000
				//totalSecondDiff=totalSecondDiff/1000;

				info("Total milli second diff: "+totalSecondDiff );
			} catch (Exception e) {
				
				reportFailure("Failed: Date provided is not in format");
				
			}

			
			int appender=(Integer)getScript("EOneUtility").callFunction("checkColumnExists",DatatableColName);
			if(appender!=0){
				DatatableColName=DatatableColName+appender;
			}
			datatable.getGlobalDatatable().addColumn("Global", DatatableColName,0);
			datatable.getGlobalDatatable().setValue("Global", 0, DatatableColName,totalSecondDiff);

			info("Finished:Function dateTimeComparison");
		}

	 /************************************************************************************************************
	  * Function: getWeekDay
	  * Description: Get the WeekDay of the Date Passed
	  * Created By: Neha
	  * Date: May 2011
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param sDateFormat :The format in which we need the date
	  * 		@param iCount :Optional parameter which will give the number of days to be increased/ decreased 
	  * Returns: 
	  * 		@return string date
	  * **********************************************************************************************************
	  */
	 public int getWeekDay(@Arg("sDateFormat") String sDateFormat,@Arg("iCount") int iCount ) throws Exception {
		 info("Starting:Function getWeekDay");
		 Calendar cal = Calendar.getInstance();
		 SimpleDateFormat sdf = new SimpleDateFormat(sDateFormat);
		 cal.add(Calendar.DATE, iCount);	  
		 int dayOfWeek = cal.get(Calendar.DAY_OF_WEEK);         
		 info("Finished:Function getWeekDay");
		 return dayOfWeek;
	 }
	 /************************************************************************************************************
	  * Function: getWorkingDay
	  * Description: Get the WeekDay of the Date Passed
	  * Created By: Yashin
	  * Date: May 2011
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param sDateFormat :The format in which we need the date
	  * 		@param workingdays :Number of working days to add from current working date
	  * Returns: 
	  * 		@return string date
	  * **********************************************************************************************************
	  */
	 public String getWorkingDay(String sDateFormat,int workingdays) throws Exception {
		 int i=0,weekDay=0;
		 String tempdt=null;
		 SimpleDateFormat dateFormat = new SimpleDateFormat(sDateFormat);
		 Calendar cal = Calendar.getInstance();

		 if(workingdays<0)
		 {
			 while( i>workingdays ) {

				 i=i-1;
				 cal.add( Calendar.DAY_OF_MONTH, -1 );
				 int weekday = cal.get(Calendar.DAY_OF_WEEK);

				 switch(weekday) {
				 case 1:
					 cal.add( Calendar.DAY_OF_MONTH, -2 );
					 break;
				 case 7:
					 cal.add( Calendar.DAY_OF_MONTH, -1 );
					 break;	
				 }

			 } 
		 }
		 else
		 while( i<workingdays ) {

			 i=i+1;
			 cal.add( Calendar.DAY_OF_MONTH, 1 );
			 int weekday = cal.get(Calendar.DAY_OF_WEEK);

			 switch(weekday) {
			 case 1:
				 cal.add( Calendar.DAY_OF_MONTH, 1 );
				 break;
			 case 7:
				 cal.add( Calendar.DAY_OF_MONTH, 2 );
				 break;	
			 }

		 } // while
		 info("cal is:"+cal);
		 tempdt = dateFormat.format(cal.getTime());
		 dateFormat = null;
		 cal = null;
		 //info("Calendar.DATE : "+Calendar.DAY_OF_MONTH);
		 //info("tempdt : "+tempdt);

		 return tempdt;
	 }
	 //------------------------------------------END of Misc Functions-----------------------------------------------------

	 /************************************************************************************************************
	  * Function: selectReportMenu
	  * Description: 
	  * Created By: Sravan
	  * Date: November 2010
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param sItem :Report Item need to be clicked
	  * Returns: 
	  * 		@return Nil
	  * **********************************************************************************************************
	  */
	 public void selectReportMenu(@Arg("sItems") String sItems) throws Exception {	
		 checkFrame();
		 if(docIndex==null){
			 getDocIndex();
		 }
		 String bro;
		 sItems=sItems.replace(";;", ",");
		 sItems=sItems.replace(";", ",");
		 if(isModalForm==true){
			 bro=e1Browser;
		 }else{
			 bro="/";
		 }
		 int i,count;	
		 String item;
		 if(web.exists(bro+"/web:img[@alt='Report (Ctrl+Alt+P)' or @id='REPORT_EXIT_BUTTON']",20)){
			 customClick(web.image(bro+"/web:img[@alt='Report (Ctrl+Alt+P)' or @id='REPORT_EXIT_BUTTON']"));
			 info("Clicked on ToolbarImage Report");			
		 }else{
			 beginStep("[selectReportMenu] Failed, ToolbarImage Report not found");
			 {
				 web.window(e1BrowserWindow).capturePage();
				 getStepResult().setError("ToolbarImage Report not found");
			 }
			 endStep();
			 return;
		 }
		 Pattern pat = Pattern.compile("[,]");
		 String strs[] = pat.split(sItems);
		 count = strs.length;		
		 for(i=0;i<=count-1;i++){
			 //info(strs[i]);
			 item=strs[i];
			 if (web.element(bro+"/web:nobr[@innerText='"+item+"*']").exists()){
				 web.element(bro+"/web:nobr[@innerText='"+item+"*']").click();
				 gridIds.clear();
				 info("Clicked on Report Exit item "+item);
			 }else{
				 beginStep("[selectReportMenu]  Failed: Toolbar Report Item is not Present");
				 {
					 testFailure("Report Exit item "+item+" not found");
					 web.window(e1BrowserWindow).capturePage();
				 }
				 endStep();
				 info("Report Exit item is not present :" + item);
			 }
		 }
	 }

	 /************************************************************************************************************
	  * Function: checkColumnExists
	  * Description: To check whether a datatable column already exists
	  * Created By: Sravan
	  * Date: May 2011
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param fldName :Field Name with which column need to be added
	  * Returns: 
	  * 		@return string date
	  * **********************************************************************************************************
	  */
	 public int checkColumnExists(String fldName) throws Exception{
		 return checkColumnExists(fldName,0);
	 }
	 /************************************************************************************************************
	  * Function: checkColumnExists
	  * Description: To check whether a datatable column already exists
	  * Created By: Sravan
	  * Date: May 2011
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param fldName :Field Name with which column need to be added
	  * 		@param appende :digit need to be appended if a column already exists 
	  * Returns: 
	  * 		@return string date
	  * **********************************************************************************************************
	  */
	 public int checkColumnExists(String fldName,int appender) throws Exception{
		 int co;
		 String colName,nFldName;
		 boolean flag=false;
		 if(appender==0){
			 nFldName=fldName;
		 }else{
			 nFldName=fldName+appender;
		 }

		 int shtcnt=datatable.getGlobalDatatable().getSheetCount();
		 for(int i=0;i<shtcnt;i++) {
			 String sht=datatable.getGlobalDatatable().getSheet(i);
			 if(sht.equals("Global")) {
				 flag=true;
				 break;
			 }
		 }
		 if(!flag) {
			 OSPreferences("Fail");
			 fail("Global Sheet not available in datatable");
			 return -1;
		 }
		 co=datatable.getGlobalDatatable().getColumnCount("Global");
		 for(int i=0;i<co;i++){			
			 colName=datatable.getGlobalDatatable().getColumn("Global", i);
			 if(colName.trim().equals(nFldName.trim())){			
				 appender++;				
				 appender=checkColumnExists(fldName,appender);
			 }
		 }
		 return appender;
	 }
	 /****************************************************************************************************
	  * Function: validateApp
	  * Description: Validate the screen navigated to correct application or version
	  * **************************************************************************************************
	  */
	 public void validateApp(@Arg("AppName") String AppName) throws Exception {
		 checkFrame();
		 if(docIndex==null){
			 getDocIndex();
		 }
		 String bro="/";
		 if(isCITRun)
		 OSPreferences("Fail");
		 /*if(sBrowser.equalsIgnoreCase("ie")){
		 if(web.exists(bro+"/web:a[@alt='About (Ctrl+Shift+J)']",10)){
               web.image(bro+"/web:a[@alt='About (Ctrl+Shift+J)']").setSelectedJSElement();
               setErrorRecovery(WebErrorRecovery.ERR_OBJECT_NOT_FOUND_ERROR, ErrorRecoveryAction.Ignore);

               web.document(e1BrowserWindow+"/web:document[@index='"+docIndex+"']").executeJavaScript("selectedOATSWebDomElement.click()");

               setErrorRecovery(WebErrorRecovery.ERR_OBJECT_NOT_FOUND_ERROR, ErrorRecoveryAction.ReportErrorAndContinue);
               int cnt=0;
               do{
                     Thread.sleep(1000);
                     if(cnt>40){
                           setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.Fail);
                           web.window(e1BrowserWindow).capturePage();
                           reportFailure("About window not opened after 2 mins hence terminating the script, Please check the application session.");
                     }
               }while(!web.window("/web:window[@title='About']").exists());
               info(" About image found and clicked");
         }}
		 else
		 {*/
		 if(web.exists(bro+"/web:a[@text='About (Ctrl+Shift+J)']",10)){
			 // web.element(bro+"/web:img[@id='helpOptionImage']").click();
			 Thread.sleep(3000);
			 // web.element(bro+"/web:a[@text='About (Ctrl+Shift+J)']").setSelectedJSElement();
			 //setErrorRecovery(WebErrorRecovery.ERR_OBJECT_NOT_FOUND_ERROR, ErrorRecoveryAction.Ignore);

			 // web.document(e1BrowserWindow+"/web:document[@index='"+docIndex+"']").executeJavaScript("selectedOATSWebDomElement.click()");

			 // setErrorRecovery(WebErrorRecovery.ERR_OBJECT_NOT_FOUND_ERROR, ErrorRecoveryAction.ReportErrorAndContinue);
			 //customClick(web.element(bro+"/web:td[@text='About (Ctrl+Shift+J)']"));
			 web.element(bro+"/web:a[@text='About (Ctrl+Shift+J)']").focus();
			 
			 Thread.sleep(3000);
			 try{
				 Robot rob=new Robot();
				 rob.keyPress(KeyEvent.VK_CONTROL);
				 rob.keyPress(KeyEvent.VK_SHIFT);
				 rob.keyPress(KeyEvent.VK_J);
				 rob.keyRelease(KeyEvent.VK_CONTROL);
				 rob.keyRelease(KeyEvent.VK_SHIFT);
				 rob.keyRelease(KeyEvent.VK_J);  
			 }catch(Exception e){
				 if(isCITRun)
					 fail("validateApp failed");
				 e.printStackTrace();
			 }
			 if(isCITRun)
				 getSettings().set("err.webdom.FAIL_TO_PLAYBACK", "fail");
			 int cnt=0;
			 do{
				 cnt=cnt+1;
				 Thread.sleep(1000);
				 if(cnt>40){
					 setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.Fail);
					 web.window(e1BrowserWindow).capturePage();
					 testFailure("About window not opened after 2 mins hence terminating the script, Please check the application session.");
				 }
			 }while(!web.window("/web:window[@title='About']").exists());
			 info(" About image found and clicked");
		 }else if(web.exists(bro+"/web:td[@text='About (Ctrl+Shift+J)']",10)){
			 web.element(bro+"/web:a[@text='About (Ctrl+Shift+J)']").focus();
			 Thread.sleep(3000);
			 try{
				 Robot rob=new Robot();
				 rob.keyPress(KeyEvent.VK_CONTROL);
				 rob.keyPress(KeyEvent.VK_SHIFT);
				 rob.keyPress(KeyEvent.VK_J);
				 rob.keyRelease(KeyEvent.VK_CONTROL);
				 rob.keyRelease(KeyEvent.VK_SHIFT);
				 rob.keyRelease(KeyEvent.VK_J);  
			 }catch(Exception e){
				 e.printStackTrace();
			 }
			 /*web.element(bro+"/web:td[@text='About (Ctrl+Shift+J)']").setSelectedJSElement();
               setErrorRecovery(WebErrorRecovery.ERR_OBJECT_NOT_FOUND_ERROR, ErrorRecoveryAction.Ignore);

               web.document(e1BrowserWindow+"/web:document[@index='"+docIndex+"']").executeJavaScript("selectedOATSWebDomElement.click()");

               setErrorRecovery(WebErrorRecovery.ERR_OBJECT_NOT_FOUND_ERROR, ErrorRecoveryAction.ReportErrorAndContinue);*/

			 // customClick(web.element(bro+"/web:td[@text='About (Ctrl+Shift+J)']"));

			 int cnt=0;
			 do{
				 cnt=cnt+1;
				 Thread.sleep(1000);
				 if(cnt>40){
					 setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.Fail);
					 web.window(e1BrowserWindow).capturePage();
					 testFailure("About window not opened after 2 mins hence terminating the script, Please check the application session.");
				 }
			 }while(!web.window("/web:window[@title='About']").exists());
			 info(" About image found and clicked");
		 }else{
			 web.window(e1BrowserWindow).capturePage();
			 testFailure("About image not found");
		 }
		 
		 if(web .element("/web:window[ @title='About']/web:document[@index='0']/web:td[@text='"+AppName+"']").exists()){
			 /*int appIndex=Integer.parseInt(web.element("/web:window[ @title='About']/web:document[@index='0']/web:td[@text='Application:']").getAttribute("index"));
      String ActAppName=web.element("/web:window[ @title='About']/web:document[@index='0']/web:td[@index='"+appIndex+1+"']").getAttribute("text");*/
			 info("Navigated to application "+AppName+" as expected");
		 }else{
			 web.window(e1BrowserWindow).capturePage();
			 web.window("/web:window[@title='About']").capturePage();
			 testFailure("Script failed to navigate to Application "+AppName);
		 }
		 web.window("/web:window[@title='About']").close();
		 valCount=valCount+1;
	 }

	 /****************************************************************************************************
	  * Function: customClick
	  * Description: Performs click operation on given web element (Button, Image, Link etc)
	  * **************************************************************************************************
	  */
	 public void customClick( DOMElement ele) throws Exception{   
		 //setErrorRecovery(WebErrorRecovery.ERR_OBJECT_NOT_FOUND_ERROR, ErrorRecoveryAction.Ignore);
		 try{
			 if(bDB){
				 ele.click();
				 //ele.setSelectedJSElement();
				 //web.document(sDBBrowser).executeJavaScript("selectedOATSWebDomElement.click()");
			 }else{
				 ele.click();
				 checkFrame();
				 //ele.setSelectedJSElement();
				 //web.document(e1BrowserWindow+"/web:document[@id='e1menuAppIframe']").executeJavaScript("selectedOATSWebDomElement.click()");
				 //web.document(e1Browser).executeJavaScript("selectedOATSWebDomElement.click()");
			 }
		 }catch (Exception e) {

		 }
		 //setErrorRecovery(WebErrorRecovery.ERR_OBJECT_NOT_FOUND_ERROR, ErrorRecoveryAction.ReportErrorAndContinue);
	 }
	 /****************************************************************************************************
	  * Function: CapturePage
	  * Description: Captures current Screen
	  * **************************************************************************************************
	  */
	 public void CapturePage( ) throws Exception{   

		 if(bDB){
			 web.window(sDBBrowserWindow).capturePage();
		 }else{
			 web.window(e1BrowserWindow).capturePage();
		 }
		 if(isCITRun)
			 OSPreferences("Fail");
	 }
	 /****************************************************************************************************
	  * Function: browserRefresh
	  * Description: To refresh browser
	  * **************************************************************************************************
	  */
	 public void browserRefresh() throws Exception {
		 if(docIndex==null){
			 getDocIndex();
		 }
		 String bro;
		 if(!web.exists(sDBBrowser)){
			 bro=e1Browser;
		 }else{
			 bro=sDBBrowser;
		 }

		 if(web.exists(bro+"/web:img[@alt='About (Ctrl+Shift+J)']",10)){
			 customClick(web.image(bro+"/web:img[@alt='About (Ctrl+Shift+J)']"));
		 }else if(web.exists(bro+"/web:a[@text='About (Ctrl+Shift+J)']",10)){
			 customClick(web.element(bro+"/web:a[@text='About (Ctrl+Shift+J)']"));
		 }else if(web.exists(bro+"/web:td[@text='About (Ctrl+Shift+J)']",10)){
			 customClick(web.element(bro+"/web:td[@text='About (Ctrl+Shift+J)']"));
		 }
		 Thread.sleep(5000);
		 int cnt=0;
		 //boolean wexists;
		 while(!web.window("/web:window[@title='About']").exists()){
			 Thread.sleep(1000);
			 cnt++;
			 if(cnt==60){
				 break;
			 }
		 }
		 if(web.window("/web:window[@title='About']").exists()){
			 web.window("/web:window[@title='About']").close();
		 }
	 }

	 /****************************************************************************************************
	  * Function: checkFrame
	  * Modified: To handle adf forms
	  * Description: To check the existence of modalForm
	  * **************************************************************************************************
	  */
     public void checkFrame() throws Exception{
    	 if(setDocIndex){
             return;
       }

    	 
    	 if(docIndex==null ){
               getDocIndex();
         }

         if(isModalForm){
               e1Document = "/web:document[@index='"+docIndex+"'or @name='e1menuAppIframe']";
               e1Browser = e1BrowserWindow + e1Document;
         }
         boolean ModalFormPresent=web.exists(e1Browser+"/web:div[@id='popupWindowTitleModalSS1']", 3);        

         if (ModalFormPresent){
               String i="";
               getSettings().set("err.webdom.OBJECT_NOT_FOUND_ERROR", "Ignore");
               try{
                     for(int j=1;j<=10;j++){
                           if(web.exists("//web:iFrame[@id='modalIframe"+j+"']",20)){
                                 i=web.frame("//web:iFrame[@id='modalIframe"+j+"']").getContentDocument().getAttribute("DocumentIndex");
                               
                           }else{
                                 break;
                           }
                           
                      }
               }catch(Exception e){
                     //e.printStackTrace();
                     System.out.println("Exception: "+e);
               }
               e1Document = "/web:document[@index='"+i+"']";
               e1Browser = e1BrowserWindow + e1Document;              
               OSPreferences("Ignore");           
                if(!isModalForm){
                     gridIds.clear();
               }
               isModalForm=true;              
         }
         else{
               e1Document = "/web:document[@index='"+docIndex+"'or @name='e1menuAppIframe']";
               e1Browser = e1BrowserWindow + e1Document;
               if(isModalForm){
                     gridIds.clear();
               }
               isModalForm=false;


	
               boolean ADFPresent=web.document(e1BrowserWindow+"/web:document[@name='e1ExternalAppIframe']").exists();
               if (ADFPresent)
               {    
            	      
                      String isADFVisible=web.frame("//web:iframe[@id='e1ExternalAppIframe']").getAttribute("hidden");
                     if(isADFVisible!=null)
                     {
                           DOMDocument e1doc=web.frame("//web:iframe[@id='e1menuAppIframe']").getContentDocument();
                           docIndex=e1doc.getAttribute("DocumentIndex");

                           e1Document = "/web:document[@index='"+docIndex+"'or @name='e1menuAppIframe']";
                           e1Browser = e1BrowserWindow + e1Document;                          
                           if(isADF)
                           {
                                 gridIds.clear();
                           }
                           isADF=false;
                     }
                     else
                     {

                           info("ADF Frame found");
                           DOMDocument e1doc=web.frame("//web:iframe[@id='e1ExternalAppIframe']").getContentDocument();
                           e1Document = "/web:document[@index='"+e1doc.getAttribute("DocumentIndex")+"'or @name='e1ExternalAppIframe']";
                           e1Browser = e1BrowserWindow + e1Document;
                           isADF=true;

                     }
               }
         }

   }
    
     
	 
	 public void initialize() throws Exception {

	 }
	 /****************************************************************************************************
      * Function: setDocIndex
      * Description: To switch between documents with name e1menuAppIframe(docIndex - 10) and E1MENUMAIN*(docIndex)
      * Input Parameters: 
      *         @param setDocIndextoZero  :Boolean value to set/unset document Index by value 0.
      * **************************************************************************************************
      */
    public void setDocIndex(boolean setDocIndextoZero) throws Exception {
          
          if(web.exists("/web:window[@title='JD Edwards*']")){
                if (setDocIndextoZero == true){                                              
                       setDocIndex = true;    
                      docIndex = "0";
                      e1Document = "/web:document[@index='"+docIndex+"'or @name='e1menuAppIframe']";
                      e1Browser = e1BrowserWindow + e1Document;

                }else{                       
                      setDocIndex = false;
                      docIndex=null;
                      checkFrame();
                }
                
           info("docIndex set to "+docIndex );                  
    }else{
          info("EOne page unavailable");
          }
    }

	 
	 /****************************************************************************************************
	  * Function: getDocIndex
	  * Description: To get the document index of document with name e1menuAppIframe
	  * **************************************************************************************************
	  */
	 public String getDocIndex() throws Exception {
		 if(isCITRun)
				OSPreferences("Fail");
		 else
		 OSPreferences("ReportErrorAndContinue");
		 //OSPreferences("Fail");
		 //info("getDocIndex");		 
		 // web.window("/web:window[@index='0']").maximize();
		 if(web.exists("/web:window[@title='JD Edwards*']")){
			 if(web.exists("//web:input_text[@id='User']",3)){
				 return null;
			 }else if (web.exists(e1BrowserWindow+"/web:document[@name='E1MENUMAIN*']/web:td[@text='*You have no running applications*']",3)){
				 return null;
				 /**Handled in fastpath*/
			 }else if(web.exists("//web:iframe[@id='e1menuAppIframe']",3)){
				 if(docIndex==null){
					 DOMDocument e1doc=web.frame("//web:iframe[@id='e1menuAppIframe']").getContentDocument();

					 docIndex=e1doc.getAttribute("DocumentIndex");


				 }
				 e1Document = "/web:document[@index='"+docIndex+"' or @name='e1menuAppIframe']";
				 e1Browser=e1BrowserWindow+e1Document;
				 preTitle=web.document(e1Browser).getAttribute("title");
				 if(preTitle!=null){
					 preTitle=preTitle.replace(spaceChar, " ");
				 }
			 }/*else if(!isRefreshed){


				 Thread.sleep(1000);
				 if(web.window("/web:window[@title='HTTP*']").exists()){
					 web.window("/web:window[@title='HTTP*']").back();
				 }
				 isRefreshed=true;
				 getDocIndex();
			 }*/
		 }else{
			 return null;
		 }
		 info("docIndex :"+docIndex );
		 getVariables().set("docIndex", docIndex);
		 getVariables().set("e1Browser", e1Browser);
		 return docIndex;
	 }
	 //Copied functions from tools eone utility 
	 /********************************************************************************************************************************
      * Function: captureGridData
      * Description: This captures Data from the specified grid in csv format as 
      *                 For windows 10 --> \\den00bwk.us.oracle.com\OATS_ToolsRepository\OATS_ToolsRepository_"+sBrowser+"\\ScriptResources\Capture.csv"
      *                 For other windows -->  C:\Capture.csv.
      * Created By: Spurthi P
      * Date: Oct 2016
      * Updateed By: Sunil
      * Update Date:5.9.17
      * Input Parameters:
      *         @param iIndex - index of the grid in the webpage starting from 0
      *               @param rows - to indicate which rows should be exported("all"/row numbers )
      *               @param toCapturegivenColIndex - (true/false)to indicate whether the column values of specified ColIndex parameter are to be exported(true) or not(false).
      *               @param ColIndex - comma separated column indices of the grid to be/not captured based on toCapturegivenColIndex value.
      * @return Nil
      * Example: captureGridData("0","all","false","")  to export all visible rows/column values in the grid.
      * Example: captureGridData("0","0,1|1,2","false","0")  to export 1st and 2nd row from first range (1-200), 
      *              2nd and 3rd rows from second range(201-400) and this exports all cell data except first column. 
      *               Use "|" seperator for different weblist range item rows selected. 
      *               Here, 0,2 indicates that first and third rows should be exported from 1-200 records of the grid.
      * Example: captureGridData("0", "all", "false", "0,1,7,8")  to export all values except 0,1,7,8 column index cell values.  
      * Example: captureGridData("0","all","true","0,2,3,4,5,7,8")    to capture only mentioned  column index cell values except first, fifth and other columns.      
      * ******************************************************************************************************************************
      */  

    public void captureGridData(@Arg("iIndex")int iIndex, @Arg("rows")String rows, @Arg("toCapturegivenColIndex")boolean toCapturegivenColIndex,  @Arg("ColIndex")String ColIndex) throws Exception {
      String osName = System.getProperty("os.name");
       info("Starting: Function captureGridData");
       info("Browser Name : "+sBrowser+"\nOS Name : "+osName);
      String gridId; int rowcount; String Data = "";String[] output; String[] isCellHidden;     
       String browser =null;
      if(!bDB){
                    checkFrame();
                    gridId = getGridObjReference(iIndex); 
                     browser = e1Browser;
      }else{
                    gridId=(String)getDataBrowserGridObjReference();
                    browser = sDBBrowser;
      }

      if(gridId!=null) {
                    try{
                                       File file = null;
                                       if(osName.equalsIgnoreCase("Windows 8.1") || osName.equalsIgnoreCase("Windows 10") || osName.equalsIgnoreCase("Windows 10.0")){
                                              file = new File("\\\\den00bwk.us.oracle.com\\OATS_ToolsRepository\\OATS_ToolsRepository_"+sBrowser+"\\ScriptResources\\Capture.csv");
                                       }else{
                                              file = new File("C:/Capture.csv");
                                       }
                                       if (!file.exists()) {
                                                 file.createNewFile();
                                   }            
                                   String[] a = null;
                                   int[] cols = null;
                                   if(ColIndex!=null && !ColIndex.equals("") && !ColIndex.isEmpty()){
                                                 a = ColIndex.split(",");

                                   }

                                   //cols = new int[a.length];

                                   int p=0;
                                   if(ColIndex!=null && !ColIndex.equals("") && !ColIndex.isEmpty()){
                                                 cols = new int[a.length];
                                                 for(String b:a){
                                                               cols[p++] = Integer.parseInt(b.trim());          
                                                  }}else{
                                                               cols = null;
                                                 }


                                   //to write in Capture.csv
                                   FileWriter fw = new FileWriter(file.getAbsoluteFile());
                                   BufferedWriter bw = new BufferedWriter(fw);
                                   //to get column count
                                   output = web.document(browser).executeJsFunction("getColLen", gridId); 
                                    int colCount = Integer.parseInt(output[0]);
                                   String hiddenColCell[]=new String[colCount];
                                   output = null;

                                   boolean capturecolumn=true; 
                                    for(int k=0;k<colCount;k++){
                                                 String ab[] = web.document(browser).executeJsFunction("getColLabel", gridId, Integer.toString(k));
                                                 if(cols != null){
                                                               for(int m=0;m<cols.length;m++){
                                                                              if(toCapturegivenColIndex){
                                                                                            if(k==cols[m]){
                                                                                                           capturecolumn = true;                                                                                                        
                                                                                                            break;
                                                                                            }else{
                                                                                                           capturecolumn = false; 
                                                                                                            continue;                                                                                                                   
                                                                                             }
                                                                              }else if(!toCapturegivenColIndex){
                                                                                            if(k!=cols[m] && m==(cols.length-1)){
                                                                                                           capturecolumn = true;                                                                                                        
                                                                                                            break;
                                                                                            }else if(k!=cols[m]){
                                                                                                          capturecolumn = false;
                                                                                                           continue;
                                                                                           }
                                                                                            else{
                                                                                                           capturecolumn = false;
                                                                                                           break;
                                                                                            }
                                                                              }                                                                      
                                                               }}
                                                 if(capturecolumn){ 
                                                                output = web.document(browser).executeJsFunction("getColLabel", gridId, Integer.toString(k));
                                                               //to exclude hidden cell data
                                                               isCellHidden = web.document(browser).executeJsFunction("gridCellIsHidden", gridId, Integer.toString(k));
                                                               if(("False".equals(isCellHidden[0]))  || ("false".equals(isCellHidden[0])))
                                                               {                                                                                    
                                                                              hiddenColCell[k]="False";
                                                                              if(Data == "")
                                                                              {Data = Data + output[0];}
                                                                              else
                                                                              {Data = Data + "," + output[0];}                                                                                                              
                                                                              Data = Data.replaceAll("&#40;", "(");
                                                                              Data = Data.replaceAll("&#41;", ")");
                                                               }
                                                               else
                                                               {
                                                                              hiddenColCell[k]="True";
                                                               }
                                                 }
                                   }
                                   Data = Data.replaceAll(" ", "");
                                   bw.write(Data+"\n");                                               
                                   int weblistSize;

                                   String webListId = "none";
                                   if (web.exists(browser+"/web:form[@id='E1PaneForm']/web:select[( @id='sectionDropDown"+gridId+"')]",10))
                                   {                                                                                                                 
                                                 webListId = "sectionDropDown"+gridId;
                                                 weblistSize = getWebListItemSize(webListId);
                                   }
                                   else
                                   {
                                                 weblistSize = 1;                                                         
                                   }
                                   String[] weblist = null;
                                   //all - to capture all rows, | - to capture only selected rows in grid
                                   if(!"all".equals(rows) && rows.contains("|")){                                                             
                                                 weblist = rows.split("\\|");                                                                  
                                   }else if(!"all".equals(rows)){
                                                 weblist = rows.split("\n");          
                                   }
                                   else{
                                                 weblist = null;
                                   }
                                   //to capture all range of records in the weblist
                                   for(int l=0; l<weblistSize ; l++)
                                   {            
                                                 if(webListId != "none")
                                                 {selectWebListItemByItemIndex(webListId, l);
                                                 syncFrame();
                                                 }
                                                 output = web.document(browser).executeJsFunction("getvisibleRowCount", gridId); 
                                                  int rowCount = Integer.parseInt(output[0]);
                                                 String[] sCellValue = null;
                                                 String rev = "",actual = "";
                                                 for(int i=0; i<rowCount; i++){
                                                               //all - all grid rows
                                                               if("all".equals(rows)){                                                                                         
                                                                              Data = ""; rev = "";actual = "";                                                                                  
                                                                              for(int j=0; j<colCount; j++){
                                                                                            if((hiddenColCell[j]=="False") || (hiddenColCell[j]=="false"))
                                                                                            {
                                                                                                           sCellValue = web.document(browser).executeJsFunction("getGridRowCellValue", gridId.toString(),Integer.toString(i),Integer.toString(j));   

                                                                                                           if(sCellValue[0].length()>1)
                                                                                                           {if("-".equals(sCellValue[0].substring(sCellValue[0].length()-1))){                                                                                                                          
                                                                                                                         sCellValue[0]="-"+sCellValue[0].substring(0, sCellValue[0].length()-1);                                                                                                                       
                                                                                                           }
                                                                                                           if(sCellValue[0].contains(",")){                                                                                                                      
                                                                                                                         sCellValue[0]="\""+sCellValue[0].substring(0, sCellValue[0].length())+"\"";                                                                                                               
                                                                                                           }
                                                                                                           }

                                                                                                           if(Data == "")
                                                                                                           {Data = Data + sCellValue[0];}
                                                                                                           else
                                                                                                           {Data = Data + "," + sCellValue[0];}
                                                                                            }
                                                                              }
                                                                              //to enclose single space with double quotes
                                                                              Data = Data.replaceAll(", ,", ",\" \",");
                                                                              Data = Data.replaceAll(", ", ",\" \"");                                                    
                                                                              bw.append(Data+"\n");
                                                               }//selected rows in range, with | seperator for different range
                                                               else{                                                                                           
                                                                              int[] iArray = new int[0];
                                                                              String[] sarray = weblist[l].split(",");
                                                                              iArray = new int[sarray.length];
                                                                              for(int o = 0; o < sarray.length; o++) {
                                                                                            iArray[o] = Integer.parseInt(sarray[o]);
                                                                              }
                                                                              //iArray contains the rows to be captured, for that particular weblist item selected
                                                                              for(int n=0;n<iArray.length;n++){                                                                                                                                            
                                                                                            if(i==iArray[n]){
                                                                                                           Data = ""; rev = "";actual = "";                                                                                
                                                                                                           for(int j=0; j<colCount; j++){
                                                                                                                         if((hiddenColCell[j]=="False") || (hiddenColCell[j]=="false"))
                                                                                                                         {
                                                                                                                                       sCellValue = web.document(browser).executeJsFunction("getGridRowCellValue", gridId.toString(),Integer.toString(i),Integer.toString(j));   

                                                                                                                                       if(sCellValue[0].length()>1)
                                                                                                                                       {if("-".equals(sCellValue[0].substring(sCellValue[0].length()-1))){                                                                                                                               
                                                                                                                                                      sCellValue[0]="-"+sCellValue[0].substring(0, sCellValue[0].length()-1);                                                                                                                                
                                                                                                                                       }
                                                                                                                                       if(sCellValue[0].contains(",")){                                                                                                                     
                                                                                                                                                      sCellValue[0]="\""+sCellValue[0].substring(0, sCellValue[0].length())+"\"";                                                                                                           
                                                                                                                                       }
                                                                                                                                       }

                                                                                                                                       if(Data == "")
                                                                                                                                       {Data = Data + sCellValue[0];}
                                                                                                                                       else
                                                                                                                                       {Data = Data + "," + sCellValue[0];}
                                                                                                                         }
                                                                                                           }
                                                                                                           //to enclose single space with double quotes
                                                                                                           Data = Data.replaceAll(", ,", ",\" \",");
                                                                                                           Data = Data.replaceAll(", ", ",\" \"");                                                
                                                                                                           bw.append(Data+"\n");                                                                                                                                                               
                                                                                            }                                                                                                                
                                                                              }                                         
                                                               }
                                                 }//end of for loop                                                     
                                                 Data = Data + "\n";
                                   }
                                   bw.close(); 
                                   BufferedReader br = null;
                                   String fileLoc = "";
                                   if(osName.equalsIgnoreCase("Windows 8.1") || osName.equalsIgnoreCase("Windows 10") || osName.equalsIgnoreCase("Windows 10.0")){
                                       fileLoc = "\\\\den00bwk.us.oracle.com\\OATS_ToolsRepository\\OATS_ToolsRepository_"+sBrowser+"\\ScriptResources\\Capture.csv";
                                       br= new BufferedReader(new FileReader(fileLoc));
                                       }else{
                                             fileLoc = "C:/Capture.csv";
                                             br= new BufferedReader(new FileReader(fileLoc));
                                       }
                                   if(br.readLine() != null){                            
                                                 info("[captureGridData] Passed: Grid data captured in "+fileLoc);
                                   }
                                   else{
                                                 CapturePage();
                                                 testFailure("[captureGridData] Failed :Grid Data not captured");
                                                 return;
                                   }
                    }catch(Exception e){
                                   info(""+e.toString());
                    }
      }//end of gridid null
      else{
                    CapturePage();
                    testFailure("[captureGridData] Failed : Grid not found");              
                    return;
      }

      info("Finished: Function captureGridData");

    }



    /************************************************************************************************************
     * Function: captureGridData
     * Description: This captures Data from the specified grid in csv format in 
     *                  For window 10 --> \\den00bwk.us.oracle.com\OATS_ToolsRepository\OATS_ToolsRepository_"+sBrowser+"\\ScriptResources\Capture.csv
     *                  For other os --> C:/Capture.csv.
     * Created By: Spurthi P
     * Date: Oct 2016
     * Input Parameters:
     *          @param iIndex - index of the grid in the webpage starting from 0
     *               @param type - to indicated which rows should be exported("all"/row numbers )
     * @return Nil
     * Example: captureGridData("0","all")  to export all the rows in the grid.
     * Example: captureGridData("0","0,2|0,2")  to export the mentioned rows from the grid .
     *               Use "|" seperator for different weblist range item rows selected. 
     *               Here, 0,2 indicates that first and third rows should be exported from 1-200 records of the grid.
     * **********************************************************************************************************
     */
   public void captureGridData(@Arg("iIndex")int iIndex, @Arg("type")String type) throws Exception {
      info("Starting: Function captureGridData");
      String osName = System.getProperty("os.name");
      info("Browser Name : "+sBrowser+"\nOS Name : "+osName);
      String gridId; int rowcount; String Data = "";String[] output; String[] isCellHidden;
      if(!bDB){
                    checkFrame();
                    gridId = getGridObjReference(iIndex);
                    if(gridId!=null) {
                                   try{
                                                 //File file = new File("C:/Capture.csv");
                                                  // File file = new File("\\\\den00bwk.us.oracle.com\\OATS_ToolsRepository\\ScriptResources\\Capture.csv");
                                                  
                                                     File file = null;
                                                              if(osName.equalsIgnoreCase("Windows 8.1") || osName.equalsIgnoreCase("Windows 10") || osName.equalsIgnoreCase("Windows 10.0")){
                                                               file = new File("\\\\den00bwk.us.oracle.com\\OATS_ToolsRepository\\OATS_ToolsRepository_"+sBrowser+"\\ScriptResources\\Capture.csv");
                                                           }else{
                                                               file = new File("C:/Capture.csv");
                                                           }
                                                           
                                                           if (!file.exists()) {
                                                    file.createNewFile();
                                                           }
                                                 //to write in Capture.csv
                                                 FileWriter fw = new FileWriter(file.getAbsoluteFile());
                                                 BufferedWriter bw = new BufferedWriter(fw);
                                                 //to get column count
                                                 output = web.document(e1Browser).executeJsFunction("getColLen", gridId); 
                                                  int colCount = Integer.parseInt(output[0]);
                                                 String hiddenColCell[]=new String[colCount];
                                                 output = null;
                                                 for(int k=0;k<colCount;k++){
                                                               output = web.document(e1Browser).executeJsFunction("getColLabel", gridId, Integer.toString(k));
                                                               
                                                                //to exclude hidden cell data
                                                               isCellHidden = web.document(e1Browser).executeJsFunction("gridCellIsHidden", gridId, Integer.toString(k));
                                                               
                                                                if(("False".equals(isCellHidden[0])) || ("false".equals(isCellHidden[0])))
                                                               {                                                                                    
                                                                               hiddenColCell[k]="false";
                                                                              if(Data == "")
                                                                              {Data = Data + output[0];}
                                                                              else
                                                                              {Data = Data + "," + output[0];}         
                                                                              
                                                                               Data = Data.replaceAll("&#40;", "(");
                                                                              Data = Data.replaceAll("&#41;", ")");
                                                                              
                                                                }
                                                               else
                                                               {
                                                                              hiddenColCell[k]="true";
                                                               }
                                                 }
                                                 Data = Data.replaceAll(" ", "");
                                                 
                                                  bw.write(Data+"\n");                                              
                                                 int weblistSize;

                                                 String webListId = "none";
                                                 if (web.exists(e1Browser+"/web:form[@id='E1PaneForm']/web:select[( @id='sectionDropDown"+gridId+"')]",10))
                                                 {                          

                                                               webListId = "sectionDropDown"+gridId;
                                                               weblistSize = getWebListItemSize(webListId);
                                                 }
                                                 else
                                                 {
                                                               weblistSize = 1;                                                          
                                                 }
                                                 String[] weblist = null;
                                                 //all - to capture all rows, | - to capture only selected rows in grid
                                                 if(!"all".equals(type) && type.contains("|")){                                                                 
                                                               weblist = type.split("\\|");                                                                   
                                                 }else{
                                                               weblist = null;
                                                 }
                                                 //to capture all range of records in the weblist
                                                 for(int l=0; l<weblistSize ; l++)
                                                 {            
                                                               if(webListId != "none")
                                                               {            
                                                                              selectWebListItemByItemIndex(webListId, l);
                                                                              syncFrame();
                                                               }
                                                              output = web.document(e1Browser).executeJsFunction("getvisibleRowCount", gridId); 
                                                                
                                                                int rowCount = Integer.parseInt(output[0]);
                                                               String[] sCellValue = null;
                                                               String rev = "",actual = "";
                                                               for(int i=0; i<rowCount; i++){
                                                                              
                                                                               //all - all grid rows
                                                                              if("all".equals(type)){                                                                                                         
                                                                                             Data = ""; rev = "";actual = "";                                                                            
                                                                                            for(int j=0; j<colCount; j++){
                                                                                                           if((hiddenColCell[j]=="false") || (hiddenColCell[j]=="False"))
                                                                                                           { 
                                                                                                                          sCellValue = web.document(e1Browser).executeJsFunction("getGridRowCellValue", gridId.toString(),Integer.toString(i),Integer.toString(j));   
                                                                                                                         
                                                                                                                          if(sCellValue[0].length()>1)
                                                                                                                         {if("-".equals(sCellValue[0].substring(sCellValue[0].length()-1))){                                                                                                                                 
                                                                                                                                       sCellValue[0]="-"+sCellValue[0].substring(0, sCellValue[0].length()-1);                                                                                                                     
                                                                                                                         }
                                                                                                                         if(sCellValue[0].contains(",")){                                                                                                                      
                                                                                                                                       sCellValue[0]="\""+sCellValue[0].substring(0, sCellValue[0].length())+"\"";                                                                                                                   
                                                                                                                         }
                                                                                                                         }
                                                                                                                         
                                                                                                                          if(Data == "")
                                                                                                                         {Data = Data + sCellValue[0];}
                                                                                                                         else
                                                                                                                         {Data = Data + "," + sCellValue[0];}
                                                                                                           }
                                                                                            }
                                                                                            //to enclose single space with double quotes
                                                                                            Data = Data.replaceAll(", ,", ",\" \",");
                                                                                            Data = Data.replaceAll(", ", ",\" \"");                                                
                                                                                            bw.append(Data+"\n");
                                                                                            
                                                                               }//selected rows in range, with | seperator for different range
                                                                              else{                                                                                            
                                                                                            int[] iArray = new int[0];
                                                                                            String[] sarray = weblist[l].split(",");
                                                                                            iArray = new int[sarray.length];
                                                                                            for(int o = 0; o < sarray.length; o++) {
                                                                                                           iArray[o] = Integer.parseInt(sarray[o]);
                                                                                            }
                                                                                            //iArray contains the rows to be captured, for that particular weblist item selected
                                                                                            for(int n=0;n<iArray.length;n++){                                                                                                                                            
                                                                                                           if(i==iArray[n]){
                                                                                                                         Data = ""; rev = "";actual = "";                                                                            
                                                                                                                         for(int j=0; j<colCount; j++){
                                                                                                                                       if((hiddenColCell[j]=="false") || (hiddenColCell[j]=="False"))
                                                                                                                                       {
                                                                                                                                                      sCellValue = web.document(e1Browser).executeJsFunction("getGridRowCellValue", gridId.toString(),Integer.toString(i),Integer.toString(j));   

                                                                                                                                                      if(sCellValue[0].length()>1)
                                                                                                                                                      {if("-".equals(sCellValue[0].substring(sCellValue[0].length()-1))){                                                                                                                                  
                                                                                                                                                                    sCellValue[0]="-"+sCellValue[0].substring(0, sCellValue[0].length()-1);                                                                                                                                
                                                                                                                                                      }
                                                                                                                                                      if(sCellValue[0].contains(",")){                                                                                                                      
                                                                                                                                                                    sCellValue[0]="\""+sCellValue[0].substring(0, sCellValue[0].length())+"\"";                                                                                                           
                                                                                                                                                      }
                                                                                                                                                      }

                                                                                                                                                      if(Data == "")
                                                                                                                                                      {Data = Data + sCellValue[0];}
                                                                                                                                                      else
                                                                                                                                                      {Data = Data + "," + sCellValue[0];}
                                                                                                                                       }
                                                                                                                         }
                                                                                                                         //to enclose single space with double quotes
                                                                                                                         Data = Data.replaceAll(", ,", ",\" \",");
                                                                                                                         Data = Data.replaceAll(", ", ",\" \"");                                                  
                                                                                                                         bw.append(Data+"\n");                                                                                                                                                               
                                                                                                           }                                                                                                                 
                                                                                            }                                        
                                                                              }
                                                               }//end of for loop          
                                                               
                                                                Data = Data + "\n";
                                                 }
                                                 bw.close();   
                                                 BufferedReader br = null;
                                                 String fileLoc = "";
                                                 if(osName.equalsIgnoreCase("Windows 8.1") || osName.equalsIgnoreCase("Windows 10") || osName.equalsIgnoreCase("Windows 10.0")){
                                                       fileLoc = "\\\\den00bwk.us.oracle.com\\OATS_ToolsRepository\\OATS_ToolsRepository_"+sBrowser+"\\ScriptResources\\Capture.csv";
                                                       br= new BufferedReader(new FileReader(fileLoc));
                                                 }else{
                                                       fileLoc = "C:/Capture.csv";
                                                        br= new BufferedReader(new FileReader(fileLoc)); 
                                                 }
                                                 if(br.readLine() != null){                            
                                                               info("[captureGridData] Passed: Grid data captured in "+fileLoc);
                                                 }
                                                 else{
                                                               CapturePage();
                                                               reportFailure("Grid Data not captured");
                                                               return;
                                                 }
                                   }catch(Exception e){
                                                 info("Exception occured : "+e.toString());
                                   }
                    }//end of gridid null
                    else{
                                   CapturePage();
                                   reportFailure("[captureGridData] Failed : Grid not found");             
                                   return;
                    }
      }
      else{
                    CapturePage();
                    reportFailure("[captureGridData] Failed : Unable to capture in Data Browser");         
      }
      info("Finished: Function captureGridData");

   }



   /************************************************************************************************************
    * Function: captureRangeGridData
    * Description: Captures Data in the specified Range grid from start cell to End cell.The csv is saved as 
    *               For windows 10 --> \\den00bwk.us.oracle.com\OATS_ToolsRepository\OATS_ToolsRepository_"+sBrowser+"\ScriptResources\CaptureAll.csv
    *               For other os --> C:/CaptureAll.csv
    * Created By:Spurthi P
    * Date: Oct 2016
    * @param startCell - Starting Range cell to be clicked
    * @param endCell - Ending Range cell to be clickedReturns:
    * @return Nil
    * Example: captureRangeGridData( "A15", "E18")       
    * **********************************************************************************************************
    */
public void captureRangeGridData(@Arg("startCell")String startCell, @Arg("endCell")String endCell) throws Exception{
        String[] a = {startCell, endCell};
        info("Starting: Function captureRangeGridData");
        String osName = System.getProperty("os.name");
        web.element("//web:div[@id='jdeGridBack']").scroll("0", "-5000");
        //checkFrame();
        //if((browser.getBrowser() instanceof ChromeBrowser) || (browser.getBrowser() instanceof FireFoxBrowser))
        // web.document(e1Browser).executeJavaScript("document.getElementById('jdeGrid').style.top = '0px';");   


        //to come to start of grid,since PAGEDOWN is done due to selectPreviewCells
        /* List<DOMElement> goUp = web.table("//web:table[@id='BrowsedGridData']").getElementsByTagName("td");
         goUp.get(0).focus();
         pressKeyChar("PAGEUP");
         goUp.get(0).scroll("0", "-3000");
         goUp.get(0).focus();
         pressKeyChar("PAGEUP");
         goUp.get(0).scroll("0", "-3000");*/
        //to get row and column numbers to input cells
        int row1=0, col1 = 0, i=0 ,row2 = 0,col2 = 0;
        for(int j=0;j<2;j++)
        {    
               char ch='A';                 
               String row="";
              for(i=1;i<=26;i++, ch++)
              {                
                     if(a[j].charAt(0)==ch){
                          if(j==0){
                                col1 = i;                                      
                           }else{
                                col2 = i;
                          }                            
                           break;
                    }                      
               }
              if(i == 26){
                    CapturePage();
                    testFailure("[captureRangeGridData] Failure : Invalid Input Data");
                    return;
              }
              for(int l=1;l<a[j].length();l++){
                    row = row + a[j].charAt(l);
              }    
               if(j==0){
                    row1 = Integer.parseInt(row);      
               }else{
                    row2 = Integer.parseInt(row);            
               }
        }//end of outer for

        //info(" row1 "+row1+" col1"+col1+" row2"+row2+" col2"+col2);
        //File file = new File("C:/CaptureAll.csv");
        File file = null;
        if(osName.equalsIgnoreCase("Windows 8.1") || osName.equalsIgnoreCase("Windows 10") || osName.equalsIgnoreCase("Windows 10.0")){
            file = new File("\\\\den00bwk.us.oracle.com\\OATS_ToolsRepository\\OATS_ToolsRepository_"+sBrowser+"\\ScriptResources\\CaptureAll.csv");
        }else{
            file = new File("C:/CaptureAll.csv");
        }
        if (!file.exists()) {
              file.createNewFile();
        }          
         FileWriter fw = new FileWriter(file.getAbsoluteFile());
        BufferedWriter bw = new BufferedWriter(fw);

        //to get column names of range grid
        String data = "";            
         List<DOMElement> colTd = web.table("//web:tr[@id='HeaderCell']").getElementsByTagName("td");
        for(int k=0;k<colTd.size()-1;k++){
              if(k+17 < colTd.size()){
                    data = data + colTd.get(k+17).getAttribute("text")+ ",";   
               }
        }
        data = data.replaceAll("\\r?\\n", "");               
         data = data.substring(0, data.length()-1);
        bw.write(data);

        //to get rowcount of range grid
        String total = web.element("//web:td[@id='GridLabel0_1.RowNumber']").getAttribute("text");
        String count[] = total.split("-");
        count[1] = count[1].replaceAll(" ", "");
        int rangeCount = Integer.parseInt(count[1]);

        int index = -1;
        int max = 0;
        String classn = "GridCell";
        String classm = "GridHeaderCell";

        //to get highest value among displayed row numbers - max
        List<DOMElement> rowTd;
        //capture data
        data = ""; 
         boolean flag = true;
        while(flag){
              rowTd = web.table("//web:table[@id='BrowsedGridData']").getElementsByTagName("td");
              for(int p=0;p<rowTd.size()-1;p++){  
                     //info("val :"+rowTd.get(p).getAttribute("className"));
                    if(rowTd.get(p).getAttribute("className")!=null && !rowTd.get(p).getAttribute("className").isEmpty() && rowTd.get(p).getAttribute("className")!="" ){       
                           if(classn.equals(rowTd.get(p).getAttribute("className"))){
                                String m = rowTd.get(p).getAttribute("text");
                                data = data + m + ",";  
                           }else if(classm.equals(rowTd.get(p).getAttribute("className"))){
                                // info("header :"+rowTd.get(p).getAttribute("text"));
                               max++;
                                if(data.length()!=0){
                                      data = data.substring(0, data.length()-1);
                                }
                                //write only unwritten data in file
                                if(Integer.parseInt(rowTd.get(p).getAttribute("text"))==(index+2)){
                                      index++;
                                      bw.append(data+"\n");
                                      //info("data in header: "+data);
                                      if(rowTd.get(p).getAttribute("text").equals("20")){
                                            flag = false;
                                      }
                                }
                                data = "";                               
                                 if((max%21)==0){
                                      List<DOMElement> rowTd1 = web.table("//web:table[@id='BrowsedGridData']").getElementsByTagName("td");
                                      rowTd1.get(1).focus();  
                                       //rowTd.get(1).keyPress("PageDown");
                                      // rowTd.get(1).mouseClick(0,0, "PageDown", 0, false);
                                      web.element("//web:div[@id='jdeGridBack']").scroll("0", "200");
                                      //pressKeyChar("PAGEDOWN");
                                      Thread.sleep(2000);
                                      break;
                                }
                          }                            
                     }
              }    
         }
        bw.close();

        //to get only required cell data 
         // File filec = new File("C:/Capture.csv");
        File filec = null;
        if(osName.equalsIgnoreCase("Windows 8.1") || osName.equalsIgnoreCase("Windows 10") || osName.equalsIgnoreCase("Windows 10.0")){
            filec = new File("\\\\den00bwk.us.oracle.com\\OATS_ToolsRepository\\OATS_ToolsRepository_"+sBrowser+"\\ScriptResources\\Capture.csv");
        }else{
            filec = new File("C:/Capture.csv");
        }
        if (!filec.exists()) {
              filec.createNewFile();
        }          
        FileWriter fwc = new FileWriter(filec.getAbsoluteFile());
        BufferedWriter bwc = new BufferedWriter(fwc);

        if (!file.exists()) {
              CapturePage();
              if(osName.equalsIgnoreCase("Windows 8.1") || osName.equalsIgnoreCase("Windows 10") || osName.equalsIgnoreCase("Windows 10.0")){
                    testFailure("[captureRangeGridData] Failure : \\\\den00bwk.us.oracle.com\\OATS_ToolsRepository\\OATS_ToolsRepository_"+sBrowser+"\\ScriptResources\\CaptureAll.csv vnot found");
              }else{
                    testFailure("[captureRangeGridData] Failure : C:/CaptureAll.csv not found"); 
              }
              return;
        }          
         FileReader fr = new FileReader(file.getAbsoluteFile());
        BufferedReader br = new BufferedReader(fr);
        String line1 = null, temp[];
        int rowno = 0;   
         //swap if row1>row2
        if(row1>row2){
              rowno =row1 ;
              row1 = row2 ;
              row2 = rowno ;
        }
        rowno = 0; 
         while((line1 = br.readLine()) != null){
              //for column names
              if(rowno == 0){
                    temp = line1.split(",");
                    line1 = "";                        
                     for(int y = (col1-1);y<=(col2-1);y++){
                          line1 = line1 + temp[y]+ ",";                        
                     }
                    line1 = line1.substring(0, line1.length()-1);
                    line1=line1.replaceAll(" ", "");
                    bwc.write(line1+"\n");
              }
              //for row  
               if((rowno>=row1) && (rowno<=row2)){
                    temp = null;
                    temp = line1.split(",");
                    line1 = "";                        
                     for(int y = (col1-1);y<=(col2-1);y++){
                          line1 = line1 + temp[y]+ ",";
                   }
                    line1 = line1.substring(0, line1.length()-1);
                    bwc.write(line1+"\n");
              }                
               rowno++;
        }
        bwc.close();
        // br= new BufferedReader(new FileReader("C:/Capture.csv"));
        String fileLoc = "";
        if(osName.equalsIgnoreCase("Windows 8.1") || osName.equalsIgnoreCase("Windows 10") || osName.equalsIgnoreCase("Windows 10.0")){
                 fileLoc = "\\\\den00bwk.us.oracle.com\\OATS_ToolsRepository\\OATS_ToolsRepository_"+sBrowser+"\\ScriptResources\\Capture.csv";
                 br= new BufferedReader(new FileReader(fileLoc));
        }else{
            fileLoc = "C:/Capture.csv";
            br= new BufferedReader(new FileReader(fileLoc));
        }
        if(br.readLine() != null){         
               info("[captureRangeGridData] Passed: Range Grid data captured in "+fileLoc);
        }else{
              CapturePage();
              testFailure("[captureRangeGridData] Failed: Range Grid Data not captured");
              return;
        }    
         info("Finished: Function captureRangeGridData");
  }


	public void clickFavoriteTableRowImage(int sRowIndex, String sImageName) throws Exception
	 {
		 info("Starting function clickFavoriteTableRowImage");

		 //Validating Favorite Table is Present
		 if(!web.exists("//web:table[@id='FavManageTable']",60))
		 {
			 CapturePage();
			 testFailure("FAILED : Favorite Table NOT found");
			 return;
		 }

		 DOMElement domEle=null;
		 if(web.exists("//web:tr[@id='Row_"+sRowIndex+"']",60))
		 {
			 domEle=web.element("//web:tr[@id='Row_"+sRowIndex+"']");
		 }else
		 {
			 CapturePage();
			 testFailure("FAILED : Row index "+sRowIndex+" not found in the Table");
			 return;
		 }

		 String id="";
		 if(sImageName.trim().equalsIgnoreCase("Rename"))
		 {
			 id="rename_"+sRowIndex;
		 }else if(sImageName.trim().equalsIgnoreCase("Delete"))
		 {
			 id="delete_"+sRowIndex;
		 }
		 domEle=web.element("//web:img[@id='"+id+"']");
		 //Handling the image name other than 'Rename' and 'Delete'
		 if(!domEle.exists() || domEle==null)
		 {
			 CapturePage();
			 testFailure("FAILED : Image "+sImageName+" in row "+sRowIndex+" NOT Found");
			 return;
		 }

		 String styleDisplay=domEle.getAttribute("style");
		 if(styleDisplay.contains("display: block") || styleDisplay.contains("display:block") || styleDisplay.contains("display=\"block\""))
		 {
			 domEle.click();
			 info("PASSED : Image "+sImageName+" in row "+sRowIndex+" Found and clicked");
		 }else
		 {
			 CapturePage();
			 testFailure("FAILED : Image "+sImageName+" in row "+sRowIndex+" NOT Found");
		 }

		 info("End function clickFavoriteTableRowImage");
		 return;
	 }
	 public void clickFavoriteTableRowText(@Arg("sRowIndex") int sRowIndex, @Arg("sText") String sText) throws Exception
	 {
		 info("Starting function clickFavoriteTableRowText");


		 //Validating Favorite Table is Present
		 if(!web.exists("//web:table[@id='FavManageTable']",60))
		 {
			 CapturePage();
			 testFailure("FAILED : Favorite Table NOT found");
			 return;
		 }

		 DOMElement domTr=null;
		 if(web.exists("//web:tr[@id='Row_"+sRowIndex+"']",60))
		 {
			 domTr=web.element("//web:tr[@id='Row_"+sRowIndex+"']");
		 }else
		 {
			 web.window(e1Browser).capturePage();
			 testFailure("FAILED : Row index "+sRowIndex+" not found in the Table");
			 return;
		 }

		 String valueFromTable= ((web.element("//web:tr[@id='Row_"+sRowIndex+"']")).getChildren().get(0).getAttribute("innerHTML"));//childrens are 'td'.
		 if(valueFromTable.contains(sText))
		 {
			 DOMElement firtTd=((web.element("//web:tr[@id='Row_"+sRowIndex+"']")).getChildren().get(0));
			 firtTd.click();
			 info("PASSED : Text "+sText+" in Row "+sRowIndex+" Found and clicked");
		 }else
		 {
			 web.window(e1Browser).capturePage();
			 testFailure("FAILED : Value "+sText+" in Row "+sRowIndex+" NOT Found");
		 }
		 info("End function clickFavoriteTableRowText");
		 return;
	 }


	 /************************************************************************************************************
	  * Function: clickOnPersonalizationMenu
	  * Description: This function will click  the menu  under the userSessionDropdown
	  * Created By: Rupa
	  * Date: August 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param strMenu  :The Menu Item that needs to be clicked.
	  * 		
	  * Returns: 
	  * 		@return Nil
	  * **********************************************************************************************************
	  */


	 public void clickOnPersonalizationMenu(@Arg("strMenu")String strMenu)throws Exception{

		 String[] strArrayMenuPath; 
		 int intCounter, intMenuCount;
		 strArrayMenuPath = strMenu.split(";");
		 intMenuCount = strArrayMenuPath.length;	
		 web.element("//web:div[@id='userSessionDropdownArrow']").click();
		 for(intCounter=0;intCounter<intMenuCount;intCounter++)

		 {
			 if(web.exists("//web:td[@text='"+strArrayMenuPath[intCounter]+"']"))
			 {
				 web.element("//web:td[@text='"+strArrayMenuPath[intCounter]+"']").click();
				 info("The Menu Item =" + strArrayMenuPath[intCounter] + " is  clicked successfully");
			 }
			 else
			 {
				 testFailure("There is no "+strArrayMenuPath[intCounter]+"  Menu");
				 CapturePage();
			 }
		 }
	 }

	 public void dragAndDropFavoriteTableRow(int sDragRowIndex, int sDropRowIndex) throws Exception
	 {
		 info("Starting function dragAndDropFavoriteTableRow");

		 if(!web.exists("//web:table[@id='FavManageTable']",60))
		 {
			 CapturePage();
			 testFailure("FAILED : Favorite Table NOT found");
			 return;
		 }

		 DOMElement domEle=null;
		 int tempDropRow=sDropRowIndex; 
		 if(sDropRowIndex==-1)
		 {
			 tempDropRow=0;
		 }
		 if(! web.exists("//web:tr[@id='Row_"+sDragRowIndex+"']",60))
		 {
			 CapturePage();
			 testFailure("FAILED : Row index "+sDragRowIndex+" not found in the Table");
			 return;
		 }else if(! web.exists("//web:tr[@id='Row_"+tempDropRow+"']",60))
		 {
			 CapturePage();
			 testFailure("FAILED : Row index "+tempDropRow+" not found in the Table");
			 return;
		 } 

		 domEle=web.element("//web:tr[@id='Row_"+sDragRowIndex+"']");
		 domEle.dragTo("//web:tr[@id='emptyRow_"+(sDropRowIndex+1)+"']");
		 info("PASSED : Row at index "+sDragRowIndex+" Dragged and Dropped after row index "+sDropRowIndex);
		 Thread.sleep(3000);
		 info("End function dragAndDropFavoriteTableRow");
		 return;
	 }

	 /************************************************************************************************************
	  * Function: getActiveElementId
	  * Description: This function will get the id from the Active element on the EOne page.
	  * Created By: Rupa
	  * Date: May  2017
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *          @param Nil
	  * Returns: 
	  *          @return id
	  * **********************************************************************************************************
	  */
	 public String getActiveElementId() throws Exception {
		 info("Starting Function: getActiveElementId");
		 checkFrame();
		 String ids[] = null; 
		 if(docIndex==null){
			 getDocIndex();
		 }
		 e1Document = "/web:document[@index='"+docIndex+"' or @name='e1menuAppIframe']";
		 e1Browser=e1BrowserWindow+e1Document;
		 DOMDocument document = web.document(e1Browser);
		 String selectedText[]=null,selectTextTagname[]=null;

		 //getting the tag name of the active element
		 document.executeJavaScript("function getActiveElementTagName(){return document.activeElement.tagName;}");
		 selectTextTagname = web.document(e1Browser).executeJsFunction("getActiveElementTagName");   
		 info("tag name :"+selectTextTagname[0]);
		 //for combobox
		 if((selectTextTagname[0].trim()).equalsIgnoreCase("SELECT")){
			 document.executeJavaScript("function getActiveElement(){return document.activeElement.id;}");
			 ids  = web.document(e1Browser).executeJsFunction("getActiveElement");
		 }
		 else if((selectTextTagname[0].trim()).equalsIgnoreCase("A")){
			 document.executeJavaScript("function getActiveElement(){return document.activeElement.id;}");
			 ids = web.document(e1Browser).executeJsFunction("getActiveElement");        
			 // info("selectedText val:"+selectedText[0]);
		 }
		 //for input text fields : text box, button, checkbox or radio button
		 else if((selectTextTagname[0].trim()).equalsIgnoreCase("INPUT")){                                                                                                       
			 //to get id of element
			 document.executeJavaScript("function getActiveElementTagName(){return document.activeElement.id;}");

			 ids = web.document(e1Browser).executeJsFunction("getActiveElementTagName");

			 info("Ending Function: getActiveElementId");
		 }
		 return  ids[0];
	 }

	 /************************************************************************************************************
	  * Function: getActiveElementText
	  * Description: This function will get the text from the Active element on the EOne page.
	  * Created By: Anusha Bonam
	  * Modified By: Spurthi
	  * Date: August 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *          @param Nil
	  * Returns: 
	  *          @return selectedText
	  * **********************************************************************************************************
	  */
	 public String getActiveElementText() throws Exception {
		 info("Starting Function: getActiveElementText");
		 checkFrame();
		 if(docIndex==null){
			 getDocIndex();
		 }
		 e1Document = "/web:document[@index='"+docIndex+"' or @name='e1menuAppIframe']";
		 e1Browser=e1BrowserWindow+e1Document;
		 DOMDocument document = web.document(e1Browser);
		 String selectedText[]=null,selectTextTagname[]=null;

		 //getting the tag name of the active element
		 document.executeJavaScript("function getActiveElementTagName(){return document.activeElement.tagName;}");
		 selectTextTagname = web.document(e1Browser).executeJsFunction("getActiveElementTagName");   
		 info("tag name :"+selectTextTagname[0]);
		 //for combobox
		 if((selectTextTagname[0].trim()).equalsIgnoreCase("SELECT")){
			 document.executeJavaScript("function getActiveElement(){var sel = document.activeElement;var opt = sel.options[sel.selectedIndex];return opt.text;}");
			 selectedText = web.document(e1Browser).executeJsFunction("getActiveElement");
		 }
		 else if((selectTextTagname[0].trim()).equalsIgnoreCase("A")){
			 document.executeJavaScript("function getActiveElement(){return document.activeElement.text;}");
			 selectedText = web.document(e1Browser).executeJsFunction("getActiveElement");        
			 info("selectedText val:"+selectedText[0]);
		 }
		 //for input text fields : text box, button, checkbox or radio button
		 else if((selectTextTagname[0].trim()).equalsIgnoreCase("INPUT")){                                                                                                       
			 //to get id of element
			 document.executeJavaScript("function getActiveElementTagName(){return document.activeElement.id;}");
			 String ids[] = null; 
			 ids = web.document(e1Browser).executeJsFunction("getActiveElementTagName");
			 info("id :"+ids[0]);
			 //if button send value,if radiobutton send id,if other element sends title
			 if(web.exists(e1Browser+"/web:form[@id='E1PaneForm']/web:input_button[@id='"+ids[0]+"']",20)){
				 document.executeJavaScript("function getActiveElement(){return document.activeElement.value;}");

			 }else if(web.exists(e1Browser+"/web:form[@id='E1PaneForm']/web:input_radio[@id='"+ids[0]+"']",20)){
				 document.executeJavaScript("function getActiveElement(){return document.activeElement.id;}");
			 }else if(web.exists(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+ids[0]+"']",20)){
				 if(ids[0].startsWith("G0_1")){//if the chkbox is in grid, (selected value=1, deselected val = 0)
					 document.executeJavaScript("function getActiveElement(){return document.activeElement.value;}");
				 }else{
					 document.executeJavaScript("function getActiveElement(){return document.activeElement.title;}");
				 }
			 }
			 else{
				 document.executeJavaScript("function getActiveElement(){return document.activeElement.value;}");
				 selectedText = web.document(e1Browser).executeJsFunction("getActiveElement");        
				 info("selectedText val:"+selectedText[0]);
				 Pattern a = Pattern.compile("^\\s*$");
				 Matcher m =a.matcher(selectedText[0]);
				 if(m.find() || selectedText[0]==null){                                                                                                                                                    
					 document.executeJavaScript("function getActiveElement(){return document.activeElement.title;}");                                                                                    
				 }
			 }                                              
			 selectedText = web.document(e1Browser).executeJsFunction("getActiveElement");
			 info("selectedText title:"+selectedText[0]);
		 }                              
		 else{        
			 CapturePage();
			 testFailure("No active INPUT element is found on the page");
			 return null;
		 }                              
		 info("Ending Function: getActiveElementText");
		 return selectedText[0];
	 }
	 

	 public int getFavoriteTableRowCount() throws Exception
	 {
		 info("Starting function getFavoriteTableRowCount");

		 DOMElement domEle=null;
		 int rowCount=-1;
		 if(web.exists("//web:table[@id='FavManageTable']",60))
		 {
			 domEle=web.element("//web:table[@id='FavManageTable']");
		 }else
		 {
			 CapturePage();
			 testFailure("FAILED : Favorite Table NOT found");
			 return rowCount;
		 }

		 List<DOMElement> trList=domEle.getElementsByTagName("tr");
		 for(DOMElement tempEle:trList)
		 {
			 String id=tempEle.getAttribute("id");
			 info("id="+id);
			 if((id != null)&&((id.contains("Row_")) && ( ! id.contains("emptyRow_")))) 
			 {
				 rowCount++;
			 }
		 }
		 if(! (rowCount== -1))
		 {
			 rowCount=rowCount+1;
		 }

		 info("End function getFavoriteTableRowCount");
		 return rowCount;
	 }

	 public int getFavoriteTableTextRowIndex(String sText) throws Exception	{
		 info("Starting function getFavoriteTableTextRowIndex");


		 int index=0;
		 DOMElement domEle=null;
		 if(web.exists("//web:table[@id='FavManageTable']",60))
		 {
			 domEle=web.element("//web:table[@id='FavManageTable']");
		 }else
		 {
			 web.window(e1Browser).capturePage();
			 return -1;
		 }

		 try
		 {
			 index=Integer.parseInt((Pattern.compile("[|]").split(sText.trim()))[0].trim());
			 sText=(Pattern.compile("[|]").split(sText.trim()))[1];
		 }catch(NumberFormatException e)
		 {
			 sText=sText.trim();
		 }

		 List<DOMElement> trList=domEle.getElementsByTagName("tr");
		 int count=-1;
		 boolean flag=false;
		 for(DOMElement tempEle:trList)
		 {
			 String innerHTML= ((tempEle)).getChildren().get(0).getAttribute("innerHTML");
			 if((innerHTML !=null)&&(innerHTML.contains(sText)))  
			 {
				 count++;
				 if(count==index)
				 {
					 index=Integer.parseInt(tempEle.getAttribute("id").split("_")[1].trim());	
					 flag=true;
				 }
			 }
		 }
		 if(flag!=true)
		 {
			 web.window(e1Browser).capturePage();
			 index=-1;
		 }

		 info("End function getFavoriteTableTextRowIndex");
		 return index; 
	 }

	 /************************************************************************************************************
	  * Function: getFreezedColLen 
	  * Description: This function return the number of grid columns in freezed area.
	  * Created By: Ghulam Quadir
	  * Date: Nov 2016 
	  * Modified By: 
	  * To be incorporated: Nil InputParameters:
	  * Returns : number of clumn in freezed area. Return -1 if there is no freezed area
	  * Example:
	  * getFreezedColLen();
	  */
	 public int getFreezedColLen() throws Exception
	 {
		 info("Starting function getFreezedColLen");
		 checkFrame();
		 String divId, colIndex=null;

		 divId ="gridHeaderFreezDiv0_1";//This div contains the header of the freezed area.
		 DOMElement ele=null;
		 try{
			 ele=web.element("//web:div[@id='freezeGrid0_1']");
			 String temp=ele.getAttribute("innerHTML");
			 if(temp.equals(""))
			 {
				 return -1;//There is no freezed area.
			 }
		 }catch(Exception e)
		 {
			 CapturePage();
			 return -1;
		 }
		 ele=web.element("//web:div[@id='"+divId+"']");
		 if(ele!=null && ele.exists())
		 {
			 info("found");
			 List<DOMElement> allHeaderSpan= web.element("//web:div[@id='"+divId+"']").getElementsByTagName("span");//These are the td containing header name
			 if(allHeaderSpan!=null)
			 {
				 return allHeaderSpan.size();
			 }
			 else
			 {
				 return -1;
			 }
		 }else
		 {
			 info("not found");
			 CapturePage();
			 return -1;
		 }
	 }

	 /************************************************************************************************************
	  * Function: getGridRowData
	  * Description: The function returns String which is created by concatenating grid cell values of all columns for given row.
	  * Created By: Megha K
	  * Date:Jan 2017
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 	@param iIndex  : index of the grid in the webpage starting from 0.
	  *     @param irow    : Row number of which grid row data is required.
	  * Returns: 
	  * 	 @return Nil
	  * Examples: 1. getGridRowData(0,1);
	  * 		  2. getGridRowData(1,0);
	  * **********************************************************************************************************
	  */

	 public String getGridRowData(@Arg("iIndex") int iIndex, @Arg("iRow") int iRow)throws Exception {
		 info("Starting:Function getGridRowData");
		 int rowIndex;
		 String str="";
		 String gridId,colIndex,fieldVal;
		 String[] output=null;
		 int colCount=0,i=0;
		 if (!bDB){
			 checkFrame();
			 gridId=getGridObjReference(iIndex);
			 if(gridId!=null){
				 String rowcount[]=web.document(e1Browser).executeJsFunction("getvisibleRowCount",gridId);

				 int rowCount = 0;
				 try{rowCount=Integer.parseInt(rowcount[0]);}catch (NumberFormatException e) {
					 warn("numberformat exception "+rowcount[0]);
				 }
				 if(iRow>(rowCount-1)){
					 CapturePage();
					 testFailure("getting grid row data failed: Grid only has " + rowCount+ " rows");						
					 return str;
				 }	
				 rowIndex=getRowIndexForVisibleRow(gridId, iRow);

				 output = web.document(e1Browser).executeJsFunction("getColLen", gridId);
				 try{colCount=Integer.parseInt(output[0]);}catch (NumberFormatException e) {
					 warn("numberformat exception "+output[0]);
				 }
				 for(i=0;i<colCount;i++){
					 colIndex=String.valueOf(i);
					 String cellVal[]=web.document(e1Browser).executeJsFunction("getGridRowCellValue",gridId,Integer.toString(rowIndex),colIndex);
					 fieldVal=cellVal[0];
					 str=str+" "+fieldVal;
				 }
			 }else{
				 testFailure("Grid with given index is not present on the page");
				 CapturePage();
			 }
		 }else{
			 checkFrame();
			 gridId=getDataBrowserGridObjReference();
			 if(gridId!=null){
				 String rowcount[]=web.document(sDBBrowser).executeJsFunction("getvisibleRowCount",gridId);

				 int rowCount = 0;
				 try{rowCount=Integer.parseInt(rowcount[0]);}catch (NumberFormatException e) {
					 warn("numberformat exception "+rowcount[0]);
				 }
				 if(iRow>(rowCount-1)){
					 CapturePage();
					 testFailure("getting grid row data failed: Grid only has " + rowCount+ " rows");						
					 return str;
				 }	
				 rowIndex=getRowIndexForVisibleRow(gridId, iRow);

				 output = web.document(sDBBrowser).executeJsFunction("getColLen", gridId);
				 try{colCount=Integer.parseInt(output[0]);}catch (NumberFormatException e) {
					 warn("numberformat exception "+output[0]);
				 }
				 for(i=0;i<colCount;i++){
					 colIndex=String.valueOf(i);
					 String cellVal[]=web.document(sDBBrowser).executeJsFunction("getGridRowCellValue",gridId,Integer.toString(rowIndex),colIndex);
					 fieldVal=cellVal[0];
					 str=str+" "+fieldVal+" ";
				 }
			 }else{
				 testFailure("Grid with given index is not present on the page");
				 CapturePage();
			 } 
		 }
		 info("Ending:Function getGridRowData");
		 return str;
	 }

	 
	 public void getGridRowData(@Arg("iIndex") int iIndex, @Arg("iRow") int iRow,@Arg("colName") String colName) throws Exception{
		 int appender=checkColumnExists(colName);
		 if(appender==0){
			 datatable.getGlobalDatatable().addColumn("Global",colName,0);
		 }
		 String tmpVal=(String)getGridRowData(iIndex, iRow)	; 
		 datatable.getGlobalDatatable().setValue("Global",0,  colName, tmpVal);	
	 }
	 /************************************************************************************************************
	  * Function: getWebListItemSize
	  * Description: Used to get the size of specified WebList.
	  * Created By: Spurthi P
	  * Date: Oct 2016
	  * Input Parameters: 
	  * 		@param sId: Id of the WebList on the page.
	  * Returns: 
	  * 		@return size of WebList
	  * **********************************************************************************************************
	  */
	 public int getWebListItemSize(@Arg("sId") String sId) throws Exception {
		 if(docIndex==null){
			 getDocIndex();
		 }		
		 String bro;
		 if(!bDB){
			 bro=e1Browser;
		 }else{
			 bro=sDBBrowser;
		 }		
		 if(web.exists(bro+"/web:form[@id='E1PaneForm']/web:select[( @id='"+sId+"')]",10)){
			 List<DOMElement> allItems=web.selectBox(bro+"/web:select[(@id='"+sId+"')]").getOptions();
			 info("[getWebListItemSize] Passed: The size of Weblist with Id "+sId+" is "+allItems.size());
			 return allItems.size();
		 }else{
			 CapturePage();			
			 testFailure("[getWebListItemSize]  Failed : Weblistitem doesnt Exist");				
			 return -1;
		 }	
	 }

	 /************************************************************************************************************
	  * Function: validateExportedCSVs
	  * Description: Used to Validate two csv file contents.
	  * Created By: Spurthi P
	  * Date: April 2017
	  * Input Parameters: 
	  * 		@param captured: Path of captured csv file.
	  * 		@param exported: Path of exported csv file.
	  * Returns: 
	  *  		@return Nil
	  * Example: validateExportedCSVs("C:\\Capture.csv", "C:\\Tabledata1.csv");
	  * **********************************************************************************************************
	  */
	 public void validateExportedCSVs(@Arg("captured") String captured,@Arg("exported") String exported) throws Exception{
		 info("Starting: Function validateExportedCSVs");
		 int colCount = 0, rowCount = 0;
		 FileReader fr = new FileReader(new File(exported));
		 BufferedReader br = new BufferedReader(fr);
		 String line = br.readLine();
		 line = line.replaceAll(" "," ");		
		 for(int z=0;z<line.length();z++){
			 if(line.charAt(z)==',')
				 colCount++;	
		 }
		 fr.close();
		 br.close();			
		 try	{
			 File f1 = new File(captured);
			 File f2 = new File(exported);
			 BufferedReader reader1 = new BufferedReader(new FileReader(f1));
			 BufferedReader reader2 = new BufferedReader(new FileReader(f2));
			 String line1 = null;
			 String line2 = null;
			 int flag = 1;
			 //Line by line csv file validation
			 while ((flag == 1) && ((line1 = reader1.readLine()) != null)
					 && ((line2 = reader2.readLine()) != null)) {
				 if (!line1.equalsIgnoreCase(line2))
				 {	
					 info("Mismatched file contents :\n Line of "+captured+": "+line1+"\n Line of "+exported+": "+line2);
					 flag = 0;
				 }
				 rowCount++;
			 }
			 getScript("EOneUtility").callFunction("incrementValidationCount",(rowCount*colCount));			 
			 reader1.close();			 
			 reader2.close();	
			 if(flag == 1)
			 {	
				 info("[validateExportedCSVs] Passed: The csv files "+captured+" and "+exported+" are Matching");
			 }
			 else{
				 getScript("EOneUtility").callFunction("CapturePage");		
				 testFailure("[validateExportedCSVs] Failed: The csv files "+captured+" and "+exported+" are NOT matching");								
				 return;
			 }
		 }catch(Exception E){
			 info(E.getMessage());
		 }		
		 info("Finished: Function validateExportedCSVs");
	 }

	 public void getWebListItemSize(String sId, String colName) throws Exception {
		 String size=""+getWebListItemSize(sId);
		 int appender=checkColumnExists(colName);
		 if(appender==0){
			 datatable.getGlobalDatatable().addColumn("Global",colName,0);
		 }
		 datatable.getGlobalDatatable().setValue("Global",0,  colName, size);
	 }

	 /************************************************************************************************************
	  * Function: isMenuItemExistsAtSpecifiedSection
	  * Description: This function will return true if menu item exists in the specified section/false if does does not exist.
	  * Created By: Sunil
	  * Date: Feb 2017
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param MenuType : Type of the menu.(i.e.,Form, Row)
	  * 		@param Items :  The menu item name available under the menu type.In case sub menu pass sub menu item name sepreted by semicolumn(;).
	  * 		@param Section : Section in which menu item present.(Favorites/form/row present on pop up window).  
	  * 		@return Nil
	  *
	  * Example: 
	  * isMenuItemExistsAtSpecifiedSection("Row","Refresh", "Favorites");  
	  * isMenuItemExistsAtSpecifiedSection("Form","Customer;Exit for Testing","Form");
	  *  
	  * **********************************************************************************************************
	  */
	 public String isMenuItemExistsAtSpecifiedSection(String MenuType, String Items, String Section) throws Exception {
		 checkFrame();
		 incrementValidationCount(1);
		 if((MenuType.trim()).equalsIgnoreCase("Form") || (MenuType.trim()).equalsIgnoreCase("Row")){
			 MenuType = MenuType.toUpperCase();

		 }else {
			 CapturePage();
			 testFailure("Menu Type "+MenuType+" is not present");
			 return "";
		 }
		 String[] menuItem = Items.split(";");
		 String element = null;
		 String[] elementItems = null;
		 List<DOMElement> nobrList=null;
		 boolean flag=false;
		 String elementValue="";
		 ArrayList<String> getEachElevalue=new ArrayList<String>();

		 DOMDocument doc=null;
		 DOMElement eleDom=null;

		 if ((web.exists("//web:img[@id='"+MenuType+"_EXIT_BUTTON' ]",60))) {//This ensures presence of "Form Menu icon" on the page 
			 customClick(web.element("//web:img[@id='"+MenuType+"_EXIT_BUTTON' ]"));
			 info(MenuType+" menu clicked");
			 doc=web.document(e1Browser);

			 String currId=web.element("//web:img[@id='"+MenuType+"_EXIT_BUTTON' ]").getAttribute("launchmenuid");//Row menu div id is different for all application.

			 for(int i=0;i<menuItem.length;i++)
			 {
				 int itemIndex=0;
				 element=menuItem[i].trim();//First Item of path
				 elementItems=Pattern.compile("[|]").split(element);
				 if(elementItems.length==2)//Index is present with from menu item
				 {
					 itemIndex=Integer.parseInt(elementItems[0]); 
					 elementValue=elementItems[1];
					 getEachElevalue.add(elementValue);
				 }else
				 {
					 elementValue=elementItems[0];
					 getEachElevalue.add(elementValue);
				 }
				 eleDom=web.element("//web:div[@id='"+currId+"']");
				 nobrList=eleDom.getElementsByTagName("nobr");

				 int count=-1;
				 String innerHTML="";
				 String divId="";
				 for(DOMElement tempDom:nobrList)
				 {
					 innerHTML=tempDom.getAttribute("innerHTML");
					 flag=false;
					 if((innerHTML.replaceAll("&nbsp;","")).equalsIgnoreCase(elementValue))
					 {
						 count++;
					 } 
					 if(itemIndex==count)//This is the element to select
					 {// in this block Hover/Click over the item and find the id of next div.
						 //Get the First div element.
						 DOMElement temp=tempDom;
						 for(int j=0;;j++)
						 {
							 temp=temp.getParent(); 
							 if((temp!=null)&&(temp.getTag().contains("DIV")))//getTag() return tag name in capital letter
							 {
								 divId=temp.getAttribute("id");
								 currId=divId.replace("-Show","");//This will be id of div of next path item
								 if(i==menuItem.length-1)//It is last element.
								 {	
									 String str = "";
									 if(Section.equalsIgnoreCase("Favorites") && MenuType.equalsIgnoreCase("form")){
										 str = "FE";
									 }else if(Section.equalsIgnoreCase("Favorites") && MenuType.equalsIgnoreCase("row")){
										 str = "RE";
									 }else if(Section.equalsIgnoreCase("form") || MenuType.equalsIgnoreCase("row")){
										 str = "HE";
										 count = -1;
										 if(divId.contains("FE") || divId.contains("RE")){
											 break;
										 }
									 }else{
										 CapturePage();
										 testFailure("FAILED : Function isMenuItemExistsAtSpecifiedSection Exiting. Specified form menu section is not present.");
										 return "";
									 }
									 if(divId.contains(str))//Parent div has id containing with "FE", "RE" or "HE"
									 {
										 flag=true;
										 break;
									 }else{
										 flag=false;
										 break;

									 }

								 }else//mouse over element.
								 {
									 temp.getChildren().get(0).mouseOver();
									 flag=true;
									 break;
								 }
							 }
							 if(j==100)//Find upto hundred parent element only
							 {
								 break;
							 }
						 }
						 if(flag==true)//Element found. So come out of outer loop also;
						 {
							 break;
						 }
						 //info("MOUSE OVER and currId="+currId);
					 }
				 }
			 }
		 }
		 return ""+flag;
	 }

	 /************************************************************************************************************
      * Function: mouseOverGridRowImg(iIndex,iRow,sFieldName)  
      * Description: This function will mouseOver under the specified column of the specified row on the grid.
      * Created By: Rupa
      * Date: August 2016
      * Modified By: Sunil
      * Date: August 2017(23.8)
      * To be incorporated: Nil 
      * InputParameters:
      * @param iIndex - index of the grid in the webpage starting from 0
      * @param iRow - Visible row number starting from 0
      * @param sFieldName - column header of the cell that needs to be mouseOvered. 
      * Returns: Nil
      * Exmaple 
      * mouseOverGridRowImg(0,0,"SearchType")
      * **********************************************************************************************************
      */ 
     public void mouseOverGridRowImg(@Arg("iIndex") int iIndex,@Arg("iRow") int iRow, @Arg("sFieldName") String sFieldName)throws Exception {
          info("Starting:Function mouseOverGridRowImg ");
          String gridId;

          if(!bDB){
                checkFrame();
                gridId = getGridObjReference(iIndex);
                if(gridId!=null){
                      int rCount=getGridRowCountByIndex(iIndex);
                      if(iRow>(rCount-1)){

                            testFailure("Clicking grid row "+(iRow+1)+" Failed:  grid only has "+rCount+" rows");
                            CapturePage();
                            valCount=valCount+1;
                            return;
                      }                
                      String colIndex=getColIndexForColName(gridId,sFieldName);
                      if(colIndex!=null){
                            int rowIndex=getRowIndexForVisibleRow(gridId,iRow);
                            String[] gridCellId = web.document(e1Browser).executeJsFunction("clickGridImgByIndex", gridId,""+rowIndex,colIndex, "0");
                            info("gridCellId : "+gridCellId[0]);
                            web.image(e1Browser+"/web:form[@id='E1PaneForm']/web:img[@id='"+gridCellId[0]+"']").focus();
                            web.image(e1Browser+"/web:form[@id='E1PaneForm']/web:img[@id='"+gridCellId[0]+"']").mouseOver(false);//mouseOver();
                            info("Identified Image on " + sFieldName + "& mouseOvered");

                      }else{

                            testFailure("Failed to Identify Image on " + sFieldName+ "and unable to mouseOver");
                            CapturePage();
                      }
                }


          }

          info("Finished:Function mouseOverGridRowImg");


    }

     /************************************************************************************************************
      * Function: openNotepadAndPaste
      * Description: The function opens Notepad and paste the data(Ctrl+V) which is already copied(with Ctrl+C).
      * Created By: Megha K
      * Date:Jan 2017
      * Modified By: Sunil
      * Date: Aug 2017
      * To be incorporated: Nil
      * Input Parameters: Nil
      * Returns: 
      *    @return Nil
      * Examples: openNotepadAndPaste()
      * **********************************************************************************************************
      */ 
   public void openNotepadAndPaste() throws Exception
   {
         info("Starting:Function openNotepadAndPaste ");
         String path = "\\\\den00bwk.us.oracle.com\\OATS_ToolsRepository\\OATS_ToolsRepository_"+sBrowser+"\\ScriptResources";
         File f = new File(path+"\\file.txt");
         while(f.exists()){
               f.delete();
         }
         f.createNewFile();

         try{ 
                Runtime runtime = Runtime.getRuntime();
               Process process = runtime.exec("notepad.exe "+path+"\\file.txt");
               Thread.sleep(3000);  //to keep focus on notepad for some time.

               Robot rob=new Robot();
               rob.keyPress(KeyEvent.VK_CONTROL);
               rob.keyPress(KeyEvent.VK_V);
               rob.keyRelease(KeyEvent.VK_V);
               rob.keyPress(KeyEvent.VK_S);
               rob.keyRelease(KeyEvent.VK_S);
               rob.keyRelease(KeyEvent.VK_CONTROL);

               Thread.sleep(3000); 

               process.destroy();

         }catch(Exception e){
               e.printStackTrace();
         }
         info("Copied Data is pasted and saved successfully");
         info("Ending: Fucntion openNotepadAndPaste");
   }



	 /************************************************************************************************************
	  * Function: outputSelectWebListOptions 
	  * Description: This function gets all the available options in select web list item and concate them with separator '##' and store them in datatable.
	  * Created By: Ghulam Quadir
	  * Date: Oct 2016 
	  * Modified By: 
	  * To be incorporated: Nil InputParameters:
	  * @param sSelectWebListID : HTML id of the select web list.
	  * * @param colName : Coulmn Name under which value will stored in datatable.
	  * Example:
	  * outputSelectWebListOptions("GFAllCols", "AllOptions");//This will get all the option from select web list item having id='GFAllCols' and store them in datatable under column='AllOptions'
	  */
	 public void outputSelectWebListOptions(String sSelectWebListID, String colName) throws Exception
	 {
		 info("Starting function outputSelectWebListOptions");
		 if (docIndex == null) {
			 docIndex = getDocIndex();
		 }

		 DOMSelect selectItem=web.selectBox("//web:select[@id='"+sSelectWebListID.trim()+"']");
		 if(selectItem==null || !selectItem.exists())
		 {
			 web.window(e1Browser).capturePage();
			 testFailure("FAILED : Select web list item with id='"+sSelectWebListID+"' Not found on the page");
			 return;
		 }

		 List<DOMElement> allItems=selectItem.getOptions();//Getting all Options in select list
		 String finalString="";
		 for(DOMElement temp : allItems)
		 {
			 String val=temp.getAttribute("text");
			 if(finalString.equals(""))
			 {
				 finalString=val;
			 }else
			 {
				 finalString=finalString+"##"+val;
			 }
		 }
		 //System.out.println("finalStirng="+finalString);

		 datatable.getGlobalDatatable().addColumn("Global",colName,0);
		 datatable.getGlobalDatatable().setValue("Global",0,  colName, finalString);	

		 info("Passed : value \""+finalString+"\" stored in datatable under column "+colName);
		 info("End function outputSelectWebListOptions");
	 }

	 /************************************************************************************************************
	  * Function: reorderGridColumnAtLocation
	  * Description: Reorder specified column form source to destination.
	  * 				during reorder check Vertical bar(Dotted line) is visible to right or left side of the column.
	  * Created By: Sunil
	  * Date: December, 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *          @param iIndex: Grid index value
	  *          @param sourceColName: Name of the  source column
	  *          @param destColName: Name of the  destination column
	  * Returns: 
	  *          @return Nil
	  * **********************************************************************************************************
	  */ 
	 public void reorderGridColumnAtLocation(@Arg("iIndex")int iIndex,@Arg("sourceColName")String sourceColName,@Arg("destColName")String destColName)throws Exception{
		 info("Starting: Function [reorderGridColumnAtLocation]");
		 checkFrame();
		 String gridId;
		 gridId = getGridObjReference(iIndex);
		 info("grid Id : "+gridId);
		 if(gridId!=null){
			 String sourceColIndex=getColIndexForColName(gridId,sourceColName);
			 info("sourceColIndex : "+sourceColIndex);
			 String destColIndex=getColIndexForColName(gridId,destColName);
			 info("destColIndex : "+destColIndex);
			 if(sourceColIndex != null && destColIndex != null){
				 web.document(e1Browser).executeJsFunction("scrollToLeft", gridId,"0");
				 web.element(e1Browser+"/web:table[@id='jdeGridHeaderData"+gridId+"' ]/web:tr[@id='hdrRow"+gridId+"']/web:div[@id='HDR_DIV"+gridId+"."+sourceColIndex+"']/web:td[@colIndex='"+sourceColIndex+"']").mouseOver(true);
				 web.element(e1Browser+"/web:table[@id='jdeGridHeaderData"+gridId+"']/web:tr[@id='hdrRow"+gridId+"' ]/web:div[@id='HDR_DIV"+gridId+"."+sourceColIndex+"']/web:td[@colIndex='"+sourceColIndex+"']").mouseDown(false);
				 web.element(e1Browser+"/web:table[@id='jdeGridHeaderData"+gridId+"']/web:tr[@id='hdrRow"+gridId+"' ]/web:div[@id='HDR_DIV"+gridId+"."+destColIndex+"']/web:td[@colIndex='"+destColIndex+"']").mouseOver();
				 Thread.sleep(500);

				 List<DOMElement> getChild = web.element(e1Browser+"/web:table[@id='jdeGridHeaderData"+gridId+"' ]/web:tr[@id='hdrRow"+gridId+"']/web:div[@id='HDR_DIV"+gridId+"."+destColIndex+"']").getChildren();
				 if(Integer.parseInt(sourceColIndex) < Integer.parseInt(destColIndex)){
					 DOMElement rightMove = getChild.get(1);
					 String rightStyleProperty = rightMove.getAttribute("style");
					 info("rightMove = "+rightStyleProperty);
					 if(rightStyleProperty.trim().contains("borderRightColor:rgb(140, 140, 140)") || rightStyleProperty.trim().contains("border-right-color=\"rgb(140, 140, 140)\"")){//border-left-color="rgb(140, 140, 140)"
						 info("Vertical bar(Dotted line) is visible to right side of the column.");
					 }else{
						 CapturePage();
						 testFailure("Vertical bar(Dotted line) is present to right side of the column.");
					 }
				 }else{
					 DOMElement leftMove = getChild.get(2);
					 String leftStyleProperty = leftMove.getAttribute("style");
					 //info("leftMove = "+leftStyleProperty);
					 if(leftStyleProperty.trim().contains("borderLeftColor:rgb(140, 140, 140)") || leftStyleProperty.trim().contains("border-left-color=\"rgb(140, 140, 140)\"")){
						 info("Vertical bar(Dotted line) is visible to left side of the column.");
					 }else{
						 CapturePage();
						 testFailure("Vertical bar(Dotted line) is present to left side of the column.");
					 }
				 }
				 web.element(e1Browser+"/web:table[@id='jdeGridHeaderData"+gridId+"']/web:tr[@id='hdrRow"+gridId+"' ]/web:div[@id='HDR_DIV"+gridId+"."+destColIndex+"']/web:td[@colIndex='"+destColIndex+"']").mouseUp(false);
				 syncFrame();
				 gridId = getGridObjReference(iIndex);
				 String newColIdx=getColIndexForColName(gridId,sourceColName);
				 if(!(sourceColIndex.equals(newColIdx))){
					 info("Passed : Specified Column " +sourceColName+" is reordered to column index "+newColIdx+" on the page.");
				 }else{
					 CapturePage();
					 testFailure("Failed : Specified Column " +sourceColName+" couldn't be reorder on the page. Please check the property of column whether column is reorderable.");
				 }
			 }else{
				 if(sourceColIndex == null){
					 CapturePage();
					 testFailure("Failed : Specified Column  " +sourceColName+" is not present on the page.");
				 }
				 if(destColIndex == null){
					 CapturePage();
					 testFailure("Failed : Specified Column  " +destColName+" is not present on the page.");
				 }
			 }
		 }
		 info("Finished : Function [reorderGridColumnAtLocation]");
	 }

	 /************************************************************************************************************
      * Function: resizeColumnValidateIsResizable
      * Description: 1) Resize any specific column. The column should be resized accordingly.
      *                     2) Validate column is resizable or not.
      * Created By: Sunil
      * Modified By -Rupa
      * Date: 20th Oct, 2016
      * To be incorporated: Nil
      * Input Parameters: 
       *       @param iIndex- Index of the grid.
      *         @param columnName: Name of the column
      *         @param resizeIncreaseDecrease: true for increase width size & false for decrease width size
      *         
       * Returns: 
       *         @return Nil
      * Example :1) resizeColumnValidateIsResizable( 0, "Address Number", "false");
      *          2) resizeColumnValidateIsResizable( 0, "Address Number", "true");
      * **********************************************************************************************************      
      */

     public void resizeColumnValidateIsResizable( @Arg("iIndex")int iIndex,@Arg("sColumnName")String sColumnName, @Arg("resizeIncreaseDecrease")boolean resizeIncreaseDecrease) throws Exception {
           info("Starting function [resizeColumnValidateIsResizable]");
           checkFrame();
           incrementValidationCount(1);
           String gridId;
           gridId = getGridObjReference(iIndex);
           if(gridId!=null)
           {
                 String colIndex=getColIndexForColName(gridId,sColumnName);
                 if(colIndex!=null){
                       web.document(e1Browser).executeJsFunction("scrollToLeft", gridId,"0");
                       String divIdForWidth = "HDR_DIV"+gridId+"."+colIndex;
                       String divIdForResize = "rAnchor"+gridId+"."+colIndex;
                       DOMElement domEle = null;                       
                       if( web.exists(e1Browser+"/web:div[@id='"+divIdForResize+"']")){
                            domEle = web.element(e1Browser+"/web:div[@id='"+divIdForResize+"']");
                       }else{
                             List<DOMElement> divList=null;
                             divList = web.element(e1Browser+"/web:div[@id='"+divIdForWidth+"']").getChildren();
                             if(divList.get(1).getClassName().equalsIgnoreCase("resizeReorderAnchor")){
                                   domEle = divList.get(1);
                             }
                       }
                       if( domEle != null && domEle.exists()){
                             String width = web.element(e1Browser+"/web:div[@id='"+divIdForWidth+"']").getAttribute("style");                            
                             if(width.contains("width: ")){
                                   width = width.split("width: ")[1];
                                   width = width.split("px;")[0];
                             }else{
                                   width = width.split(", width=\"")[1];
                                   width = width.split("px")[0];
                             }
                             info("Actual width of specified column : "+width);
                             
                             
                            // web.element(e1Browser+"/web:div[@id='"+divIdForResize+"']").focus();
                            // web.element(e1Browser+"/web:div[@id='"+divIdForResize+"']").mouseOver();
                            // web.element(e1Browser+"/web:div[@id='"+divIdForResize+"']").click();
                             domEle.focus();
                             if(sBrowser.equalsIgnoreCase("firefox")){
                            	 domEle.mouseOver();
                            	 domEle.click();
                            	 syncFrame();
                            	 syncFrame();
                            	 try {
                            		 PointerInfo getLoc = MouseInfo.getPointerInfo();
                            		 Point getPtr = getLoc.getLocation();
                            		 int x = (int) getPtr.getX();
                            		 int y = (int) getPtr.getY();
                            		 Robot robot = new Robot();
                            		 if(resizeIncreaseDecrease==true){
                            			 x = x + 5; // increment the X co-ordinates value
                            		 }else if(resizeIncreaseDecrease==false){
                            			 x = x - 5; // decrement the X co-ordinates value
                            		 }
                            		 robot.mousePress(InputEvent.BUTTON2_MASK);    //left click press
                            		 robot.mouseMove(x , y);                                      // move mouse to location
                            		 robot.mouseRelease(InputEvent.BUTTON2_MASK);  //left click release

                            	 } catch (AWTException e) {
                            		 e.printStackTrace();
                            	 }
                             } else{
                            	 Rect rect =  domEle.getElementLocation();
                            	 System.out.println("rect:"+rect);
                            	 if(resizeIncreaseDecrease==true){
                            		 ft.dragAndDrop(rect.left+1, rect.top+3, rect.left+5, rect.top+3); // increment the X co-ordinates value
                            	 }else if(resizeIncreaseDecrease==false){
                            		 ft.dragAndDrop(rect.left+1, rect.top+3, rect.left-5, rect.top+3); // decrement the X co-ordinates value
                            	 }
                             }
                             syncFrame();
                             String newWidth = web.element(e1Browser+"/web:div[@id='"+divIdForWidth+"']").getAttribute("style");
                             if(newWidth.contains("width: ")){
                                   newWidth = newWidth.split("width: ")[1];
                                   newWidth = newWidth.split("px;")[0];
                             }else{
                                   newWidth = newWidth.split(", width=\"")[1];
                                   newWidth = newWidth.split("px")[0];
                             }
                             info("New Width of specified column : "+newWidth);

                             if(width.equalsIgnoreCase(newWidth)){
                                   CapturePage();
                                   testFailure("Failed : Resize of specified column with name "+sColumnName+" has not been successful");
                             }else{
                                   info("Passed : Resize of specified column with name "+sColumnName+" has been successful");
                             }
                       }else{
                             CapturePage();
                             testFailure("Failed : Specified Column " +sColumnName+" is not resizable on the grid.");
                       }
                 }
                 else
                 {
                       CapturePage();
                       testFailure("Failed : Specified Column " +sColumnName+" is not present on the grid.");  
                  }
           }
           info("Finished function [resizeColumnValidateIsResizable]");
     }


     /************************************************************************************************************
	  * Function: rightClickOnColumnHeader(iIndex,colName)
	  * Description: This function is used to right click on Column Header.
	  * Created By: Rupa
	  * Date: September 2016
	  * To be incorporated:
	  * Input Parameters:
	  *      @param iIndex : index of the Grid.
	  * 		@param colName: Column Name
	  *      
	  * @return NA
	  * rightClickOnColumnHeader(0,"Line Number");
	  * **********************************************************************************************************
	  */
	 public void rightClickOnColumnHeader(@Arg("iIndex") int iIndex,@Arg("sColName")String sColName) throws Exception{
		 info("Starting:Function rightClickOnColumnHeader ");

		 String gridId;
		 checkFrame();
		 gridId = getGridObjReference(iIndex);
		 info("gridId="+gridId);
		 web.document(e1Browser).executeJsFunction("scrollToLeft", gridId,"0");
		
		 String colIndex = getColIndexForColName(gridId,sColName);//info("colIndex="+colIndex);
		
		 if(colIndex!=null)
		 {
			 if ((browser.getBrowser() instanceof ChromeBrowser)||(browser.getBrowser() instanceof FireFoxBrowser)||(browser.getBrowser() instanceof MicrosoftEdgeBrowser)){
				 if(web.element(e1Browser+"/web:div[@id='gridHeaderFreezDiv0_1']/web:tr[@id='hdrRow"+gridId+"' ]/web:td[@colIndex='"+colIndex+"']").exists()){
					 web.element(e1Browser+"/web:tr[@id='hdrRow"+gridId+"' ][1]/web:td[@colIndex='"+colIndex+"']").focus();
					 web.element(e1Browser+"/web:tr[@id='hdrRow"+gridId+"' ][1]/web:td[@colIndex='"+colIndex+"']").showContextMenu();
				 }
				 else{
					 web.element(e1Browser+"/web:tr[@id='hdrRow"+gridId+"' ]/web:td[@colIndex='"+colIndex+"']").focus();
					 web.element(e1Browser+"/web:tr[@id='hdrRow"+gridId+"' ]/web:td[@colIndex='"+colIndex+"']").showContextMenu();
				 }
				
			 }
			 else
			 {
				 if(web.element(e1Browser+"/web:div[@id='gridHeaderFreezDiv0_1']/web:tr[@id='hdrRow"+gridId+"' ]/web:td[@colIndex='"+colIndex+"']").exists()){
					// info("yes found");
					 web.element(e1Browser+"/web:tr[@id='hdrRow"+gridId+"' ][1]/web:td[@colIndex='"+colIndex+"']").focus();
					 web.element(e1Browser+"/web:tr[@id='hdrRow"+gridId+"' ][1]/web:td[@colIndex='"+colIndex+"']").mouseDown(true);
					 web.element(e1Browser+"/web:tr[@id='hdrRow"+gridId+"' ][1]/web:td[@colIndex='"+colIndex+"']").mouseUp(true);
				 }
				 else{
					 web.element(e1Browser+"/web:tr[@id='hdrRow"+gridId+"' ]/web:td[@colIndex='"+colIndex+"']").focus();
					 web.element(e1Browser+"/web:tr[@id='hdrRow"+gridId+"' ]/web:td[@colIndex='"+colIndex+"']").mouseDown(true);
					 web.element(e1Browser+"/web:tr[@id='hdrRow"+gridId+"' ]/web:td[@colIndex='"+colIndex+"']").mouseUp(true);
				 }
				
				 
				 //web.element(e1Browser+"/web:tr[@id='hdrRow"+gridId+"' ]/web:td[@colIndex='"+colIndex+"']").showContextMenu();
			 }

		 }
		 else
		 {
			 testFailure("Failed to identify column "+sColName);
			 CapturePage();
		 }
		 info("Finished:Function rightClickOnColumnHeader");
	 } 



	 /************************************************************************************************************
	  * Function: rightClickOnNavigationMenu 
	  * Description: This function is used to Right click on an item in navigation bar and select an option 
	  * Created By: Ghulam Quadir
	  * Modified By: Date: Aug 2016 To be incorporated: Nil InputParameters:
	  * @param sCategory : Navigation bar category. like fastpath, Favorite
	  * @param sContextMenuPath : Semi colon separated sub item names
	  * @param sOption : option to select after right click.Example:rightClickOnNavigationMenu("Navigator", "1|Processing Options","Task Profile") // Right click on 'Processing Options' at index 2 from fastpath and seelct 'Task Profile'rightClickOnNavigationMenu("Favorites", "  Daily Processing ;  Word Search", "Documentation")// Right click on 'word search' from favorite and select option 'Documentation'.****************************************************************
	  */
	 public void rightClickOnNavigationMenu(@Arg("sCategory")String sCategory, @Arg("sContextMenuPath")	String sContextMenuPath, @Arg("sOption")	String sOption) throws Exception	{
		 info("Starting function rightClickOnNaviagtionMenu");
		 if (docIndex == null) {
			 docIndex = getDocIndex();
		 }

		 String[] pathItem = sContextMenuPath.split(";");
		 String element = null;
		 String[] elementItem = null;

		 DOMDocument doc=null;
		 DOMElement eleDom=null;
		 List<DOMElement> divList=null;
		 String currId=null;
		 //String childId=null;

		 if (!(web.exists("//web:input_text[@id='TE_FAST_PATH_BOX' ]",60))) {//It ensures navigation bar is rendered/loaded properly.
			 OSPreferences("Fail");
			 web.window(e1BrowserWindow).capturePage();
			 testFailure("Function rightClickOnNavigationMenu Exiting. E1 page does not exist.");
			 return;
		 }

		 //doc=web.document(e1Browser);
		 String firstDivID="";
		 if(sCategory.equalsIgnoreCase("navigator"))//Fastpath
		 {
			 firstDivID="e1MMenuRootInner";
			 web.textBox("//web:input_text[@id='TE_FAST_PATH_BOX']").click();
			 Thread.sleep(1000);
		 }else if(sCategory.equalsIgnoreCase("Favorites"))
		 {
			 info("Favorites Category **");
			 firstDivID="e1MMenuFav";
			 web.element("//web:div[@id='drop_fav_menus']").click();
			 info("Favorites clicked **"); 
			 Thread.sleep(1000);
		 }else if(sCategory.equalsIgnoreCase("Open Applications"))
		 {
			 web.element("//web:div[@id='drop_openapps']").click();
			 //Work on it if needed. Items in it are <table> not <div>
			 return;
		 }

		 int i = 0;
		 for (i = 0; i < pathItem.length; i++) {
			 elementItem = Pattern.compile("[|]").split(pathItem[i].trim());
			 String actualEleItem="";
			 int intIndex=0;
			 try {
				 intIndex = Integer.parseInt(elementItem[0].trim());
				 actualEleItem=elementItem[1].trim();
			 }catch (NumberFormatException e) {
				 actualEleItem=elementItem[0].trim();
			 }
			 //info("index="+intIndex+" and value="+actualEleItem);
			 String childTreeId="";
			 if(i==0)
			 {
				 //info("i == "+i);
				 eleDom=web.element("//web:div[@id='"+firstDivID+"']");
				 divList=eleDom.getElementsByTagName("div"); 
			 }else
			 {
				 //info("i == "+i);
				 childTreeId="flyoutInnerTabletreechild"+currId.replace("fldnode","");
				 eleDom=web.element("//web:table[@id='" + childTreeId+"']");
				 divList=eleDom.getElementsByTagName("div");
			 }
			 String divId="";
			 String taskLabel="";
			 int count=-1;//To find No of occurrences of an item in a single folder/fastpath subfolder
			 boolean flag=false;
			 for(int j=0;j<divList.size();j++)
			 {
				 taskLabel=(divList.get(j)).getAttribute("tasklabel");
				 //info("div task label="+taskLabel);
				 if(taskLabel==null)
				 {
					 continue;
				 }
				 if(taskLabel.equals(actualEleItem))
				 {
					 count++;
					 if(count==intIndex)
					 { 
						 divId=(divList.get(j)).getAttribute("id");
						 currId="fldnode"+divId.replace("node","");
						 //info("div id="+divId);
						 DOMElement domEle=web.element("//web:span[@id='" + currId + "']");
						 if((!domEle.exists())||(domEle==null)) 
						 {
							 //info("domEle is null. geting for anchor");
							 domEle=web.element("//web:a[@id='" + currId + "']");
						 }
						 if(i==pathItem.length-1)//It is the last item of fastpath
						 {
							 //To make sure current menu item is the final one passed in the function
							 domEle.mouseClick("", 1, true);//RIGHT CLICK
							 info("It right clicked");
							 List<DOMElement> anchorList=web.element("//web:table[@id='flyoutInnertab']").getElementsByTagName("a");
							 info("Getting anchorList"+anchorList);
							 //flag=false;
							 for(DOMElement tempEle:anchorList)
							 {
								 info("ouoiuio"); 
								 String innerHTML=tempEle.getAttribute("innerHTML");
								 if((innerHTML!=null)&&(innerHTML.equalsIgnoreCase(sOption.trim())))
								 {
									 tempEle.click();
									 flag=true;
									 think(10);
									 break;
								 }
							 }
							 if(flag==true)
							 {
								 info("PASSED : Right clicked on '"+taskLabel+"' and Option '"+sOption+"' clicked");
								 return;
							 }else if(flag==false)
							 {
								 OSPreferences("Fail");
								 web.window(e1BrowserWindow).capturePage();
								 testFailure("FAILED : Right clicked on '"+taskLabel+"' and Option '"+sOption+"' NOT Found");
								 return;
							 }

						 }else 
						 {
							 domEle.click();
						 }
						 info("Navigation SubMenu "+pathItem[i]+" clicked");
						 flag=true;
						 Thread.sleep(2000);
						 syncFrame();
					 }
				 }
			 }
			 if(flag==false)
			 {
				 OSPreferences("Fail");
				 web.window(e1BrowserWindow).capturePage();
				 testFailure("FAILED : Navigation SubMenu '"+pathItem[i]+"' does not exists");
				 return;
			 }
		 }
		 info("End function rightClickOnNaviagtionMenu");
	 }

	 /************************************************************************************************************
	  * Function: scrollVerticallyInGrid(iIndex,value)
	  * Description: This function is used to move scroll bar vertically.
	  * Created By: Rupa
	  * Date: July 2017
	  * To be incorporated:
	  * Input Parameters:
	  *      @param iIndex : index of the Grid.
	  *          @param value :The value till it should be scrolled.
	  * @return NA
	  * scrollVerticallyInGrid(0,50)
	  * **********************************************************************************************************
	  * 
	  */
	 public void scrollVerticallyInGrid(@Arg("iIndex") int iIndex,int value) throws Exception{
		 info("Starting:Function scrollVerticallyInGrid");
		 String gridId;
		 checkFrame();
		 incrementValidationCount(1);
		 gridId = getGridObjReference(iIndex);
		 if(gridId!=null){
			 web.document(e1Browser).executeJsFunction("scrollToTop", gridId,Integer.toString(value));    
		 }
		 info("End Of:Function scrollVerticallyInGrid");

	 }

	 /************************************************************************************************************
	  * Function: scrollLeftInGrid(iIndex,value)
	  * Description: This function is used to move scroll bar to left position.
	  * Created By: Rupa
	  * Date: July 2017
	  * To be incorporated:
	  * Input Parameters:
	  *      @param iIndex : index of the Grid.
	  *          @param value :The value till it should be scrolled.
	  * @return NA
	  * scrollLeftInGrid(0,50)
	  * **********************************************************************************************************
	  * 
	  */
	 public void scrollLeftInGrid(@Arg("iIndex") int iIndex,int value) throws Exception{
		 info("Starting:Function scrollLeftInGrid");
		 String gridId;
		 checkFrame();
		 incrementValidationCount(1);
		 gridId = getGridObjReference(iIndex);
		 info("gridId " +gridId);
		 if(gridId!=null){
			 web.document(e1Browser).executeJsFunction("scrollToLeft", gridId,Integer.toString(value));    
		 }
		 info("End Of:Function scrollLeftInGrid");

	 }
	 /************************************************************************************************************
	  * Function: scrollAndValidateChangeOfColumnPosition(iIndex,colName)
	  * Description: This function is used to move scroll bar and check whether the column is moving accordingly.
	  * Created By: Rupa
	  * Date: Oct 2016
	  * To be incorporated:
	  * Input Parameters:
	  *      @param iIndex : index of the Grid.
	  * 		@param colName: The refrence column name or frezzed column Name 
	  * @return NA
	  * scrollAndValidateChangeOfColumnPosition(0,"Line number")
	  * **********************************************************************************************************
	  */
	 public void scrollAndValidateChangeOfColumnPosition(@Arg("iIndex") int iIndex,@Arg("SColName")String sColName) throws Exception{
		 info("Starting:Function scrollAndValidateChangeOfColumnPosition");
		 int[] leftOffset=new int[5];
		 int flag=0;
		 String gridId;
		 checkFrame();
		 incrementValidationCount(1);
		 gridId = getGridObjReference(iIndex);
		 String colIndex=getColIndexForColName(gridId,sColName);
		 if(colIndex!=null){
			 int col =Integer.parseInt(colIndex)+1;
			 colIndex=""+col;
			 int startValue=Integer.parseInt(colIndex);
			 web.document(e1Browser).executeJsFunction("scrollToLeft", gridId,"0");
			 int  leftOffsetValue= web.element(e1Browser+"/web:tr[@id='hdrRow"+gridId+"' ]/web:td[@colIndex='"+colIndex+"']").getElementLocation().left;
			 //int  leftOffsetValue= web.element("//web:td[@colIndex='"+colIndex.trim()+"']").getElementLocation().left;
			 leftOffset[0]=leftOffsetValue;
			 String[] colOffest = web.document(e1Browser).executeJsFunction("getGridScrollWidth", gridId);
			 int scrollValue =Integer.parseInt(colOffest[0]);
			 info(""+scrollValue);
			 double scrollValue1 =scrollValue/5;

			 for(int i=0;i<3;i++)
			 {

				 web.document(e1Browser).executeJsFunction("scrollToLeft", gridId,Double.toString(scrollValue1));
				 int  leftOffsetValue2= web.element(e1Browser+"/web:tr[@id='hdrRow"+gridId+"' ]/web:td[@colIndex='"+colIndex+"']").getElementLocation().left;
				 leftOffset[i+1]=leftOffsetValue2;
				 scrollValue1+=scrollValue1;
				 System.out.println(scrollValue1);
				 System.out.println(leftOffset[i]);
				 if(leftOffset[i]!=leftOffset[i+1])
				 {

					 info("columns position is moving according to scrollbar position");            
				 }
				 else
				 {
					 testFailure("columns position is not moving according to scrollbar position at "+i+" movement");
					 CapturePage();
				 }
			 } 
		 }
		 else
		 {
			 testFailure("Failed to identify column "+sColName);
			 CapturePage();
		 }

		 info("Finished:Function scrollAndValidateColumnPositionChanges");
	 }

	 /************************************************************************************************************
	  * Function: scrollAndValidateUnChangeOfFreezeColumnPosition(iIndex,colName)
	  * Description: This function is used to move scroll bar and check whether the column position doesn't change as scroll bar podsition changes.
	  * Created By: Rupa
	  * Date:7 Nov 2016
	  * To be incorporated:
	  * Input Parameters:
	  *      @param iIndex : index of the Grid.
	  * 		@param colName: The refrence column name or freezed Column Name
	  * @return NA
	  * Example -scrollAndValidateUnChangeOfFreezeColumnPosition(0, OrTy)
	  * **********************************************************************************************************
	  */
	 public void scrollAndValidateUnChangeOfFreezeColumnPosition(@Arg("iIndex") int iIndex,@Arg("SColName")String sColName) throws Exception{
		 info("Starting:Function scrollAndValidateUnChangeOfFreezeColumnPosition");
		 int[] leftOffset=new int[5];
		 int flag=0;
		 String gridId;
		 checkFrame();
		 gridId = getGridObjReference(iIndex);
		 incrementValidationCount(1);
		 String colIndex=getColIndexForColName(gridId,sColName);
		 if(colIndex!=null){
			 int col =Integer.parseInt(colIndex)-1;
			 colIndex=""+col;
			 int startValue=Integer.parseInt(colIndex);
			 int  leftOffsetValue= web.element(e1Browser+"/web:div[@id='freezeGrid"+gridId+"']/web:tr[@id='hdrRow"+gridId+"' ]/web:td[@colIndex='"+colIndex+"']").getElementLocation().left;
			 leftOffset[0]=leftOffsetValue;
			 String[] colOffest = web.document(e1Browser).executeJsFunction("getGridScrollWidth", gridId);
			 int scrollValue =Integer.parseInt(colOffest[0]);
			 double scrollValue1 =scrollValue/5;

			 for(int i=0;i<4;i++)
			 {
				 web.document(e1Browser).executeJsFunction("scrollToLeft", gridId,Double.toString(scrollValue1));
				 int  leftOffsetValue2= web.element(e1Browser+"/web:div[@id='freezeGrid"+gridId+"']/web:tr[@id='hdrRow"+gridId+"' ]/web:td[@colIndex='"+colIndex+"']").getElementLocation().left;
				 leftOffset[i+1]=leftOffsetValue2;
				 scrollValue1+=scrollValue1;
				 System.out.println("offsetValue"+leftOffset[i]);
				 System.out.println("offsetValue"+leftOffset[i+1]);

				 if(leftOffset[i+1]==leftOffset[i])
				 {

					 info("columns position is remains unchanged according to scrollbar position");	
				 }
				 else
				 {
					 testFailure("columns position is  moving according to scrollbar position at "+i+" movement");
					 CapturePage();
				 }
			 } 
		 }
		 else
		 {
			 testFailure("Failed to identify column "+sColName);
			 CapturePage();
		 }

		 info("Finished:Function scrollAndValidateUnChangeOfFreezeColumnPosition ");
	 }


	 /************************************************************************************************************
	  * Function: selectMenuItemFormSpecifiedSection
	  * Description: This function will select menu item exists in the specified section.
	  * Note : Before calling this function ensure that you must have clicked on either form/row menu on tool bar or right clicked on form/row area.
	  * Created By: Sunil
	  * Date: Feb 2017
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param MenuType : Type of the menu.(i.e.,Form, Row)
	  * 		@param Items : The menu item name available under the menu type.In case sub menu pass sub menu item name sepreted by semicolumn(;).
	  * 		@param Section : Section in which menu item present.(Favorites/form/row present on pop up window).
	  * 
	  * Returns: 
	  * 		@return Nil
	  * Example: 
	  * selectMenuItemFormSpecifiedSection("Row","Refresh", "Favorites");  
	  * selectMenuItemFormSpecifiedSection("Form","Customer;Exit for Testing","Form");
	  *  
	  * **********************************************************************************************************
	  */
	 public void selectMenuItemFormSpecifiedSection(String MenuType, String Items, String Section) throws Exception {
		 checkFrame();
		 info("Begin Function : selectMenuItemFormSpecifiedSection");
		 if((MenuType.trim()).equalsIgnoreCase("Form") || (MenuType.trim()).equalsIgnoreCase("Row")){
			 MenuType = MenuType.toUpperCase();

		 }else {
			 CapturePage();
			 testFailure("Menu Type "+MenuType+" is not present");
			 return;
		 }
		 String[] menuItem = Items.split(";");
		 String element = null;
		 String[] elementItems = null;
		 List<DOMElement> nobrList=null;
		 boolean flag=false;
		 String elementValue="";
		 ArrayList<String> getEachElevalue=new ArrayList<String>();

		 DOMDocument doc=null;
		 DOMElement eleDom=null;

		 if ((web.exists("//web:img[@id='"+MenuType+"_EXIT_BUTTON' ]",60))) {//This ensures presence of "Form Menu icon" on the page 
			 //customClick(web.element("//web:img[@id='"+MenuType+"_EXIT_BUTTON' ]"));
			 //info(MenuType+" menu clicked");
			 doc=web.document(e1Browser);

			 String currId=web.element("//web:img[@id='"+MenuType+"_EXIT_BUTTON' ]").getAttribute("launchmenuid");//Row menu div id is different for all application.
			 eleDom=web.element("//web:div[@id='"+currId+"']");
			 String style =eleDom.getAttribute("style");
			 // info("style display property : "+style);
			 if(style.contains("display: block;") || style.contains("display=\"block\"")){
				 for(int i=0;i<menuItem.length;i++)
				 {
					 int itemIndex=0;
					 element=menuItem[i].trim();//First Item of path
					 elementItems=Pattern.compile("[|]").split(element);
					 if(elementItems.length==2)//Index is present with from menu item
					 {
						 itemIndex=Integer.parseInt(elementItems[0]); 
						 elementValue=elementItems[1];
						 getEachElevalue.add(elementValue);
					 }else
					 {
						 elementValue=elementItems[0];
						 getEachElevalue.add(elementValue);
					 }
					 nobrList=eleDom.getElementsByTagName("nobr");

					 int count=-1;
					 String innerHTML="";
					 String divId="";
					 for(DOMElement tempDom:nobrList)
					 {
						 innerHTML=tempDom.getAttribute("innerHTML");
						 flag=false;
						 if((innerHTML.replaceAll("&nbsp;","")).equalsIgnoreCase(elementValue))
						 {
							 count++;
						 } 
						 if(itemIndex==count)//This is the element to select
						 {// in this block Hover/Click over the item and find the id of next div.

							 //Get the First div element.
							 DOMElement temp=tempDom;
							 for(int j=0;;j++)
							 {
								 temp=temp.getParent(); 
								 if((temp!=null)&&(temp.getTag().contains("DIV")))//getTag() return tag name in capital letter
								 {
									 divId=temp.getAttribute("id");
									 currId=divId.replace("-Show","");//This will be id of div of next path item
									 if(i==menuItem.length-1)//It is last element.
									 {	
										 String str = "";
										 if(Section.equalsIgnoreCase("Favorites") && MenuType.equalsIgnoreCase("form")){
											 str = "FE";
										 }else if(Section.equalsIgnoreCase("Favorites") && MenuType.equalsIgnoreCase("row")){
											 str = "RE";
										 }else if(Section.equalsIgnoreCase("form") || MenuType.equalsIgnoreCase("row")){
											 str = "HE";
											 count = -1;
											 if(divId.contains("FE") || divId.contains("RE")){
												 break;
											 }
										 }else{
											 CapturePage();
											 testFailure("FAILED : Function [selectMenuItemFormSpecifiedSection]: Specified form menu section is not present.");
											 return;
										 }
										 if(divId.contains(str) || divId.contains(Section))//Parent div has id containing with "FE", "RE" or "HE"
										 {
											 tempDom.click();
											 info("Passed : Function [selectMenuItemFormSpecifiedSection] : "+MenuType+" menu item '"+getEachElevalue+"' selected in specified section ["+Section+"].");
											 flag=true;
											 break;
										 }else
										 {
											 CapturePage();
											 testFailure("FAILED : Function [selectMenuItemFormSpecifiedSection] : "+MenuType+" menu '"+getEachElevalue+"' not found in specified section ["+Section+"].");
											 return;
										 }

									 }else//mouse over element.
									 {
										 temp.getChildren().get(0).mouseOver();	
										 flag=true;
										 break;
									 }
								 }
								 if(j==100)//Find upto hundred parent element only
								 {
									 break;
								 }
							 }
							 if(flag==true)//Element found. So come out of outer loop also;
							 {
								 break;
							 }
							 //info("MOUSE OVER and currId="+currId);
						 }
					 }

				 }
			 }else{
				 getScript("EOneUtility").callFunction("CapturePage");
				 testFailure("Failed : Pop Up menu is not present on the page to validate menu item. ");
				 return;
			 }
		 }
		 info("End Function : selectMenuItemFormSpecifiedSection");
	 }

	 /************************************************************************************************************
	  * Function: selectMenuItemFromPopup((popupID,menuItem)
	  * Description: This function is used to  click on Menu options in the popup which comes ones we right click on a column.
	  * Created By: Rupa
	  * Date: September 2016
	  * To be incorporated:
	  * Input Parameters:
	  *      @param  iIndex : index of the grid.
	  * 		@param sColName: Column name that have the popup.
	  *      @param sOption: Option that needs to be selected.
	  * @return NA
	     Example - selectMenuItemFromPopup(0,"Order Number","Freeze")
	  * **********************************************************************************************************
	  */
	 public void selectMenuItemFromPopup(int iIndex, String sColName, String sOption)throws Exception{  
		 info("Starting:Function selectMenuItemFromPopup");
		 checkFrame();
		 String gridId = getGridObjReference(iIndex);
		 String colIndex = getColIndexForColName(gridId,sColName);
		 info("gird id="+gridId+"    colindex="+colIndex);

		 String popupParentDivId="popupFrzWin"+gridId+"."+colIndex;
		 info("popupParentDiv id="+popupParentDivId);

		 String popupDivId="";
		 if(sOption.equalsIgnoreCase("Freeze"))
		 {
			 popupDivId="FreezeDiv";
		 }else  if(sOption.equalsIgnoreCase("UnFreeze"))
		 {
			 popupDivId="UnFreezeDiv";
		 }else  if(sOption.equalsIgnoreCase("Hide"))
		 {
			 popupDivId="HideDiv";
		 }else  if(sOption.equalsIgnoreCase("UnHide"))
		 {
			 popupDivId="UnHideDiv";
		 }

		 int flag=0;
		 DOMElement parentDiv=web.element("//web:div[@id='"+popupParentDivId+"']");
		 String disp=parentDiv.getAttribute("style");
		 info("display="+disp); 

		 if(disp.contains("display: none"))
		 {
			 info("Coming iside");
			 flag=1;
		 }

		 if(flag==1)
		 {
			 CapturePage();                
			 testFailure("Failed : Popup window does not exists");
			 return;
		 }

		 String path="//web:div[@id='"+popupParentDivId+"']/web:div[@id='"+popupDivId+"']";

		 DOMElement ele=web.element(path);

		 if(ele!=null && ele.exists())
		 {
			 String disabled=ele.getAttribute("disabled");
			 info("disabled="+disabled);

			 if(disabled==null || (!disabled.equalsIgnoreCase("true")))
			 {
				 ele.click();
				 info("Popup Option found and cliked");	
			 }

			 else{
				 CapturePage();                
				 testFailure("Failed to Click popup option "+sOption+". It is Disabled");
			 }
		 }
		 else
		 {
			 CapturePage();                
			 testFailure("Failed to identify popup option "+sOption);

		 }

		 info("Finished:Function selectMenuItemFromPopup");
	 }

	 /************************************************************************************************************
	  * Function: selectPreviewCells
	  * Description: Used to select preview cells in Range GridHeaderCell
	  * Created By: Spurthi P
	  * Date: Oct 2016
	  * Updated By:Spurthi
	  * Update Date:5.9.17
	  * Input Parameters:
	  * @param startCell - Starting Range cell to be clicked
	  * @param endCell - Ending Range cell to be clicked
	  * Returns:
	  * @return Nil
	  * Example: selectPreviewCells("A7", "H2")       
	  * **********************************************************************************************************
	  */

	 public void selectPreviewCells(@Arg("startCell")String startCell, @Arg("endCell")String endCell) throws Exception{

         String[] a = {startCell, endCell};
         info("Starting: Function selectPreviewCells");
         checkFrame();
         boolean cFlag=false;
         web.document(e1Browser).executeJavaScript("document.getElementById('jdeGrid').style.top = '0px';"); 

         //2- startCell and endCell
         for(int j=0;j<2;j++)
         {    
         web.element("//web:div[@id='jdeGridBack']").scroll("0", "-4000");
         int counter = 0;
         char ch='A';                 
         int iRow=0,iCol = 0, i=0;String row="";
         for(i=0;i<26;i++, ch++)
         {                
               if(a[j].charAt(0)==ch){
                     iCol = i+1;
                     break;
               }                      
         }
         
         if(i == 26){
               CapturePage();
               testFailure("[selectPreviewCells] Failure : Invalid Input Data");
               return;
         }
         for(i=1;i<a[j].length();i++){
               row = row + a[j].charAt(i);
         }    
        
         //iRow iCol represents the cell 
         iRow = Integer.parseInt(row);

         boolean flag = true;//to scroll down until we see the matched Row number
         int index = -1;

         int pageDownCount = 0;
         while(flag)      
         {    
               List<DOMElement> rowTd = web.table("//web:table[@id='BrowsedGridData']").getElementsByTagName("td");

               for(i=0;i<rowTd.size();i++){
                     String classn = "GridHeaderCell";
                     if(classn.equals(rowTd.get(i).getAttribute("className"))){
                           int m =      Integer.parseInt(rowTd.get(i).getAttribute("text"));                           
                           if(m==(iRow)){                                 
                                 index = i;                                                            
                                 break;
                           }
                     }          
               }

               if(iRow <10 || pageDownCount>2){   
                     //visible cell         
                     Thread.sleep(2000);                      
                     DOMElement ele = rowTd.get(index).getParent();                    
                     List<DOMElement> rowvals = ele.getElementsByTagName("td");                         
                     List<DOMElement> rowdiv = rowvals.get(iCol).getElementsByTagName("div");                    
                     ////rowdiv.get(0).focus();                   
                     Thread.sleep(2000);
                     //rowdiv.get(0).focus();
                     rowdiv.get(0).click();                  
                     //Thread.sleep(2000);
                     /* rowvals.get(iCol).focus();
                     Thread.sleep(2000);                    
                     rowvals.get(iCol).focus();                     
                     rowvals.get(iCol).click();
                     rowvals.get(iCol).mouseDown(false);
                     rowvals.get(iCol).mouseUp(false);
                     rowvals.get(iCol).mouseClick(5, 5);*/
                     syncFrame();
                     syncFrame();
                     flag = false;
                     break;
               }
               else{ 
                      //rows are invisible, Pagedown
                     // List<DOMElement> rowTd1 = web.table("//web:table[@id='BrowsedGridData']").getElementsByTagName("td");
                     /*rowTd.get(1).focus();      
                     rowTd.get(1).scroll("0", "1000");
                           pressKeyChar("PAGEDOWN");*/
                     //getScript("EOneUtility").callFunction("scrollVerticallyInGrid", "0","150");
                     /* if((browser.getBrowser() instanceof ChromeBrowser) || (browser.getBrowser() instanceof FireFoxBrowser)){
                     web.document(e1Browser).executeJavaScript("document.getElementById('jdeGrid').style.top = (parseInt(document.getElementById('jdeGrid').style.top, 10) - 50) + 'px';");
                       }
                     else{*/rowTd = web.table("//web:table[@id='BrowsedGridData']").getElementsByTagName("td");
                                 rowTd.get(1).focus();  
                                 //rowTd.get(1).keyPress("PageDown");
                                // rowTd.get(1).mouseClick(0,0, "PageDown", 0, false);
                                web.element("//web:div[@id='jdeGridBack']").scroll("0", "3000");
                                 
                                 //pressKeyChar("PAGEDOWN");
                                 Thread.sleep(2000);
                                   
                           /* }*/
                   
                     pageDownCount=pageDownCount+1;
                     flag = true;
                     counter=counter+1;
               }
               //maximum limit of pagedown kept
               if(counter >15){
                     CapturePage();
                     testFailure("[selectPreviewCells] Failure :Unable to find the Cell ");
                     return;
               }
         }                
         }//end of outer for
         info("Finished: Function selectPreviewCells");
   
       }


	 /************************************************************************************************************
	  * Function: selectWebListItemByItemIndex
	  * Description: This Function selects the specified item in the WebList based ob its index whenever list is enabled.
	  * Created By: Spurthi P
	  * Date: Oct 2016
	  * Input Parameters: 
	  * 		@param id: Id of the WebList on the page.
	  * 		@param iIndex: Index of the Option in the WebList to be selected by user.Index starts from 0.
	  * Returns: 
	  * 		@return Nil
	  * Example: selectWebListItemByItemIndex("sectionDropDown0_1", 3)
	  * **********************************************************************************************************
	  */
	 public void selectWebListItemByItemIndex(@Arg("id") String id, @Arg("iIndex")int iIndex) throws Exception {
		 if(docIndex==null){
			 getDocIndex();
		 }
		 boolean isSelected=false;
		 String frameName=getFrameName();
		 String bro;

		 if(isModalForm==true){
			 bro=e1Browser;
		 }else{
			 bro="/";
		 }
		 if (web.exists(bro+"/web:form[@id='E1PaneForm']/web:select[( @id='"+id+"')]",10)){
			 String isDisabled = web.selectBox(bro+"/web:select[( @id='"+id+"')]").getAttribute("disabled").toString();
			 if(isDisabled.equalsIgnoreCase("True")) {
				 web.selectBox(bro+"/web:select[( @id='"+id+"')]").focus();				
				 CapturePage();
				 testFailure("[selectWebListItemByItemIndex]  Failed (Web List Item with Id "+id +" is not Enabled on the page)");				
				 return; //helps not to execute rest of the code in this function
			 }
		 }else {
			 CapturePage();
			 testFailure("[selectWebListItemByItemIndex]  Failed (Invalid Id : Id not present on the page)");						
			 return;
		 } 
		 List<DOMElement> allItems=web.selectBox(bro+"/web:select[(@id='"+id+"')]").getOptions();		
		 if(iIndex>allItems.size()){			
			 CapturePage();
			 testFailure("[selectWebListItemByItemIndex]  Failed (WebList Item doesn't have this index)");	
			 return;
		 }
		 int idx=0;
		 for(DOMElement itm : allItems) {
			 try{
				 String txt=itm.getAttribute("text");
				 if(idx == iIndex) {
					 web.selectBox(bro+"/web:select[( @id='"+id+"')]").click();
					 web.selectBox(bro+"/web:select[(@id='"+id+"')]").selectOptionByIndex(idx);
					 /*if(!((frameName.equals("Data Selection"))||(frameName.equals("Literal Prompt")))){
						 web.selectBox(bro+"/web:select[( @id='"+id+"')]").pressTab();
					 }*/
					 //pressKeyChar("TAB");
					 isSelected=true;
					 break;
				 }
			 }catch(Exception e){}
			 idx++;
		 }
		 if(isSelected) {
			 info("Weblist item with index"+iIndex+" found and selected in the weblist with Id "+id);
		 }else {			
			 CapturePage();
			 testFailure("[selectWebListItemByItemIndex]  Failed (WebList Item Not Found)");	
		 }
	 }

	 /************************************************************************************************************
	  * Function: validateDupColPresent
	  * Description: This function will validate presence of duplicate columns in a grid with the help of their alias.
	  * Created By: Ghulam Quadir
	  * Date: July 2017 
	  * To be incorporated: Nil 
	  * Input Parameters:
	  * @param iIndex
	  *            - index of the grid in the webpage starting from 0
	  * @param sParams
	  *            - semicolon separated columnHeader=Alias pairs
	  * @param sStatus
	  * 			  - to validate presence write 'True', to validate columns not present then write 'false'
	  * 
	  * Example: 
	  * validateDupColPresent(0, "col1=alias1 ; col2=alias2 ; col3=alias3", true)
	  * validateDupColPresent(0, "col1=alias1 ; col2=alias2", false)
	  * validateDupColPresent(0, "Form Cat = FMC2 ; Form Cat = FMC4 ; Form Cat = FMC5",true)
	  ************************************************************** 
	  */
	 public void validateDupColPresent(int iIndex, boolean sStatus, String sParams) throws Exception {

		 info("Starting:Function validateDupColPresent");
		 checkFrame();

		 String tempFld, tempVal;
		 int rowIndex;
		 String param[] = Pattern.compile("[;]").split(sParams);
		 int paramCnt = param.length;
		 incrementValidationCount(paramCnt);
		 //bDB=true;
		 String gridId = null;
		 String browserType=null;
		 if (!bDB) {
			 gridId = getGridObjReference(iIndex);
			 browserType=e1Browser;
		 } else {
			 gridId = getDataBrowserGridObjReference();
			 browserType=sDBBrowser;
		 }

		 if(! sParams.trim().equals(""))
		 {
			 //Click on "Help" Icon
			 web.element(browserType + "/web:img[@id='helpOptionImage']").click();
			 //Click on "Item Help"
			 web.element(browserType + "/web:a[@text='Item Help']").click();
			 Thread.sleep(2000);
			 //Click on OK on alert
			 web.alertDialog("/web:dialog_alert[@index='0']").clickOk();
			 Thread.sleep(2000);
		 }

		 for (int idx = 0; idx < paramCnt; idx++) {
			 boolean flag = false;
			 tempFld = param[idx].replaceAll(" ","");
			 String colName=tempFld.split("=")[0].trim();
			 String alias=tempFld.split("=")[1].trim();
			 String[] colLen = web.document(browserType).executeJsFunction("getColLen",gridId);
			 int colLength = Integer.parseInt(colLen[0]);
			 for(int ivx = 0; ivx < colLength; ivx++) {

				 String[] colLabel = web.document(browserType).executeJsFunction("getColLabel",gridId,Integer.toString(ivx));
				 colLabel[0] = colLabel[0].replaceAll(" ","");
				 String isColHidden=web.document(browserType).executeJsFunction("gridCellIsHidden",gridId,Integer.toString(ivx))[0];
				 if(isColHidden.equalsIgnoreCase("true"))
				 {
					 continue;
				 }

				 if (colName.equalsIgnoreCase(colLabel[0].trim())) {
					 DOMElement headerTD=web.element(browserType + "/web:span[@id='GC"+gridId+"."+ivx+"']");
					 headerTD.click();
					 Thread.sleep(2000);

					 if (web.exists("/web:window[@title='Item Help*']",10)) {
						 String sAliasString = null;
                         if(sBrowser.equalsIgnoreCase("ie")){
                               sAliasString = web.element("/web:window[@title='Item Help*']/web:document[@index='0']/web:b[@text='Alias:*']").getAttribute("innerhtml");
                         }else if(sBrowser.equalsIgnoreCase("chrome") || sBrowser.equalsIgnoreCase("firefox") || sBrowser.equalsIgnoreCase("Edge")){
                               sAliasString =web.element("/web:window[@title='Item Help*']/web:document[@index='0']/web:b[@text='Alias:*']").getDisplayText();
                         }
                         web.window("/web:window[@title='Item Help*']").close();
						 String sAliasName[] = Pattern.compile("[:]").split(sAliasString);
						 
						 if(sAliasName[1].trim().equalsIgnoreCase(alias)){
							 flag = true;
							 break;
						 }
					 }
				 }
			 }
			 if (flag==true) {
				 if(sStatus==true)
				 {
					 info("Passed: Duplicate Column '"+colName+"' with Alias '"+alias+"' Found in grid with index "+iIndex);
				 }else{
					 CapturePage();
					 testFailure("Failure: Duplicate Column '"+colName+"' with Alias '"+alias+"' Found in grid with index "+iIndex);
				 }
			 }else if(flag==false)
			 {
				 if(sStatus==false)
				 {
					 info("Passed: Duplicate Column '"+colName+"' with Alias '"+alias+"' Not Found in grid with index "+iIndex);
				 }else
				 {
					 CapturePage();
					 testFailure("Failure: Duplicate Column '"+colName+"' with Alias '"+alias+"' Not Found in grid with index "+iIndex);
				 }
			 }
		 }

		 //Click on "Help" Icon
		 web.element(browserType + "/web:img[@id='helpOptionImage']").click();
		 //Click on "Item Help"
		 web.element(browserType + "/web:a[@text='Item Help']").click();

		 info("Finished:Function validateDupColPresent");
	 }

	 /************************************************************************************************************
	  * Function: setHeaderCheckBoxByName
	  * Description: Used to Set the check box as on or off present in header
	  * Created By: Yashin Bidar
	  * Date: September 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param name:html property name of the checkbox
	  * 		@param fldName:Name of the checkbox field
	  * 		@param sStatus:status to set true/false
	  * Returns: 
	  * 		@return Nil
	  * **********************************************************************************************************
	  */
	 public void setHeaderCheckBoxByName(@Arg("Name")String name, @Arg("fldName")String fldName, @Arg("sStatus")boolean sStatus)throws Exception {
		 setHeaderCheckBoxById("name="+name, fldName, sStatus);
	 }

	 /************************************************************************************************************
	  * Function: validateAlertPopupText
	  * Description: This function is used to validate the text that appears on any alert popups. . 
	  * Created By: Yashin Bidar
	  * Date: Aug 2016
	  * To be incorporated: Nil
	  * Input Parameters:
	  *                @param sText :Text to be validated. SemiColon Separated values if more than one line.
	  *                
	  * Returns:
	  *                @return Nil
	  * Example:
	  *                validateAlertPopupText("ERROR;Division by zero");//To check for the lines, ERROR and Division by zero on the popup
	  *                
	  * ***********************************************************************************************************/
	 public void validateAlertPopupText(@Arg("sText")String sText) throws Exception{

		 info("Starting function validateAlertPopupText");
         DOMElement ele = null;
         if(web.exists("/web:dialog_alert[@index='0']")){
               ele = web.element("/web:dialog_alert[@index='0']");
         }else if(web.exists("/web:dialog_confirm[@index='0']")){
               ele = web.element("/web:dialog_confirm[@index='0']");
         }else{
               CapturePage();
               testFailure("validateAlertPopupText Failed:Alert Box does not Exist");
         }
         String[] errMsg=sText.split(";");
         String errText=(String)ele.getAttribute("text");
         info("Text on pop up : "+errText);
         for(int i=0;i<errMsg.length;i++)
         {
               if(errText.contains(errMsg[i].trim()))
                     info("validateAlertPopupText Passed:Text "+errMsg[i]+" is present on the alert box");
               else
               {
                     testFailure("validateAlertPopupText Failed:AText "+errMsg[i]+" is not present on the alert box");
                     CapturePage();
               }
         }

         
         valCount+=errMsg.length;

	 }

	 /************************************************************************************************************
	  * Function: validateAllColumnsAreShownInGrid
	  * Description: This function is used to validate all columns are shown in grid. Source of all columns name is datatable.
	  *         Value in datatable is stored by function outputSelectWebListOptions and getAllGridColumns
	  * Created By: Rupa
	  * Modified By: Ghulam Quadir
	  * Date: Jan 2017
	  * To be incorporated: Nil Input
	  * Parameters:
	  * @param iIndex :Index of the grid
	  * Example:
	  *         validateAllColumnsAreShownInGrid(0)//To validate all columns are present in first Grid. Source of all columns name is datatable.
	  *         Value in datatable is stored by function outputSelectWebListOptions and getAllGridColumns
	  *         *****************************************************************
	  */
	 public void validateAllColumnsAreShownInGrid(String iIndex) throws Exception
	 {
		 //This function get Value from data table and compare them
		 String allColNames,gridColumns;
		 String[] colName;
		 //Getting Value from datatable stored by function outputSelectWebListOptions
		 info("Start function [validateAllColumnsAreShownInGrid].");
		 incrementValidationCount(1);
		 allColNames=""+datatable.getGlobalDatatable().getValue("Global",0, "allColNames");
		 info("allColNames="+allColNames);
		 colName=allColNames.split("\\##");
		 getScript("EOneUtility").callFunction("getAllGridColumns", iIndex,"gridColumns");
		 gridColumns=""+datatable.getGlobalDatatable().getValue("Global",0, "gridColumns");
		 String[] gridColumn=  gridColumns.split("\\;");

		 if(colName.length==gridColumn.length)
		 {
			 int i;
			 int flag=0; 
			 int p=0;
			 String[] columnNP=new String[colName.length];
			 if(colName.length==gridColumn.length)
			 {

				 for(i=0;i<colName.length;i++)
				 {
					 for(int j=0;j<gridColumn.length;j++)
					 {
						 if(colName[i].replaceAll("\r","").replaceAll("\n","").replaceAll(" ","").equalsIgnoreCase(gridColumn[j].replaceAll("\r","").replaceAll("\n","").replaceAll(" ","")))
						 {
							 info(gridColumn[j].replaceAll("\r","").replaceAll("\n"," ")+ " column is present in the grid ");
							 flag=1;
							 break;
						 }else{
							 flag=0;
						 }
					 }
					 if(flag==0){
						 columnNP[p]=colName[i].replaceAll("\r","").replaceAll("\n"," ");
						 p++;
					 }
				 }for(int k=0; k<columnNP.length;k++){
					 if(columnNP[k]!=null){
						 testFailure(columnNP[k]+ " is not present in the grid");}
				 }
			 }else{
				 testFailure("There is a mismatch in number of grid columns from available columns");
			 }

			 info("The columns in available and in grids are equal ");	 
		 }
		 else
		 {
			 testFailure("There is a mismatch in number of grid columns from available columns");
		 }	
		 info("Start function [validateAllColumnsAreShownInGrid].");
	 }

	 /************************************************************************************************************
	  * Function: validateButtonPresent
	  * Description: This function is used to validate presence of given button on the page
	  * Created By: Megha K
	  * Date: Aug 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param ID:ID value of the button
	  * 		@param present:button is expected to be present or not(true or false)
	  * Returns: 
	  * 		@return Nil
	  * **********************************************************************************************************
	  */
	 public void validateButtonPresent(String ID,boolean present) throws Exception{
		 if(!bDB){	
			 checkFrame();
			 if(docIndex==null){
				 getDocIndex();
			 }

			 String bro;
			 if(isModalForm==true){
				 bro=e1Browser;
			 }else{
				 bro="/";
			 }
			 incrementValidationCount(1);
			 if(present==true){
				 if(web.exists(bro+"/web:input_button[(@id='" +ID+"')]",10)){
					 info("Button with ID " +ID+ " is Present in the page");
				 }
				 else{
					 CapturePage();
					 testFailure("Button with ID " +ID+ " is not Present in the page");
				 }	
			 }
			 else{
				 if(!web.exists(bro+"/web:input_button[(@id='" +ID+"')]",10)){
					 info("Button with ID " +ID+ " is not Present in the page");
				 }
				 else{
					 CapturePage();
					 testFailure("Button with ID " +ID+ " is Present in the page");
				 }	
			 }
		 }
		 else{
			 if(present==true){
				 if(web.exists(sDBBrowser+"/web:input_button[(@id='" +ID+"')]",10)){
					 info("Button with ID " +ID+ " is Present in the page");
				 }
				 else{
					 CapturePage();
					 testFailure("Button with ID " +ID+ " is not Present in the page");
				 }	
			 }
			 else{
				 if(!web.exists(sDBBrowser+"/web:input_button[(@id='" +ID+"')]",10)){
					 info("Button with ID " +ID+ " is not Present in the page");
				 }
				 else{
					 CapturePage();
					 testFailure("Button with ID " +ID+ " is Present in the page");
				 }	
			 }
		 }
		 //	valCount=+1;
	 }


	 /************************************************************************************************************
	  * Function: validateCarouselItem 
	  * Description: This function is used to validate if an item is present in different categorie in carousel menu Created By: Ghulam QuadirModified By: Date: Aug 2016 To be incorporated: Nil InputParameters:
	  * @param sCatogory : Category of the item*
	  * @param sItemName : item to validate*
	  * @param sStatus : true when item is present. flase when item is not presentExample:validateCarouselItem("Open Applications", " Home ", true) //When 'Home' is present in category 'Open Applications'validateCarouselItem("Open Applications", " Home ", false) //When 'Home' is NOT present in category 'Open Applications'validateCarouselItem("Favorites", " 1 | Daily Processing ", true) //When 'Daily Processing' is present in category 'Favorites' at index 1*
	  */
	 public void validateCarouselItem(@Arg("sCatogory") String sCatogory, @Arg("sItemName") String sItemName, @Arg("sStatus") boolean sStatus ) throws Exception
	 {
		 info("Strting function validateCarouselItem");
		 if (docIndex == null) {
			 docIndex = getDocIndex();
		 }

		 DOMDocument doc=null;
		 DOMElement ele=null;
		 List<DOMElement> eleList=null;
		 String attr="";

		 String e1Document1 = "/web:document[@name='E1MENUMAIN*']";
		 String e1Browser1 = e1BrowserWindow + e1Document1;

		 int index=0;
		 try
		 {
			 index= Integer.parseInt((Pattern.compile("[|]").split(sItemName))[0].trim());
			 sItemName=(Pattern.compile("[|]").split(sItemName))[1].trim();
		 }catch (NumberFormatException e) {}
		 //info("index= "+index+" item="+sItemName);

		 if (web.exists(e1Browser1,60)) {//Application is opened 
			 doc=web.document(e1Browser1);
			 ele=doc.getElementById("carousel");
			 attr=ele.getAttribute("className");
			 //info("Carousel div class="+attr);
			 if(attr.contains("caroCollapsed"))//Carousel menu not expanded.
			 {
				 doc.getElementById("caroBar").click();
				 info("Carousel menu expanded");
			 }

			 eleList=(doc.getElementById("carousel")).getElementsByTagName("span");//Containing all span within carousel div
			 //ele=web.element(e1Browser1+"/web:div[@id='carousel']");//It also works
			 eleList=ele.getElementsByTagName("span");
			 boolean flag=false;
			 for(DOMElement tempEle:eleList)
			 {
				 attr=tempEle.getAttribute("innerHTML"); 
				 //info("Span innerHTML = "+attr);
				 if((attr!=null) && (attr.equalsIgnoreCase(sCatogory)))
				 {
					 info("Carousel catogory '"+sCatogory+"' found ");
					 flag=true;//Category found
					 ele=((tempEle.getParent()).getParent()).getParent();//Getting id of div containing all items of that category
					 attr=ele.getAttribute("id");
					 //info("id of parent div of catogory = "+attr);

					 String tempAttr=(doc.getElementById(attr+"Header")).getAttribute("useexpandedbackground");

					 if(tempAttr==null)
					 {
						 doc.getElementById(attr+"Header").click();
						 //Just clicking on the Carousel category. It will add the attribute 'useexpandedbackground' to it.
					 }
					 tempAttr=(doc.getElementById(attr+"Header")).getAttribute("useexpandedbackground");
					 if(tempAttr!=null && tempAttr.equals("false"))
					 {
						 //Expanding the Carousel category
						 doc.getElementById(attr+"Header").click();
					 }

					 List<DOMElement> tdList=doc.getElementById(attr).getElementsByTagName("td");
					 flag=false;//reseting the value to reuse.
					 int count=-1;
					 for(DOMElement tmpEle:tdList)
					 {
						 String innerHTML=tmpEle.getAttribute("innerHTML"); 
						 //info("TD innerHTML = "+innerHTML);
						 if(innerHTML.equalsIgnoreCase(sItemName.trim()))
						 {
							 count++;
							 if(count==index)
							 {
								 info("Item '"+sItemName+"' found in category '"+sCatogory+"' at index "+index);
								 flag=true;
								 break;		
							 }
						 }
					 }
					 if((sStatus==true)&&(flag==false))
					 {
						 web.window(e1BrowserWindow).capturePage();
						 testFailure("FAILED : Item '"+sItemName+"' NOT found in category '"+sCatogory+"' at index "+index);
						 doc.getElementById("caroBar").click();
						 return;
					 }else if((sStatus==true)&&(flag==true))
					 {
						 info("PASSED : Item '"+sItemName+"' found in category '"+sCatogory+"' at index "+index);
						 doc.getElementById("caroBar").click();
						 return;
					 }
					 else if((sStatus==false)&&(flag==false))
					 {
						 info("PASSED : Item '"+sItemName+"' NOT found in category '"+sCatogory+"' at index "+index);
						 doc.getElementById("caroBar").click();
						 return;
					 }else if((sStatus==false)&&(flag==true))
					 {
						 web.window(e1BrowserWindow).capturePage();
						 testFailure("FAILED : Item '"+sItemName+"' found in category '"+sCatogory+"' at index "+index);
						 doc.getElementById("caroBar").click();
						 return;
					 }
				 }
			 }
			 if(flag==false)
			 {
				 web.window(e1BrowserWindow).capturePage();
				 testFailure("FAILED : Carosoul Category "+sCatogory+" not found");
				 return;
			 }
		 }else
		 {
			 web.window(e1BrowserWindow).capturePage();
			 testFailure("FAILED : Function validateCarouselItem Exiting. Carosoul Menu not found");
			 return;
		 }
		 valCount++;
		 info("End function validateCarouselItem");
		 return;
	 }
	 /************************************************************************************************************
	  * Function: validateCarouselItemByIndex 
	  * Description: This function is used to validate if an item is present in different categorie in carousel menu at a specified index
	  * Created By: Ghulam Quadir
	  * Modified By: Date: Sep 2016 
	  * To be incorporated: Nil InputParameters:
	  * @param sCatogory : Category of the item*
	  * @param sItemIndex : index of the item to validate. [IMP. The index of 'Manage Favorites' is 0]
	  * @param sItemName : item to validate*
	  * @param sStatus : true when item is present. flase when item is not present
	  * Example:
	  * validateCarouselItem("Open Applications", 0, " Home ", true) //When 'Home' is present in category 'Open Applications' at the first position
	  * validateCarouselItem("Open Applications", 0, " Home ", false) //When 'Home' is NOT present in category 'Open Applications' at the first position
	  * validateCarouselItem("Favorites", 1, " Daily Processing ", true) //When 'Daily Processing' is present in category 'Favorites' at index 1 or at Position 2.
	  *	IMP: in Carousel Category Favorite, the item "Manage Favorites" has index 0.
	  */
	 public void validateCarouselItemByIndex(String sCatogory, int sItemIndex, String sItemName, boolean sStatus ) throws Exception
	 {
		 info("Strting function validateCarouselItemByIndex");
		 if (docIndex == null) {
			 docIndex = getDocIndex();
		 }
		 valCount++;

		 DOMDocument doc=null;
		 DOMElement ele=null;
		 List<DOMElement> eleList=null;
		 String attr="";

		 String e1Document1 = "/web:document[@name='E1MENUMAIN*']";
		 String e1Browser1 = e1BrowserWindow + e1Document1;

		 if (web.exists(e1Browser1,60)) {//Application is opened 
			 doc=web.document(e1Browser1);
			 ele=doc.getElementById("carousel");
			 attr=ele.getAttribute("className");
			 if(attr.contains("caroCollapsed"))//Carousel menu not expanded.
			 {
				 doc.getElementById("caroBar").click();
				 info("Carousel menu expanded");
			 }

			 eleList=(doc.getElementById("carousel")).getElementsByTagName("span");//Containing all span within carousel div
			 eleList=ele.getElementsByTagName("span");
			 boolean flag=false;
			 for(DOMElement tempEle:eleList)
			 {
				 attr=tempEle.getAttribute("innerHTML"); 
				 if((attr!=null) && (attr.equalsIgnoreCase(sCatogory)))
				 {
					 info("Carousel catogory '"+sCatogory+"' found ");
					 flag=true;//Category found
					 ele=((tempEle.getParent()).getParent()).getParent();//Getting id of div containing all items of that category
					 attr=ele.getAttribute("id");//id of parent div of the catogory

					 String tempAttr=(doc.getElementById(attr+"Header")).getAttribute("useexpandedbackground");
					 if(tempAttr==null)
					 {
						 doc.getElementById(attr+"Header").click();
						 //Just clicking on the Carousel category. It will add the attribute 'useexpandedbackground' to it.
					 }
					 tempAttr=(doc.getElementById(attr+"Header")).getAttribute("useexpandedbackground");
					 if(tempAttr!=null && tempAttr.equals("false"))
					 {
						 //Expanding the Carousel category
						 doc.getElementById(attr+"Header").click();
					 }

					 DOMElement child1=(doc.getElementById(attr).getChildren()).get(1);
					 DOMElement child2=child1.getChildren().get(0);

					 if(sItemIndex>=(child2.getChildren().size()))
					 {
						 web.window(e1BrowserWindow).capturePage();
						 testFailure("FAILED : Item index "+sItemIndex+" in category '"+sCatogory+"' is out of range");
						 return; 
					 } 
					 DOMElement child3=child2.getChildren().get(sItemIndex);
					 List<DOMElement> tdList=(child3).getElementsByTagName("td");//Old line

					 flag=false;//reseting the value to reuse.
					 for(DOMElement tmpEle:tdList)
					 {
						 String innerHTML=tmpEle.getAttribute("innerHTML"); 
						 if(innerHTML.equalsIgnoreCase(sItemName.trim()))
						 {
							 info("Item '"+sItemName+"' found in category '"+sCatogory+"' at index "+sItemIndex);
							 flag=true;
							 break;		
						 }
					 }
					 if((sStatus==true)&&(flag==false))
					 {
						 web.window(e1BrowserWindow).capturePage();
						 testFailure("FAILED : Item '"+sItemName+"' NOT found in category '"+sCatogory+"' at index "+sItemIndex);
						 doc.getElementById("caroBar").click();
						 return;
					 }else if((sStatus==true)&&(flag==true))
					 {
						 info("PASSED : Item '"+sItemName+"' found in category '"+sCatogory+"' at index "+sItemIndex);
						 doc.getElementById("caroBar").click();
						 return;
					 }
					 else if((sStatus==false)&&(flag==false))
					 {
						 info("PASSED : Item '"+sItemName+"' NOT found in category '"+sCatogory+"' at index "+sItemIndex);
						 doc.getElementById("caroBar").click();
						 return;
					 }else if((sStatus==false)&&(flag==true))
					 {
						 web.window(e1BrowserWindow).capturePage();
						 testFailure("FAILED : Item '"+sItemName+"' found in category '"+sCatogory+"' at index "+sItemIndex);
						 doc.getElementById("caroBar").click();
						 return;
					 }
				 }
			 }
			 if(flag==false)
			 {
				 web.window(e1BrowserWindow).capturePage();
				 testFailure("FAILED : Carosoul Category "+sCatogory+" not found");
				 return;
			 }
		 }else
		 {
			 web.window(e1BrowserWindow).capturePage();
			 testFailure("FAILED : Function validateCarouselItemByIndex Exiting. Carosoul Menu not found");
			 return;
		 }

		 info("End function validateCarouselItemByIndex");
		 return;
	 }


	 /************************************************************************************************************
	  * Function: validateConfirmationBoxExists(eStatus)
	  * Description: This function will validate whether the confirmation box exists or not 
	  * Created By: Anusha Bonam
	  * Date: August 2016
	  * To be incorporated:
	  * Input Parameters:
	  *      @param eStatus : true if confirmation box exists, false if confirmation box does not exist
	  * @return Nil
	  * Example : validateConfirmationBoxExists(true)
	  * **********************************************************************************************************
	  */
	 public void validateConfirmationBoxExists(@Arg("eStatus") boolean eStatus) throws Exception{
		 checkFrame();
		 if(docIndex==null){
			 getDocIndex();
		 }
		 boolean aStatus;
		 info("Starting:Function validateConfirmationBoxExists");
		 if (web.confirmDialog("/web:dialog_confirm[@index='0']").exists()){
			 aStatus = true;
		 }           
		 else{
			 aStatus = false;
		 }
		 if(aStatus){
			 if(aStatus==eStatus){
				 info("validateConfirmationBoxExists  Passed : Confirmation Box exists");
			 }
			 else{
				 CapturePage();
				 testFailure("validateConfirmationBoxExists  Failed : Confirmation Box Exists");
			 }
		 }
		 else{
			 if(aStatus==eStatus){
				 info("validateConfirmationBoxExists  Passed : Confirmation Box does not exist");
			 }
			 else{
				 CapturePage();
				 testFailure("validateConfirmationBoxExists  Failed : Confirmation Box does not Exists");
			 }
		 }
		 valCount=valCount+1; 
		 info("Finished:Function validateConfirmationBoxExists ");
	 }

	 /************************************************************************************************************
	  * Function: validateCursorTypeResizable
	  * Description: This Function Check onmouseover cursor type is e-resize, w-resize or default on page.
	  * Created By: Sunil
	  * Date: December 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param iId: input Id of cursor (vertical bar Id) .
	  * 		@param sStatus: Status of the cursor (true(resizable)/false(Default cursor))
	  * Returns: 
	  * 		@return Nil
	  * **********************************************************************************************************
	  */ 
	 public void validateCursorTypeResizable(@Arg("iId")String iId, @Arg("sStatus")boolean sStatus) throws Exception {
		 checkFrame();
		 if(docIndex==null){
			 getDocIndex();
		 }
		 info("Starting function [validateCursorTypeResizable]");
		 String bro;
		 if(isModalForm){
			 bro=e1Browser;
		 }else{
			 bro="/";
		 }	
		 incrementValidationCount(1);
		 if(!(iId.contains("rAnchor"))){
			 iId = iId.replace("HDR_DIV", "rAnchor");
		 }
		 info("iId = "+iId);
		 //Check Id present on the page...
		 if (web.exists(bro+"/web:div[@id='"+iId+"*']",15)){
			 String style[]=null;
			 //Start checking cursor type..
			 web.element(bro+"/web:div[@id='"+iId+"*']").mouseOver();
			 String styleValue = web.element(bro+"/web:div[@id='"+iId+"*']").getAttribute("style");
			 //info("styleValue : "+styleValue);
			 if( styleValue.contains("e-resize") || styleValue.contains("w-resize")){
				 if(sStatus == true){
					 info("Passed : Cursor type with Id \'"+iId+"\' is resizable.");
				 }else{
					 CapturePage();
					 testFailure("Failed : Cursor type with Id \'"+iId+"\' is resizable.");
				 }
			 }
			 else{
				 if(sStatus == false){
					 info("Passed : Cursor type with Id \'"+iId+"\' is Default pointer.");
				 }else{
					 CapturePage();
					 testFailure("Failed : Cursor type with Id \'"+iId+"\' is Default pointer.");
				 }
			 }
		 }
		 else{
			 CapturePage();
			 testFailure("Element with Id \'"+iId+"\' not found on the page.");
		 }
		 info("Finished:Function [validateCursorTypeResizable]");
	 }

	 /*************************************************************************************************************
	  * Function: validateElementText
	  * Description: This function will validate the Text on web page(Like Label).
	  * Created By: Ghulam Quadir
	  * Date: Dec 2015
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * @param id (id of the containing <div>)
	  * @param fldName
	  * @throws Exception
	  * Returns: 
	  *          @return Nil
	  **************************************************************************************************************/
	 public void validateElementText(String id, String fldName) throws Exception
	 {
		 checkFrame();
		 info("Starting:Function validateElementText ");
		 if(docIndex==null){
			 getDocIndex();
		 } 
		 String attr="id";
		 String objVal;
		 boolean isPresent = false;
		 String bro="";
		 if((attr.equals("id"))&&(isModalForm==false)){
			 bro="/";
		 }else{
			 bro=e1Browser;
		 }
		 isPresent= web.exists(e1Browser+"/web:div[@"+attr+"='"+id+"']", 5);
		 DOMText txt=null;
		 if(isPresent) 
		 {
			 txt=web.textBox(bro+"/web:div[@"+attr+"='"+id+"']");
			 objVal=txt.getAttribute("text");
			 if(objVal.equals(fldName.trim()))
			 {
				 info("PASSED  validateElementText  Text "+fldName+" is seen in the web page with "+attr+" "+id+"");
			 }else
			 {
				 web.window(e1BrowserWindow).capturePage();
				 beginStep("[validateElementText]  Failed (text not matching)");
				 {
					 fail("FAILED  validateElementText  Text "+fldName+" is not present in the web page with "+attr+" "+id+"");
				 }
			 }
		 }else
		 {
			 web.window(e1BrowserWindow).capturePage();
			 beginStep("[validateElementText]  Failed ("+attr+"  dosent exist)");
			 {
				 fail("ERROR The "+attr+"  "+id+", at which user is trying to validate text "+fldName+" is not present on the displayed page");
			 }
			 endStep();
		 }
		 info("Finished:Function validateElementText "); 
	 }

	 /************************************************************************************************************
	  * Function: validateErrorAndItsDescription 
	  * Description: This function validates an error. Also it validates the error description which comes on clicking on the error..
	  * Created By: Ghulam Quadir
	  * Date: Oct 2016 
	  * Modified By: 
	  * To be incorporated: Nil InputParameters:
	  * @param sErrorMsg : Error to validate.
	  * @param index : Index of the error text@param index : Index of the error text
	  * @param sErrorMsg : Error to validate.
	  * @param errorDescription : This is the error description which appears after clicking on the error.Example:validateErrorAndItsDescription("Ship to address number is invalid","0","not found in User Defined Code 42B UA");//When to validate there is an error 'Ship to address number is invalid' and its description is 'not found in User Defined Code 42B UA'validateErrorAndItsDescription("Ship to address number is invalid","0","not found in User Defined Code 42B UA");//When to validate there is an error 'Ship to address number is invalid' and its description is 'not found in User Defined Code 42B UA'
	  */
	 public void validateErrorAndItsDescription( @Arg("index")
			 String index, @Arg("sErrorMsg")
			 String sErrorMsg, @Arg("errorDescription")
			 String errorDescription) throws Exception
			 {
		 info("Starting function validateErrorAndItsDescription");
		 if (docIndex == null) {
			 docIndex = getDocIndex();
		 }
		 incrementValidationCount(1);

		 String bro;
		 if (isModalForm == true) {
			 bro = e1Browser;
		 } else {
			 bro = "/";
		 }
		 if (web.exists(bro + "/web:img[@alt='Error*' and @id='WIDGETID*'][" + index + "]",10)) {//Validating Errors are appearing
			 String errMessage1 = sErrorMsg.replaceAll(	"'","&apos;");
			 if (web.exists(bro + "/web:a[@text='" + errMessage1 + "*'][" + index + "]",10)) {//Validating given error is appearing.
				 info("The Error '" + sErrorMsg + "' found.");

				 DOMElement ele=web.element(bro + "/web:a[@text='" + errMessage1 + "*'][" + index + "]");//This is <a> tag having error message
				 ele.click();//Clicking on the error to show description
				 String eleProp=ele.getAttribute("href");//This string would be like 'javascript:inyfeHandler.toggleDescription('WIDGETID_0_800_0','DESCID_0_800_0',true);'
				 String descDivId=eleProp.split("\\,")[1].replaceAll("'","");

				 DOMElement descDiv=web.element(bro + "/web:div[@id='"+descDivId+"']");
				 boolean flag=false;
				 if(descDiv.exists() && descDiv!=null)
				 {
					 String description=descDiv.getAttribute("innerText");
					 if(description.trim().contains(errorDescription.trim()))
					 {
						 flag=true;
						 info("Passed : The error description is as expected");
					 }
				 }

				 if(flag==false)
				 {
					 web.window(e1BrowserWindow).capturePage();
					 testFailure("FAILED: The error description is Not as expected");
				 }

			 } else {
				 web.window(e1BrowserWindow).capturePage();
				 testFailure("FAILED: Error '" + sErrorMsg + "' with index " + index + " not found.");
			 }
		 } else {
			 web.window(e1BrowserWindow).capturePage();
			 testFailure("FAILED: No Error with index " + index + " in the page.");
		 }

		 info("End function validateErrorAndItsDescription");
			 }

	 /************************************************************************************************************
	  * Function: validateErrorAndItsNavigationLink 
	  * Description: This function validates an error. Also it validates if a link 'Go To Error' is associated with the error or not.
	  * Created By: Ghulam Quadir
	  * Date: Oct 2016 
	  * Modified By: 
	  * To be incorporated: Nil InputParameters:
	  * @param sErrorMsg : Error to validate.
	  * @param index : Index of the error text
	  * @param sNaviagtionLinkStatus : Pass 'true' to validate link is present. Pass 'false' when link is not present.
	  * Example:
	  * validateErrorAndItsNavigationLink("Ship to address number is invalid","0",true);//When to validate there is an error 'Ship to address number is invalid' and it has link on right side 'Go to error'
	  * validateErrorAndItsNavigationLink("Ship to address number is invalid","0",false);//When to validate there is an error 'Ship to address number is invalid' and it DOES NOT HAVE link on right side 'Go to error');
	  */
	 public void validateErrorAndItsNavigationLink( String index, String sErrorMsg, boolean sNaviagtionLinkStatus) throws Exception
	 {
		 info("Starting function validateErrorAndItsNavigationLink");
		 if (docIndex == null) {
			 docIndex = getDocIndex();
		 }

		 incrementValidationCount(1);

		 String bro;
		 if (isModalForm == true) {
			 bro = e1Browser;
		 } else {
			 bro = "/";
		 }
		 if (web.exists(bro + "/web:img[@alt='Error*' and @id='WIDGETID*'][" + index + "]",10)) {//Validating Errors are appearing
			 String errMessage1 = sErrorMsg.replaceAll(	"'","&apos;");
			 if (web.exists(bro + "/web:a[@text='" + errMessage1 + "*'][" + index + "]",10)) {//Validating given error is appearing.
				 info("The Error '" + sErrorMsg + "' found.");

				 DOMElement ele=web.element(bro + "/web:a[@text='" + errMessage1 + "*'][" + index + "]");//This is <a> tag having error text
				 DOMElement td=(ele.getParent()).getNextSibling();//This td contains the 'Go To error' link

				 boolean linkFound=false;
				 String linkText=null;
				 List<DOMElement> linkEle=td.getElementsByTagName("a");
				 if(linkEle.size()!=0)
				 {
					 linkText=(linkEle.get(0)).getAttribute("text");
				 }
				 if(linkText!=null && linkText.equals("Go to error.."))
				 {
					 linkFound=true;
				 }

				 if(sNaviagtionLinkStatus==true && linkFound==true)
				 {
					 info("Passed : Link 'Go to Error..' for the given error found");
				 }else if(sNaviagtionLinkStatus==true && linkFound==false)
				 {
					 web.window(e1BrowserWindow).capturePage();
					 testFailure("Failed : Link 'Go to Error..' for the given error found");
				 }

				 if(sNaviagtionLinkStatus==false && linkFound==false)
				 {
					 info("Passed : Link 'Go to Error..' for the given error Not found");
				 }else  if(sNaviagtionLinkStatus==false && linkFound==true)
				 {
					 web.window(e1BrowserWindow).capturePage();
					 testFailure("Failed : Link 'Go to Error..' for the given error NOT found");
				 }

			 } else {
				 web.window(e1BrowserWindow).capturePage();
				 testFailure("FAILED: Error '" + sErrorMsg + "' with index " + index + " not found.");

			 }
		 } else {
			 web.window(e1BrowserWindow).capturePage();
			 testFailure("FAILED: No Error with index " + index + " in the page.");
		 }

		 info("End function validateErrorAndItsNavigationLink");
	 }

	 /************************************************************************************************************
	  * Function: validateErrorDesc
	  * Description: Used to validate whether the text passed as argument, is displayed in the error description.
	  * Created By: Anusha Bonam
	  * Date: May 2011
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param valText: Text to be validated
	  * Returns: 
	  * 		@return Nil
	  * **********************************************************************************************************
	  */
	 public void validateErrorDesc(@Arg("valText") String valText)throws Exception {
		 checkFrame();
		 getScript("EOneUtility").callFunction("incrementValidationCount","1");	
		 info("Start Function: validateErrorDesc");
		 if(isError()){
			 String tableText=web.table("//web:div[@id='INYFEContent']").getAttribute("text");
			 if(tableText.indexOf('&')!=0){
				 tableText=tableText.replace("&amp;","&");
			 }
			 tableText=tableText.replaceAll(newline, "");
			 tableText=tableText.replaceAll(" ", "");
			 valText=valText.replaceAll(" ", "");
			 //info("valText="+valText+"tableText="+tableText);
			 if(!(tableText.indexOf(valText,0)<0)){
				 info("[validateErrorDesc] Passed:The text "+valText+" is present");
			 }else{
				 CapturePage();
				 testFailure("[validateErrorDesc] Failed:The text "+valText+" is not present");
			 }
		 }else{
			 CapturePage();
			 testFailure("[validateErrorDesc] Failed:Error is not present on the page");
		 }

		 info("End Function: validateErrorDesc");
	 }

	 public void validateFavoriteTableRowData(int sRowIndex, int sColIndex, String sValue) throws Exception
	 {
		 info("Starting function validateFavoriteTableRowData");

		 incrementValidationCount(1);

		 //Validating Favorite Table is Present
		 if(!web.exists("//web:table[@id='FavManageTable']",60))
		 {
			 CapturePage();
			 testFailure("FAILED : Favorite Table NOT found");
			 return;
		 }

		 DOMElement domTr=null;
		 if(web.exists("//web:tr[@id='Row_"+sRowIndex+"']",60))
		 {
			 domTr=web.element("//web:tr[@id='Row_"+sRowIndex+"']");
		 }else
		 {
			 web.window(e1Browser).capturePage();
			 testFailure("FAILED : Row index "+sRowIndex+" not found in the Table");
			 return;
		 }

		 String valueFromTable= ((web.element("//web:tr[@id='Row_"+sRowIndex+"']")).getChildren().get(sColIndex).getAttribute("innerHTML"));//childrens are 'td'.

		 if(valueFromTable.contains(sValue))
		 {
			 info("PASSED : Value "+sValue+" in Row "+sRowIndex+" at column index "+sColIndex+" Found");
		 }else
		 {
			 web.window(e1Browser).capturePage();
			 testFailure("FAILED : Value "+sValue+" in Row "+sRowIndex+" at column index "+sColIndex+" NOT Found. Actaul Value is "+valueFromTable);
		 }
		 info("End function validateFavoriteTableRowData");
		 return;
	 }

	 public void validateFavoriteTableRowImage(int sRowIndex, String sImageName) throws Exception
	 {
		 info("Starting function validateFavoriteTableRowImage");
		 if(docIndex==null)
		 {
			 getDocIndex();
		 }
		 incrementValidationCount(1);

		 //Validating Favorite Table is Present
		 if(!web.exists("//web:table[@id='FavManageTable']",60))
		 {
			 CapturePage();
			 testFailure("FAILED : Favorite Table NOT found");
			 return;
		 }

		 DOMElement domEle=null;
		 if(web.exists("//web:tr[@id='Row_"+sRowIndex+"']",60))
		 {
			 domEle=web.element("//web:tr[@id='Row_"+sRowIndex+"']");
		 }else
		 {
			 web.window(e1Browser).capturePage();
			 testFailure("FAILED : Row index "+sRowIndex+" not found in the Table");
			 return;
		 }

		 String id="";
		 if(sImageName.trim().equalsIgnoreCase("Rename"))
		 {
			 id="rename_"+sRowIndex;
		 }else if(sImageName.trim().equalsIgnoreCase("Delete"))
		 {
			 id="delete_"+sRowIndex;
		 } 
		 domEle=web.element("//web:img[@id='"+id+"']");
		 //Handling situation when user has passed wrong image name.
		 if(!domEle.exists() || domEle==null)
		 {
			 CapturePage();
			 testFailure("FAILED : Image "+sImageName+" in row "+sRowIndex+" NOT Found");
		 }

		 String styleDisplay=domEle.getAttribute("style");
		 if(styleDisplay.contains("display: block") || styleDisplay.contains("display:block")||styleDisplay.contains("display=\"block\""))
		 {
			 info("PASSED : Image "+sImageName+" in row "+sRowIndex+" Found");
		 }else
		 {
			 web.window(e1Browser).capturePage();
			 testFailure("FAILED : Image "+sImageName+" in row "+sRowIndex+" NOT Found");
		 }

		 info("End function validateFavoriteTableRowImage");
		 return;
	 }

	 /************************************************************************************************************
	  * Function:   validateFreezeCol
	  * Description: This function will validate whether the column in the grid is freezed or not.
	  * Created By:Rupa 
	  * Date: August  2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *      @param iIndex - index of the grid in the webpage starting from 0,
	  *      @param sColName - column header of the cell that needs to be validated.
	  *                 		
	  * Returns: 
	  * 		@return Nil
	  * Example : validateFreezedCol(0,"ColumnName") //To validte that the given column is in freezed area of first grid 
	  * **********************************************************************************************************
	  */

	 public void validateFreezeCol(@Arg("iIndex") int iIndex,@Arg("sColName") String sColName) throws Exception{
		 info("Starting:Function validateFreezeCol");
		 incrementValidationCount(1);
		 String gridId,colIndex;
		 int flag=0;
		 if(!bDB){
			 checkFrame();
			 gridId = getGridObjReference(iIndex);
			 colIndex = getColIndexForColName(gridId,sColName);
			 if(colIndex!=null){
				 List<DOMElement> tdValues=web.element(e1Browser+"/web:div[@id='freezeGrid"+gridId+"']/web:tr[@id='hdrRow"+gridId+"']").getElementsByTagName("td");
				 for(int i=0;i<tdValues.size();i++)
				 {
					 String colIndex2=tdValues.get(i).getAttribute("colIndex");
					 if(colIndex2!=null)
					 {
						 if(colIndex2.equalsIgnoreCase(colIndex))
						 {
							 flag=1;
							 break;
						 }
					 }
				 }

				 if(flag==1)
				 {
					 info("The column "+sColName+" is a freezed column");
				 }
				 else if(flag==0)
				 {
					 testFailure("The column "+sColName+" is not a freezed column");	
					 CapturePage();
				 }
			 }
			 else
			 {
				 testFailure("Failed to identify column "+sColName);
				 CapturePage();
			 } 
		 }

		 info("Finished:Function validateFreezeCol");

	 }

	 /************************************************************************************************************

	  * Function: validateGridAttachmentCol
	  * Description: This function checks if the specified grid has a single "search for attachments" column
	  * Created By: Yashin Bidar
	  * Date: Sep 2016 
	  * To be incorporated: Nil 
	  * InputParameters:
	  * @param iIndex:visible index of the grid on the page
	  * @param isPresent:true if grid should have the column, else false
	  * eg: validateGridAttachmentColumn(0,true)->checks if the grid with index 0 has a single search for attachments column.Passes if the grid has the column, else fails.
	  * *******************************************************************************************************/	
	 public void validateGridAttachmentCol(int iIndex,boolean isPresent)throws Exception{
		 info("Starting function validateGridAttachmentCol");
		 incrementValidationCount(1);
		 String gridId=getGridObjReference(iIndex);
		 String ColIndex[] = web.document(e1Browser).executeJsFunction("checkGridAttachment", gridId);
		 if(isPresent)
		 {
			 if(ColIndex[0].equalsIgnoreCase("true"))
			 {
				 info("Function validateGridAttachmentCol passed: Grid with index "+iIndex+" has a single attachment column");
			 }
			 else
			 {
				 testFailure("Function validateGridAttachmentCol failed: Grid with index "+iIndex+" does not have asearch for attachments column");
				 CapturePage();
			 }
		 }
		 else
		 {
			 if(!ColIndex[0].equalsIgnoreCase("true"))
			 {
				 info("Function validateGridAttachmentCol passed: Grid with index "+iIndex+" does not have asearch for attachments column");
			 }
			 else
			 {
				 testFailure("Function validateGridAttachmentCol failed: Grid with index "+iIndex+" has a single attachment column ");
				 CapturePage();
			 } 
		 }

	 }

	 /************************************************************************************************************
	  * Function: validateGridColRequired
	  * Description: This function checks if the specified column is a mandatory column(will have a '*' near the name)
	  * Created By: Yashin Bidar
	  * Date: September 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *                      	@param iIndex : index of the Grid starting from 0
	  *                       @param sColName:Name of column ot be verified
						@param isReqd:  Boolean value

	  * Returns: 
	  *                      @return nil
	  * Example:validateGridColRequired(0,"SearchType",false)->Function will pass if the Search Type column in grid with index 0 is not a mandatory column(does not have * near its name)
	  * **********************************************************************************************************/

	 public void validateGridColRequired(int iIndex,String sColName,boolean isReqd)throws Exception{
		 info("Starting function validateGridColRequired");
		 incrementValidationCount(1);
		 String gridId=getGridObjReference(iIndex);
		 if(gridId!=null)
		 {
			 String colIndex=getColIndexForColName(gridId, sColName);
			 if(colIndex!=null)
			 {
				 String isColReqd[] = web.document(e1Browser).executeJsFunction("isColMandatory", gridId,colIndex);

				 if(isReqd)
				 {
					 if(isColReqd[0].equalsIgnoreCase("true"))
					 {
						 info("validateGridColRequired Passed:"+sColName+" is a required column");
					 }
					 else
					 {
						 CapturePage();
						 testFailure("validateGridColRequired Failed:"+sColName+" is not a required column");
					 }
				 }
				 else
				 {
					 if(isColReqd[0].equalsIgnoreCase("false"))
					 {
						 info("validateGridColRequired Passed:"+sColName+" is not a required column");
					 }
					 else
					 {
						 CapturePage();
						 testFailure("validateGridColRequired Failed:"+sColName+" is a required column");
					 }
				 }
			 }
			 else
			 {
				 CapturePage();
				 testFailure("validateGridColRequired Failed:Column not found");
			 }


		 }
		 else
		 {
			 CapturePage();
			 testFailure("validateGridColRequired Failed:Grid Not found");
		 }
		 info("Ending function validateGridColRequired");
	 }

	 /************************************************************************************************************
	  * Function: validateGridColSortable
	  * Description: This function checks if the specified column is sortable(ie: there will be arrow marks next to column name)
	  * Created By: Yashin Bidar
	  * Date: September 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *                      	@param iIndex : index of the Grid starting from 0
							 @param sColName : column name
							 @param isExist:  Boolean value

	  * Returns: 
	  *                      @return nil
	  * Example:validateGridColSortable(0,"AddressNumber",true)->Function will pass if the address number column of grid with index 0, is a sortable columnie: has a
	  * little arrow mark near the column name
	  * **********************************************************************************************************
	  */

	 public void validateGridColSortable(int iIndex, String sColName,boolean isSortable)throws Exception{

		 info("Starting function validateGridColSortable");
		 incrementValidationCount(1); 
		 String gridId=getGridObjReference(iIndex);
		 if(gridId!=null)
		 {
			 String colIndex=getColIndexForColName(gridId, sColName);
			 if(colIndex!=null)
			 {
				 String ColIndex[] = web.document(e1Browser).executeJsFunction("isColumnSortable", gridId,colIndex);

				 if(isSortable)
				 {
					 if(ColIndex[0].equalsIgnoreCase("true"))
					 {
						 info("validateGridColSortable Passed:Column "+sColName+" is sortable");
					 }
					 else
					 {
						 CapturePage();
						 testFailure("validateGridColSortable Failed:Column "+sColName+" is not sortable");
					 }
				 }
				 else
				 {
					 if(ColIndex[0].equalsIgnoreCase("false"))
					 {
						 info("validateGridColSortable Passed:Column "+sColName+" is not sortable");
					 }
					 else
					 {
						 CapturePage();
						 testFailure("validateGridColSortable Failed:Column "+sColName+" is sortable");
					 }
				 }
			 }
			 else
			 {
				 CapturePage();
				 testFailure("validateGridColSortable Failed:Column not found");	
			 }
		 }
		 else
		 {
			 CapturePage();
			 testFailure("validateGridColSortable Failed:Grid not found");
		 }
		 info("Ending function validateGridColSortable");

	 }

	 /************************************************************************************************************
	  * Function:  validateGridImage
	  * Description: This function will validate the image for each column in row by giving Column Name or all columns in a row by giving ALL along with image name .
	  * Created By: Rupa
	  * Date: August 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *      @param iIndex - index of the grid in the webpage starting from 0.
	  *      @param iRow  -  row  which needs to be validated starting from 0.
	  *      @param sColName -  Column name that need to be validated.
	  *      @param sImageName - The  image name that needs to be validated.   		
	  * Returns: 
	  * 		@return Nil
	  *  Example -validateGridImage("0", "0","Clickable Integer", "delete")
	  *  -validateGridImage("0", "0","ALL", "delete")
	  *
	  * **********************************************************************************************************
	  */

	 public void validateGridImage(@Arg("iIndex") int iIndex,	@Arg("iRow") int iRow,@Arg("sColName")  String sColName ,@Arg("sImageName")  String sImageName)throws Exception{
		 info("Starting:Function validateGridImage");
		 String iColIndex;
		 int  rowIndex,flag=0;
		 if(!bDB){
			 checkFrame();
			 String gridId = getGridObjReference(iIndex);
			 if(gridId!=null) {   
				 String[] output = web.document(	e1Browser).executeJsFunction("getvisibleRowCount", gridId);
				 int rowCount = Integer.parseInt(output[0]);
				 if(iRow > rowCount){
					 iRow=iRow+1;
					 web.window(e1BrowserWindow).capturePage();
					 beginStep("[validateGridRowWebEdits] Failed: Validating Grid Row "+ iRow + " and Grid only has " + rowCount +" row");
					 {	
						 testFailure("Validating grid to row " +iRow + "and Grid only has "+rowCount +"  row");
						 CapturePage();	
						 valCount=valCount+1;
					 }endStep();
					 return;
				 }
				 rowIndex = getRowIndexForVisibleRow(gridId, iRow);
				 if(sColName.equalsIgnoreCase("ALL"))
				 {
					 String[] output1 = web.document(e1Browser).executeJsFunction("getColLen", gridId);
					 int colCount=Integer.parseInt(output1[0]);
					 colCount= colCount-1;

					 for(int startCol=0;startCol<=colCount;startCol++)
					 {
						 iColIndex=Integer.toString(startCol);
						 if(iColIndex!=null)
						 {
							 String[] srcProperty = web.document(e1Browser).executeJsFunction("cellImageObjectBySrc",gridId,Integer.toString(rowIndex), iColIndex);
							 if(srcProperty[0].contains(sImageName)){

								 flag=1;
								 valCount=valCount+1;
							 }	
						 }
					 }
				 }
				 else
				 {
					 String[] colIndex = web.document(e1Browser).executeJsFunction("gridColIndex", gridId,sColName);
					 if(colIndex[0].equals("1")){
						 iColIndex= colIndex[1];
					 }
					 else{
						 iColIndex= getColIndexForColName(gridId, sColName);
					 }	
					 if(iColIndex!=null){

						 String[] srcProperty = web.document(e1Browser).executeJsFunction("cellImageObjectBySrc",gridId,Integer.toString(rowIndex), iColIndex);
						 if(srcProperty[0].contains(sImageName)){

							 flag=1;
							 valCount=valCount+1;
						 }	
					 } 
				 }
			 }
			 if(flag==1)
			 {
				 info("The row  " + iRow +  " has " + sImageName  + " icon ");
			 }
			 else
			 {
				 testFailure("The " +sColName+"column of row " + iRow + " doesn't contains the correct icon ");
				 CapturePage();	
				 valCount=valCount+1;
			 }
		 }

		 info("Finished: Function validateGridmage");
	 }

	 /************************************************************************************************************




	  * Function: validateGridMaximized
	  * Description: This function checks if the specified grid is maxmimzed and the only grid on the current page
	  * Created By: Yashin Bidar
	  * Date: Sep 2016 
	  * To be incorporated: Nil 
	  * InputParameters:
	  * @param iIndex:visible index of the grid on the page
	  * @param sStatus:true if grid should be maxmimsed, else false
	  * eg: validateGridMaximized(0,true): checks if the first visible grid on the page is the only grid on the page and if it has been maximized

	  * *******************************************************************************************************/	 

	 public void validateGridMaximized(int iIndex,boolean sStatus) throws Exception{
		 info("Starting function validateGridMazimized");
		 incrementValidationCount(1);
		 String gridId=getGridObjReference(iIndex);
		 int visGridsCount=gridIds.size();
		 String isMaximized[]=web.document(e1Browser).executeJsFunction("isGridMaximized",gridId);

		 if(sStatus)
		 {
			 if(isMaximized[0].equalsIgnoreCase("true")&&(visGridsCount==1))
			 {
				 info("validateGridMaximized Passed: Grid with index "+iIndex+"is maximized and the only grid on the screen");
			 }
			 else
			 {
				 testFailure("validateGridMaximized Failed: Grid with index "+iIndex+"is not maximized");
				 CapturePage();
			 }
		 }
		 else
		 {
			 if(isMaximized[0].equalsIgnoreCase("true"))
			 {
				 testFailure("validateGridMaximized Failed: Grid with index "+iIndex+"is not maximized");
				 CapturePage();
			 }
			 else
			 {
				 info("validateGridMaximized Passed: Grid with index "+iIndex+"is maximized");
			 }
		 }
	 }

	 public void validateGridObjRelativePosition(String idLeft,String idRight) throws Exception{
		 checkFrame();
		 info("Starting function validateGridObjRelativePosition");
		 incrementValidationCount(1);
		 DOMElement eRight=web.document(e1Browser).getElementById(idRight);
		 DOMElement eParent=eRight;
		 String sTag1=null;
		 while(eParent!=null)
		 {
			 String isVisible=eParent.getAttribute("style");
			 isVisible=isVisible.replaceAll(" ","");
			 if(isVisible!=null&&isVisible.contains("display:none"))
			 {
				 CapturePage();
				 testFailure("function validateGridObjRelativePosition Failed:Object with id "+idRight+" does not appear on the screen");
				 return;
			 }


			 sTag1=eParent.getTag();
			 if(sTag1!=null&&sTag1.equalsIgnoreCase("div"))
			 {     
				 break;
			 }
			 else
				 eParent=eParent.getParent();
		 }



		 DOMElement eLeft=web.document(e1Browser).getElementById(idLeft);
		 eParent=eLeft.getParent();
		 sTag1=null;
		 while(eParent!=null)
		 {
			 String isVisible=eParent.getAttribute("style");
			 isVisible=isVisible.replaceAll(" ","");
			 if(isVisible!=null&&isVisible.contains("display:none"))
			 {
				 CapturePage();
				 testFailure("function validateGridObjRelativePosition Failed:Object with id "+idLeft+" does not appear on the screen");
				 return;
			 }


			 sTag1=eParent.getTag();
			 if(sTag1!=null&&sTag1.equalsIgnoreCase("div"))
			 {     
				 break;
			 }
			 else
				 eParent=eParent.getParent();
		 }
		 DOMElement tdRight=web.document(e1Browser).getElementById(idRight).getParent();
		 String sTag=tdRight.getTag();
		 while(!sTag.equalsIgnoreCase("td")){
			 tdRight=tdRight.getParent();
			 sTag=tdRight.getTag();
		 }



		 if(tdRight.getPreviousSibling()!=null)
		 {
			 DOMElement prevTr=tdRight.getPreviousSibling();
			 do
			 {

				 if(prevTr.getElementById(idLeft)!=null)
				 {
					 info("function validateGridObjRelativePosition Passed:Object with id "+idLeft+" appears to the left of object with id "+idRight);
					 return;
				 }
				 else
					 prevTr=prevTr.getPreviousSibling();

			 }while(prevTr!=null);
		 }
		 testFailure("function validateGridObjRelativePosition Failed:Object with id "+idLeft+" does not appear to the left of object with id "+idRight);
		 CapturePage(); 
	 }

	 /************************************************************************************************************
	  * Function:validateGridRowImageIsClickable(iIndex,iRow,sFieldName,isClickable,isHidden,isDisabled)  
	  * Description: This function will check the different properties of grid image like whether its clickable  .
	  * Created By: Rupa
	  * Date: August 2016
	  * To be incorporated: Nil 
	  * InputParameters:
	  * @param iIndex - index of the grid in the webpage starting from 0
	  * @param iRow - Visible row number starting from 0
	  * @param sFieldName - column header of the cell that needs to be validated.
	  * @param isClickable : is the field clickable i.e true/false.
	  * Returns: Nil
	  * validateGridRowImageIsClickable("1","1", "Clickable Date","true")
	  * **********************************************************************************************************
	  */ 
	 public void validateGridRowImageIsClickable(@Arg("iIndex") int iIndex,@Arg("iRow") int iRow, @Arg("sFieldName")String sFieldName,@Arg("sClickable")String sClickable) throws Exception{
		 validateGridRowImageProperty(iIndex,iRow,sFieldName,sClickable,"",""); 

	 }

	 /************************************************************************************************************
	  * Function:validateGridRowImageIsDisabled(iIndex,iRow,sFieldName,isClickable,isHidden,isDisabled)  
	  * Description: This function will check the different properties of grid image like whether its disabled  .
	  * Created By: Rupa
	  * Date: August 2016
	  * To be incorporated: Nil 
	  * InputParameters:
	  * @param iIndex - index of the grid in the webpage starting from 0
	  * @param iRow - Visible row number starting from 0
	  * @param sFieldName - column header of the cell that needs to be validated .
	  * @param isDisabled : is the field is Disabled i.e true/false.
	  * 
	  * Returns: Nil
	  * 
	  * validateGridRowImageIsDisabled("1","1", "Clickable Date","true")
	  * **********************************************************************************************************
	  */ 
	 public void validateGridRowImageIsDisabled(@Arg("iIndex") int iIndex,@Arg("iRow") int iRow, @Arg("sFieldName")String sFieldName, @Arg("sDisabled") String isDisabled) throws Exception{
		 validateGridRowImageProperty(iIndex,iRow,sFieldName,"","",isDisabled); 

	 }
	 /************************************************************************************************************
	  * Function:validateGridRowImageIsHidden(iIndex,iRow,sFieldName,isClickable,isHidden,isDisabled)  
	  * Description: This function will check the different properties of grid image like whether it is  hidden  .
	  * Created By: Rupa
	  * Date: August 2016
	  * To be incorporated: Nil 
	  * InputParameters:
	  * @param iIndex - index of the grid in the webpage starting from 0
	  * @param iRow - Visible row number starting from 0
	  * @param sFieldName - column header of the cell that needs to be validated .
	  * @param isHidden : is the field is Hidden i.e true/false.
	  * Returns: Nil
	  * Example - validateGridRowImageIsHidden("1","1", "Clickable Date","true")
	  * **********************************************************************************************************
	  */ 
	 public void validateGridRowImageIsHidden(@Arg("iIndex") int iIndex,@Arg("iRow") int iRow, @Arg("sFieldName")String sFieldName,@Arg("sHidden")String sHidden) throws Exception{
		 validateGridRowImageProperty(iIndex,iRow,sFieldName,"",sHidden,""); 

	 }
	 /************************************************************************************************************
	  * Function:validateGridRowImageProperty(iIndex,iRow,sFieldName,isClickable,isHidden,isDisabled)  
	  * Description: This function will check the different properties of grid image like whether it clickable, is  hidden or disabled  .
	  * Created By: Rupa
	  * Date: August 2016
	  * To be incorporated: Nil 
	  * InputParameters:
	  * @param iIndex - index of the grid in the webpage starting from 0
	  * @param iRow - Visible row number starting from 0
	  * @param sFieldName - column header of the cell that needs to be validated .
	  * @param isClickable : is the field clickable i.e true/false.
	  * @param isHidden: is the field is Hidden i.e true/false.
	  * @param isDisabled: is the field is disabled i.e true/false.
	  * 
	  * Returns: Nil
	  * **********************************************************************************************************
	  */ 
	 private void validateGridRowImageProperty(@Arg("iIndex") int iIndex,@Arg("iRow") int iRow, @Arg("sFieldName") String sFieldName, @Arg("isClickable") String isClickable,@Arg("isHidden") String isHidden ,@Arg("isDisabled") String isDisabled)throws Exception {
		 info("Starting:Function validateGridRowImageProperty");
		 String gridId, property=null;
		 int flag = 0;
		 if(!bDB){
			 checkFrame();
			 gridId = getGridObjReference(iIndex);
			 if(gridId!=null){
				 int rCount=getGridRowCountByIndex(iIndex);
				 if(iRow>(rCount-1)){

					 testFailure("Clicking grid row "+(iRow+1)+" Failed:  grid only has "+rCount+" rows");
					 CapturePage();
					 valCount=valCount+1;
					 return;
				 }			
				 String colIndex=getColIndexForColName(gridId,sFieldName);
				 if(colIndex!=null){
					 int rowIndex=getRowIndexForVisibleRow(gridId,iRow);
					 String[] gridCellId = web.document(e1Browser).executeJsFunction("clickGridImgByIndex", gridId,""+rowIndex,colIndex,"0");
					 /*if(browser.getBrowser() instanceof InternetExplorerBrowser){
						web.image(e1Browser+"/web:form[@id='E1PaneForm']/web:img[@id='"+gridCellId[0]+"']").mouseOver();
					}else{*/
					 web.image(e1Browser+"/web:form[@id='E1PaneForm']/web:img[@id='"+gridCellId[0]+"']").focus();
					 web.image(e1Browser+"/web:form[@id='E1PaneForm']/web:img[@id='"+gridCellId[0]+"']").mouseOver(false);
					 //}
					 String srcValue=web.image(e1Browser+"/web:form[@id='E1PaneForm']/web:img[@id='"+gridCellId[0]+"']").getAttribute("src");
					 info("srcValue is: " +srcValue);
					 DOMElement imageLink  =web.image(e1Browser+"/web:form[@id='E1PaneForm']/web:img[@id='"+gridCellId[0]+"']").getParent();
					 info("attributes are: " +imageLink.getAttributes());
					 String disabledValue =imageLink.getAttribute("disabled");
					 info("disabledValue is: " +disabledValue);
					 //-----------------------------------------------
					 /*String altProOfImg="";
					DOMElement imageEle  =web.image(e1Browser+"/web:form[@id='E1PaneForm']/web:img[@id='"+gridCellId[0]+"']");
					altProOfImg=imageEle.getAttribute("alt");
					info("Captured alt property values of image : "+altProOfImg);*/
					 //-----------------------------------------------
					 try
					 {
						 //------------------isClickable--------------
						 if(isClickable.equalsIgnoreCase("true"))
						 {
							 property="Clickable";	
							 if(srcValue.contains("mo.gif") && (disabledValue==null))
							 {
								 flag =1;
							 }else if(srcValue.contains("mo.gif") && disabledValue.equalsIgnoreCase("false")){
								 flag = 1;
							 }
						 }
						 else if(isClickable.equalsIgnoreCase("false"))
						 {
							 property="Clickable";	
							 if( (disabledValue == null) && (!srcValue.contains("mo.gif"))){
								 flag=1;
							 }else if((!(srcValue.contains("mo.gif"))) && disabledValue.equalsIgnoreCase("true"))
							 {
								 flag =1;
							 }
						 }

						 //---------------isHidden---------------
						 if(isHidden.equalsIgnoreCase("true")) 
						 {
							 property="Hidden";	
							 if(srcValue.contains("blank.gif"))
							 {
								 flag =1;
							 }
						 }
						 else if(isHidden.equalsIgnoreCase("false"))
						 {
							 property="Hidden";
							 if( (!srcValue.contains("blank.gif")) )
							 {
								 flag =1;
							 }
						 }

						 //----------isDisabled------------------
						 if(isDisabled.equalsIgnoreCase("true"))
						 {
							 property="Disabled";
							 if((disabledValue == null) )
							 {
								 flag=1;
							 }else if(disabledValue.equalsIgnoreCase("true"))
							 {
								 flag=1;
							 }

						 }
						 else if(isDisabled.equalsIgnoreCase("false")) 
						 {
							 property="Disabled";
							 if((disabledValue == null) )
							 {
								 flag=1;
							 }else if(disabledValue.equalsIgnoreCase("false"))
							 {
								 flag=1;
							 }
						 }
					 }

					 catch(Exception e)    
					 {
						 System.out.println(e);	
					 }
				 }
				 if(flag==1)
				 {
					 info(property+"property  of the image in " + sFieldName + "behaves as expected");	 
				 }
				 else  {
					 testFailure(property+"property  of the image in " + sFieldName + " doesn't behaves as expected");
					 CapturePage(); 

				 }
			 }
		 }
		 valCount=valCount+1;
		 info("Finished:Function validateGridRowImageProperty"); 
	 }
	 /*************************************************************************************************************
	  * Function: validateLineColorRightSideOfFreezeCol
	  * Description: This function will validate Line present right side of freeze column with blue color.
	  * Created By: Sunil
	  * Date: Feb 2017
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * @param idFreeze : Index of the grid. 
		 @param : colorPro : color property of an element
	  * Returns: 
	  *          @return Nil
	  * Example : validateLineColorRightSideOfFreezeCol( 0 , "border-right-color");
	  **************************************************************************************************************/	
	 public void validateLineColorRightSideOfFreezeCol( int gridIndex , String colorPro) throws Exception{
		 getScript("EOneUtility").callFunction("incrementValidationCount", 1);
		 String gridId = ""+getScript("EOneUtility").callFunction("getGridObjReference", gridIndex);
		 boolean isPresent =web.exists(e1Browser+"/web:div[@id='freezeGrid"+gridId+"']",10);

		 if(isPresent = true)
		 {
			 info("Grid freeze id freezeGrid"+gridId+" found.");
			 getScript("EOneUtility").callFunction("executeJSCode");
			 //info("Js file load suceed.");
			 String[] output = web.document("/web:window[@index='0']/web:document[@index='10']").executeJsFunction("getCSSColorPro", "freezeGrid"+gridId , colorPro);
			 info("Color == "+output[0]);
			 String color = ""+ getScript("EOneUtility").callFunction("getColorName",output[0]);
			 if(color != null && color.equals("blue"))
			 {
				 info("Passed : Line with color "+color+" found in the page.");
			 }else{
				 getScript("EOneUtility").callFunction("CapturePage");
				 testFailure("Failed : Line with color "+color+" not found on the page.");
			 }
		 }
		 else
		 {
			 getScript("EOneUtility").callFunction("CapturePage");
			 testFailure("There is no freeze column, the blue line doesn't appears");
		 }
	 }

	 /************************************************************************************************************
	  * Function: validateMenuItemExists
	  * Description: This function will validate if the item exists or not under the menu type passed
	  * Created By: Anusha Bonam
	  * Date: Sep 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param MenuType : Type of the menu.(i.e.,Form, Row, Tools, Reports)
	  * 		@param Items : The sub menu item available under the menu type.
	  * 		@param eStatus : true if exists/false if does not exist.
	  * Returns: 
	  * 		@return Nil
	  * Example: 
	  * validateMenuItemExists("Tools","Refresh",false);  - checking for Tools> menu item 'Refresh' does not exist
	  * validateMenuItemExists("Form","Exit for Testing",true); - Checkig for Form > menu item 'Exit for Testing' is present
	  *  
	  * **********************************************************************************************************
	  */
	 public void validateMenuItemExists(String MenuType, String Items, boolean eStatus) throws Exception {
		 checkFrame();
		 info("Begin Function:validateMenuItemExists");
		 getScript("EOneUtility").callFunction("incrementValidationCount","1");
		 if((MenuType.trim()).equalsIgnoreCase("Form")){
			 MenuType = MenuType.toUpperCase();

		 }
		 else if((MenuType.trim()).equalsIgnoreCase("Row")){
			 MenuType = MenuType.toUpperCase();

		 }
		 else if((MenuType.trim()).equalsIgnoreCase("Tools")){
			 MenuType = MenuType.toUpperCase();

		 }
		 else if((MenuType.trim()).equalsIgnoreCase("Report")){
			 MenuType = MenuType.toUpperCase();

		 }
		 else {
			 CapturePage();
			 testFailure("Menu Type "+MenuType+" is not present");
			 return;
		 }
		 String[] menuItem = Items.split(";");
		 String element = null;
		 String[] elementItems = null;
		 List<DOMElement> nobrList=null;
		 boolean flag=false;
		 String elementValue="";
		 ArrayList<String> getEachElevalue=new ArrayList<String>();

		 DOMDocument doc=null;
		 DOMElement eleDom=null;

		 if ((web.exists("//web:img[@id='"+MenuType+"_EXIT_BUTTON' ]",60))) {//This ensures presence of "Form Menu icon" on the page 
			 customClick(web.element("//web:img[@id='"+MenuType+"_EXIT_BUTTON' ]"));
			 info(MenuType+" menu clicked");
			 doc=web.document(e1Browser);

			 String currId=web.element("//web:img[@id='"+MenuType+"_EXIT_BUTTON' ]").getAttribute("launchmenuid");//Row menu div id is different for all application.

			 for(int i=0;i<menuItem.length;i++)
			 {
				 int itemIndex=0;
				 element=menuItem[i].trim();//First Item of path
				 elementItems=Pattern.compile("[|]").split(element);

				 if(elementItems.length==2)//Index is present with from menu item
				 {
					 itemIndex=Integer.parseInt(elementItems[0]); 
					 elementValue=elementItems[1];
					 getEachElevalue.add(elementValue);
				 }else
				 {
					 elementValue=elementItems[0];
					 getEachElevalue.add(elementValue);
				 }

				 eleDom=web.element("//web:div[@id='"+currId+"']");
				 nobrList=eleDom.getElementsByTagName("nobr");

				 int count=-1;
				 String innerHTML="";
				 String divId="";

				 for(DOMElement tempDom:nobrList)
				 {
					 innerHTML=tempDom.getAttribute("innerHTML");
					 //info("Inner HTML="+innerHTML);
					 flag=false;
					 if((innerHTML.replace("&nbsp;","")).equalsIgnoreCase(elementValue))
					 {
						 count++;
					 } 
					 if(itemIndex==count)//This is the element to select
					 {// in this block Hover/Click over the item and find the id of next div.

						 //Get the First div element.
						 DOMElement temp=tempDom;
						 for(int j=0;;j++)
						 {
							 temp=temp.getParent(); 
							 if((temp!=null)&&(temp.getTag().contains("DIV")))//getTag() return tag name in capital letter
							 {
								 divId=temp.getAttribute("id");
								 currId=divId.replace("-Show","");//This will be id of div of next path item
								 if(i==menuItem.length-1)//It is last element. So click on it.
								 {	
									 if(divId.contains("outer"))//Every last ite parent div has id starting with "outer"
									 {
										 //tempDom.click();
										 flag=true;
										 break;
									 }else// It indicates the path given by user is not complete.
									 {
										 return;
									 }
								 }else//mouse over element.
								 {
									 temp.getChildren().get(0).mouseOver();	
									 flag=true;
									 break;
								 }
							 }
							 if(j==100)//Find upto hundred parent element only
							 {
								 break;
							 }
						 }
						 if(flag==true)//Element found. So come out of outer loop also;
						 {
							 break;
						 }
						 //info("MOUSE OVER and currId="+currId);
					 }
				 }

			 }
			 //info("aStatus: "+flag+ "eStatus:  "+eStatus);
			 if(flag == eStatus){
				 if(eStatus){
					 info("validateMenuItemExists Passed: "+MenuType+" menu '"+getEachElevalue+"' found");
				 }
				 else{
					 info("validateMenuItemExists Passed: "+MenuType+" menu '"+getEachElevalue+"' not found");
				 }
			 }	
			 else {
				 if(eStatus){

					 CapturePage();	
					 testFailure("validateMenuItemExists Failed: "+MenuType+" menu '"+getEachElevalue+"' not found");
				 }
				 else{
					 CapturePage();	
					 testFailure("validateMenuItemExists Failed: "+MenuType+" menu '"+getEachElevalue+"' found");
				 }
			 }
		 }
		 info("End Function:validateMenuItemExists");
	 }

	 /************************************************************************************************************
	  * Function: validateMenuItemIsNonDuplicable
	  * Description: This function will validate menu item in doesn't have duplicates
	  * Note : Before calling this function ensure that you must have clicked on either form/row menu on tool bar or right clicked on form/row area.
	  * Created By: Rupa
	  * Date: March 2017
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *          @param MenuType : Type of the menu.(i.e.,Form, Row)
	  *          @param MenuItem : The MenuItem that should not be duplicate.
	  * Returns: 
	  *          @return Nil
	  * 
	  * **********************************************************************************************************
	  */
	 public void validateMenuItemIsNonDuplicable(String MenuType, String MenuItem) throws Exception {
		 getScript("EOneUtility").callFunction("checkFrame");
		 info("Begin Function:validateMenuItemIsNonDuplicable");
		 getScript("EOneUtility").callFunction("incrementValidationCount","1");
		 if((MenuType.trim()).equalsIgnoreCase("Form") || (MenuType.trim()).equalsIgnoreCase("Row")){
			 MenuType = MenuType.toUpperCase();
		 }else {
			 getScript("EOneUtility").callFunction("CapturePage");
			 testFailure("Menu Type "+MenuType+" is not present");
			 return;
		 }
		 List<DOMElement> nobrList=null;
		 boolean flag=false;
		 DOMDocument doc=null;
		 DOMElement eleDom=null;

		 if ((web.exists("//web:img[@id='"+MenuType+"_EXIT_BUTTON' ]",60))) {//This ensures presence of "Form Menu icon" on the page 
			 doc=web.document(e1Browser);
			 String currId=web.element("//web:img[@id='"+MenuType+"_EXIT_BUTTON' ]").getAttribute("launchmenuid");//Row menu div id is different for all application.
			 eleDom=web.element("//web:div[@id='"+currId+"']");
			 eleDom=web.element("//web:div[@id='"+currId+"']");
			 String style =eleDom.getAttribute("style");
			 //For FF and IE
			 // Map<String, String> attr =eleDom.getAttributes();

			 // String style=attr.get("style").toString();
			 info("style : "+style);
			 if(style.contains("display: block;")){ 
				 //if(style.contains("display :block ")){ 
				 nobrList=eleDom.getElementsByTagName("nobr");
				 int count=-1;
				 String innerHTML="";
				 String divId="";
				 String allFavoritesItems = "";
				 // int numberOfFavorites = 0;
				 int itemCount = 1;
				 int counter = 0;
				 for(DOMElement tempDom:nobrList)
				 {

					 if(itemCount % 2 == 0){
						 innerHTML=tempDom.getAttribute("innerHTML");
						 innerHTML = innerHTML.replaceAll("&nbsp;", "");
						 DOMElement temp=tempDom;

						 for(int j=0;;j++)
						 {
							 temp=temp.getParent(); 
							 if((temp!=null)&&(temp.getTag().contains("DIV")))//getTag() return tag name in capital letter
							 {
								 divId=temp.getAttribute("id");
								 if(divId.contains("Favorites")){
									 break;
								 }else if(divId.contains("FormRow")){
									 flag = true;
									 break;
								 }else{
									 info("innerHTML : "+innerHTML+" MenuItem : "+MenuItem);
									 if(innerHTML.equalsIgnoreCase(MenuItem)){
										 counter++;
									 }
									 break;
								 }
							 }
							 if(j==100)//Find upto hundred parent element only
							 {
								 break;
							 }
						 }
						 itemCount++;
					 }else{
						 itemCount++;
					 }
					 if(flag==true)//Element found. So come out of outer loop also;
					 {
						 break;
					 }
				 }
				 if(counter == 1){
					 info("The Menu  Items in "+MenuType+" is present only ones");
				 }else{
					 getScript("EOneUtility").callFunction("CapturePage");
					 testFailure("There are duplicate values  in "+MenuType+" ");
				 }
			 }else{
				 getScript("EOneUtility").callFunction("CapturePage");
				 testFailure("Failed : Pop Up menu is not present on the page to validate menu item. ");
				 return;
			 }
		 }
		 info("End Function : validateMenuItemIsNonDuplicable");
	 }
	 /************************************************************************************************************
	  * Function: validateMenuPopUpDisappeared
	  * Description: This function will validate menu item in doesn't have duplicates
	  * Created By: Rupa
	  * Date: March 2017
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *          @param MenuType : Type of the menu.(i.e.,Form, Row)
	  *          @param MenuItem : The MenuItem that should not be duplicate.
	  * Note : It will validate menu items only form Favorites Section.            
	  * Returns: 
	  *          @return Nil
	  * 
	  * **********************************************************************************************************
	  */
	 public void validateMenuPopUpDisappeared(String MenuType) throws Exception {
		 getScript("EOneUtility").callFunction("checkFrame");
		 info("Begin Function : validatePopUpDisappeared");
		 getScript("EOneUtility").callFunction("incrementValidationCount","1");
		 if((MenuType.trim()).equalsIgnoreCase("Form")){
			 MenuType = MenuType.toUpperCase();
		 }
		 else if((MenuType.trim()).equalsIgnoreCase("Row")){
			 MenuType = MenuType.toUpperCase();
		 }else {
			 getScript("EOneUtility").callFunction("CapturePage");
			 testFailure("Menu Type "+MenuType+" is not present");
			 return;
		 }
		 DOMDocument doc=null;
		 DOMElement eleDom=null;

		 if ((web.exists("//web:img[@id='"+MenuType+"_EXIT_BUTTON' ]",60))) {//This ensures presence of "Form Menu icon" on the page 
			 doc=web.document(e1Browser);
			 String currId=web.element("//web:img[@id='"+MenuType+"_EXIT_BUTTON' ]").getAttribute("launchmenuid");//Row menu div id is different for all application.
			 eleDom=web.element("//web:div[@id='"+currId+"']");
			 // For FireFox and IE
			 /*Map<String, String> attr =eleDom.getAttributes();

               String style=attr.get("style").toString();*/
			 String style =eleDom.getAttribute("style");
			 info("style display property : "+style.split(";")[0]);
			 if(style.contains("display: none;")){
				 info("Passed : Pop Up menu is disappeared.");
			 }else{
				 getScript("EOneUtility").callFunction("CapturePage");
				 testFailure("Failed : Pop Up menu present on the page. ");
			 }
		 }
		 info("End Function : validatePopUpDisappeared");
	 }
	 /************************************************************************************************************
	  * Function: validateMenuItemInPopupIsEnabled(popupID,menuItem,isEnabled)
	  * Description: This function is used to  validate whether the Menu options in the popup is Enabled or not.
	  * Created By: Rupa
	  * Date: September 2016
	  * To be incorporated:
	  * Input Parameters:
	  *      @param iIndex : index of the grid
	  * 		@param sColName : Name of the colum on which menu item popup is appearing
	  *      @param menuItem: Menu Item that needs to be validated.
	  *		@param isEnabled : whether the menu Item should be enabled or not.It should be true/false.
	  * @return NA
	  * Example : validateMenuItemInPopupIsEnabled(0,"columnName","Freeze", true)//To validate Freeze is enabled on given column in first grid 
	  * **********************************************************************************************************
	  */

	 public void validateMenuItemInPopupIsEnabled(@Arg("iIndex")int iIndex,@Arg("sColName") String sColName,@Arg("menuItem")String menuItem,@Arg("isEnabled")boolean isEnabled)throws Exception{
		 info("Starting:Function validateMenuItemInPopupIsEnabled");
		 incrementValidationCount(1);
		 int flag=0,flag2=1;
		 checkFrame();
		 String gridId = getGridObjReference(iIndex);
		 String colIndex = getColIndexForColName(gridId,sColName);
		 info("grid id="+gridId+"    colindex="+colIndex);

		 String popupParentDivId="popupFrzWin"+gridId+"."+colIndex;
		 info("popupParentDiv id="+popupParentDivId);

		 String popupDivId="";
		 String sOption = menuItem;
		 if(sOption.equalsIgnoreCase("Freeze"))
		 {
			 popupDivId="FreezeDiv";
		 }else  if(sOption.equalsIgnoreCase("UnFreeze"))
		 {
			 popupDivId="UnFreezeDiv";
		 }else  if(sOption.equalsIgnoreCase("Hide"))
		 {
			 popupDivId="HideDiv";
		 }else  if(sOption.equalsIgnoreCase("UnHide"))
		 {
			 popupDivId="UnHideDiv";
		 }


		 DOMElement parentDiv=web.element("//web:div[@id='"+popupParentDivId+"']");
		 String disp=parentDiv.getAttribute("style");
		 info("display="+disp); 
		 //if((disp.indexOf("display: block")==-1)||(disp.indexOf("display:block")==-1))
		 if(disp.contains("display: none"))
		 {

			 flag=1;
		 }

		 if(flag==1)
		 {
			 CapturePage();                
			 testFailure("Failed : Popup window does not exists");
			 //return;
		 }

		 String path="//web:div[@id='"+popupParentDivId+"']/web:div[@id='"+popupDivId+"']";

		 DOMElement ele=web.element(path);
		 if(ele!=null && ele.exists())
		 {
			 String disabled=ele.getAttribute("disabled");
			 System.out.println("disabled="+disabled);
			 //System.out.println("enabled="+isEnabled);
			 if(isEnabled==true)
			 {
				 if(disabled==null || (!disabled.equalsIgnoreCase("true")))	
				 {
					 flag2=0;
				 }
			 }
			 else if(isEnabled==false)
			 {

				 if(disabled.equalsIgnoreCase("true"))
				 {
					 flag2=0;	
				 }
			 }


		 }

		 if(flag2==0)
		 {
			 info("PASSED : popup Menu item"+ menuItem+" enabled property behaves as expected");
		 }
		 if(flag2==1)
		 {
			 CapturePage();   
			 testFailure("FAILED : popup Menu item"+ menuItem+" enabled property doesn't behaves as expected");
		 }	

		 info("Finished:Function validateMenuItemInPopupIsEnabled");
	 }

	 /************************************************************************************************************
	  * Function: validateMOImage
	  * Description: This function is used to validate presence of image in media object area (Can be used only in Media Object Area)
	  * Created By: Megha K
	  * Date: Aug 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param property:Property name of the image
	  * 		@param property_value:Value of the given property
	  * 		@param image_name:Name of the image which should be validated
	  * Returns: 
	  * 		@return Nil
	  * Example: 1.validateMOImage(ID,image_TESTA.BMP,TESTA.BMP)
	  * 	    2.validateMOImage(alt,Image,TESTA.BMP) 
	  * **********************************************************************************************************
	  */
	 public void validateMOImage(String property,String property_value, String image_name) throws Exception{
		 info("Starting of function validateMOImage");
		 checkFrame();
		 incrementValidationCount(1);	
		 String bro;
		 if(isModalForm==true){
			 bro=e1Browser;
		 }else{
			 bro="/";
		 }
		 if(web.exists(bro+"/web:img[@"+property+"='"+property_value+"']")){
			 DOMElement image=web.element(bro+"/web:img[@"+property+"='"+property_value+"']");
			 String src=image.getAttribute("src");
			 System.out.println("Src: "+src);
			 if(src.contains(image_name)){
				 info("validateMOImage Passed: Media Object Image with name " +image_name+ " is loaded into media object area");
			 }else{
				 CapturePage();
				 testFailure("validateMOImage Failed: Media Object Image with name " +image_name+ " is not loaded into media object area");
			 }
		 }else{
			 CapturePage();
			 testFailure("validateMOImage Failed: Media Object Image with property_value " +property_value+ " is not loaded into media object area");
		 }
		 info("Ending of function validateMOImage");
	 }

	 /************************************************************************************************************
	  * Function: validateMousePointer
	  * Description: This Function Check onmouseover cursor type is hand or default on page.
	  * Created By: Sunil
	  * Date: September 2016
	  * Updated By:Anusha
	  * Update Date:5.9.17
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param iId: input Id of the image.
	  * 		@param imageDescription: image name.
	  * 		@param sStatus: Status of the image (true(Hand cursor)/false(Default cursor))
	  * Returns: 
	  * 		@return Nil
	  * **********************************************************************************************************
	  */ 
	 public void validateMousePointer(@Arg("iId")String iId, @Arg("imageDescription")String imageDescription, @Arg("sStatus")boolean sStatus) throws Exception {
         checkFrame();
         info("Starting function [validateMousePointer]");
         String bro;
         if(isModalForm){
                         bro=e1Browser;
         }else{
                         bro="/";
         }             
         //Check Id present on the page...
         if (web.exists(bro+"/web:img[@id='"+iId+"*']",15)){
                         String style[]=null;
                         //Start checking cursor type..
                         web.image(bro+"/web:img[@id='"+iId+"*']").mouseOver();
                         e1Document = "/web:document[@index='"+docIndex+"' or @name='e1menuAppIframe']";
                         e1Browser=e1BrowserWindow+e1Document;
                         DOMDocument document = web.document(e1Browser);
                         /*web.image(e1Browser+"/web:img[@id='"+iId+"*']").getParent().setSelectedJSElement();
                                         document.executeJavaScript("function getStyle(){return selectedOATSWebDomElement.currentStyle.cursor;}");
                           */

                         document.executeJavaScript("function getStyle(){return window.getComputedStyle(document.getElementById('"+iId+"')).getPropertyValue('cursor');}");

                         style = web.document(e1Browser).executeJsFunction("getStyle");   
                          info("style:"+style[0]);

                         //Check in anchor tag attribute href is present.
                         int index = iId.indexOf("0_");
                         String anchorTagId = ""+iId.substring(index);
                         //info("anchor tag id:="+anchorTagId );
                         String input_id ="";
                         String isanchorTagContainshref="";
                         String checkMousePointer ="false";
                         List <DOMElement> AllInputs=web.element(e1Browser+"/web:form[@id='E1PaneForm']").getElementsByTagName("a");
                         for( DOMElement d:AllInputs) {
                                         input_id=d.getAttribute("id");
                                         if(input_id!=null){
                                                         //info("DOMelement all ids="+input_id);
                                                         if(input_id.contains(anchorTagId)){
                                                                         isanchorTagContainshref = d.getAttribute("href");
                                                                         //info("All attributes:="+d.getAttributes());                       
                                                                         checkMousePointer = "true";
                                                                         break;
                                                         }
                                         }
                         }
                         //info("Is anchor Tag Contains href attributs:="+isanchorTagContainshref);
                         //Check onmouseover it is hand or default coursor. 
                          if( ((style[0].equalsIgnoreCase("auto"))||(style[0].equalsIgnoreCase("pointer"))) && isanchorTagContainshref != ""){
                                         if( checkMousePointer.equalsIgnoreCase("true")){
                                                         if(checkMousePointer.equalsIgnoreCase(""+sStatus)){
                                                                         info("Passed : Hand cursor");
                                                         }else{
                                                                         CapturePage();
                                                                         testFailure("\'"+imageDescription+"\'is not default cursor on the page.");
                                                         }
                                         }
                         }
                         else if(checkMousePointer.equalsIgnoreCase("false")){
                                         if(checkMousePointer.equalsIgnoreCase(""+sStatus)){
                                                         info("Passed : Default cursor");
                                         }else{
                                                         CapturePage();
                                                         testFailure("\'"+imageDescription+"\'is not hand cursor on the page.");
                                         }
                         }
         }
         else{
                         CapturePage();
                         testFailure("\'"+imageDescription+"\'not found on the page.");
         }
         incrementValidationCount(1);
         //valCount=valCount+1;
         info("Finished:Function validateMousePointer");
}


	 /************************************************************************************************************
	  * Function: validateMOWordPptXL
	  * Description: This function is used to validate loading of word, presentation and XL sheet in media object area
	  * Created By: Megha K
	  * Date: Aug 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param extension :Extension of the object expected to be loaded into media object area(docx-word, pptx-presentation, xls-XL sheet)
	  * Returns: 
	  * 		@return Nil
	  * Examples: 1.validateMOWordPptXL(xls)
	  * 	     2.validateMOWordPptXL(pptx)
	  * **********************************************************************************************************
	  */		

	 public void validateMOWordPptXL(@Arg("extension") String extension) throws Exception{
		 info("Starting of Function validateMOWordPptXL");
		 checkFrame();
		 incrementValidationCount(1);
		 String bro;
		 if(isModalForm==true){
			 bro=e1Browser;
		 }else{
			 bro="/";
		 }
		 info("Starting:Function validateMOWordPptXL ");

		 web.object(bro+"/web:object[@id='jdecontainer*']").setSelectedJSElement();

		 web.document("/web:window[@index='0']/web:document[@index='"+docIndex+"']").executeJavaScript("function checkFileNameProp(){return selectedOATSWebDomElement.FileName;}");

		 String fileNameProp=web.document("/web:window[@index='0']/web:document[@index='"+docIndex+"']").executeJsFunction("checkFileNameProp")[0];
		 info("FileName  is " +fileNameProp);
		 if(fileNameProp.split("\\.")[1].equalsIgnoreCase(extension)){
			 if(extension.equalsIgnoreCase("xls")||extension.equalsIgnoreCase("xlsx")){
				 info("validateMOWordPptXL Passed: XL sheet is loaded into media object area");
			 }else if(extension.equalsIgnoreCase("docx")||extension.equalsIgnoreCase("doc")){
				 info("validateMOWordPptXL Passed: Word Document is loaded into media object area");
			 }else if(extension.equalsIgnoreCase("pptx")||extension.equalsIgnoreCase("ppt")){
				 info("validateMOWordPptXL Passed: Presentation slide is loaded into media object area");
			 }else{
				 CapturePage();
				 info("validateMOWordPptXL Failed: media object with extension "+extension+ "is not loaded");
			 }
		 }else{
			 CapturePage();
			 testFailure("validateMOWordPptXL Failed: media object with extension "+extension+ " is not loaded");
		 }
		 info("Ending of Function validateMOWordPptXL");
	 }

	 /************************************************************************************************************
	  * Function: validateNavigationFavoriteItemByIndex 
	  * Description: This function is used to check if an item at a specified index in Navigation Bar Favorites is present or not.
	  * Created By: Ghulam Quadir 
	  * Modified By: Date: Sep 2016 
	  * To be incorporated: Nil 
	  * InputParameters:
	  * @param sItemIndex :Index of the item to be validated. [IMP. The index of 'Manage Favorites' is 0]
	  * @param sItemName :Name of the item to be validated
	  * @param sStatus :True when sub Item exists. False when Item does NOT exists
	  * Example:
	  *         validateNavigationFavoriteItemByIndex(2,"Processing Options",true)//Here, 2 is the index of that item.
	  *         *****************************************************************
	  */
	 public void validateNavigationFavoriteItemByIndex(int sItemIndex, String sItemName, boolean sStatus) throws Exception 
	 {
		 info("Starting function validateNavigationFavoriteItemByIndex"); 
		 checkFrame();
		 if (docIndex == null) {
			 docIndex = getDocIndex();
		 }
		 valCount++;

		 if (!(web.exists("//web:input_text[@id='TE_FAST_PATH_BOX' ]",60))) {//It insures navigation bar is rendered/loaded properly.
			 OSPreferences("Fail");
			 web.window(e1BrowserWindow).capturePage();
			 testFailure("Function validateNavigationFavoriteItemByIndex Exiting. E1 page does not exist.");
			 return ;
		 }
		 web.element("//web:div[@id='drop_fav_menus']").click();//Clicking on Icon Favorites
		 Thread.sleep(1000);

		 DOMElement parentDiv=web.element("//web:div[@id='e1MMenuFav']");
		 List<DOMElement> childDivList=(parentDiv.getChildren().get(0)).getChildren();
		 //Here, each div contains each item in Favorite Sub menu.

		 if(sItemIndex>0)
		 {
			 sItemIndex=sItemIndex+1;
			 //Since there is always a BLANK div at index 1.
		 }
		 if(sItemIndex>=childDivList.size())
		 {
			 web.window(e1Browser).capturePage();
			 testFailure("FAILED : Item index "+(sItemIndex-1)+" in Category Favorites is out of Ramge"); 
			 return;
		 }
		 DOMElement actualDiv=childDivList.get(sItemIndex);
		 String taskLabel=actualDiv.getAttribute("tasklabel");
		 info("taskLabel="+taskLabel);
		 boolean flag=false;
		 if(taskLabel!=null && (taskLabel.equals(sItemName.trim())))
		 {
			 if(sStatus==true)
			 {
				 info("PASSED : Item '"+sItemName+"' in Category Favorites found at index "+(sItemIndex-1));

			 }else
			 {
				 web.window(e1Browser).capturePage();
				 testFailure("FAILED : Item '"+sItemName+"' in Category Favorites found at index "+(sItemIndex-1));
				 return;
			 }
		 }else {
			 if(sStatus==true)
			 {
				 web.window(e1Browser).capturePage();
				 testFailure("FAILED : Item '"+sItemName+"' in Category Favorites NOT found at index "+(sItemIndex-1));
				 return;
			 }else
			 {
				 info("PASSED : Item '"+sItemName+"' in Category Favorites NOT found at index "+(sItemIndex-1));
			 }

		 }
		 web.element("//web:div[@id='drop_fav_menus']").click();//Clicking on Icon Favorites to close the opened fov conext menu at the begininng of the func

		 info("End function validateNavigationFavoriteItemByIndex");
	 }

	 /************************************************************************************************************
	  * Function: validatePasswordIncorrect
	  * Description:The function validates if a user try to login with incorrect password ,it should not allow to launch E1 and throws an error message.
	  * Created By: Rupa
	  * Date: August 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *	@param strLoginPassword : An Incorrect password.
	  * Returns: 
	  * 		@return Nil
	  * **********************************************************************************************************
	  */	


	 public void validatePasswordIncorrect(@Arg("strLoginPassword")String strLoginPassword) throws Exception
	 {
		 info("Starting:Function  validatePasswordIncorrect");

		 String [] arryStrng;
		 String sUser=null,  sEnvironment = null, sRole = null, sLoginUrl = null,sCS = null;

		 getDocIndex();
		 try {
			 BufferedReader reader = new BufferedReader(new FileReader("C:/login.ini"));      
			 String line = null;
			 int parts = 0;
			 line = reader.readLine();
			 if (line.equals("[ENVIRONMENT]")){
				 while ((line = reader.readLine()) != null) {
					 arryStrng = line.split("=");

					 if(arryStrng[0].equalsIgnoreCase("user")) {
						 sUser=arryStrng[1]; 
						 parts = parts+1;
					 }
					 else if (arryStrng[0].equalsIgnoreCase("environment")) {
						 sEnvironment=arryStrng[1];
						 parts = parts+1;
					 }
					 else if (arryStrng[0].equalsIgnoreCase("role")) {
						 sRole=arryStrng[1];
						 parts = parts+1;
					 }else if (arryStrng[0].equalsIgnoreCase("loginurl")) {
						 sLoginUrl=arryStrng[1];
						 parts = parts+1;
					 }
					 if (parts==4) {
						 break;
					 }

				 }
			 }
		 }
		 catch (Exception e) {
			 System.out.println(e.toString());
		 } 



		 String objSignInError="/web:window[@index='0']/web:document[@index='0']/web:div[@id='SignInError']";

		 web.clearAllCache();
		 //web.clearAllPersistentCookies();



		 {
			 if (web.exists( "//web:input_text[@id='User']")){
				 info("Login Page has rendered as expected.");
			 }else  {
				 testFailure("E1 URL Login Page Failed to open properly for Some Reason... Trying 1 more time! 2nd Try to open E1 login page");
				 closeEOneBrowser();//The Method is called in E1Utilty
				 if(!web.exists("/web:window[@index='0']"))
					 browser.launch();
				 web.window("/web:window[@index='0']").navigate(sLoginUrl); 
				 think(5);
			 }

			 web.textBox( "//web:input_text[@id='User']").setText(sUser);
			 web.textBox ("//web:input_password[@id='Password']").setText(strLoginPassword);
			 web.textBox( "//web:input_text[@id='Environment']").setText(sEnvironment);
			 web.textBox( "//web:input_text[@id='Role']").setText(sRole);
			 web.button( "//web:input_submit[@value='Sign In']").click();
			 web.window(e1BrowserWindow).waitFor();
			 if(web.exists(objSignInError))
			 {
				 if(web.exists("/web:window[@index='0']/web:document[@index='0']/web:div[@id='SignInError' or @text='  Sign In Error:    Incorrect User ID or Password. ']"))
					 //int size=objSignInError.length();
					 //System.out.println("the size is"+size);
					 // String text=web.element("/web:window[@index='0' or @title='JD Edwards']/web:document[@index='0']/web:div[@id='SignInError']").getDisplayText();
				 {
					 info("validation for Incorrect password login is successful");      

				 }
				 else{
					 testFailure("There is no error messege -Incorrect User ID or Password.");
					 CapturePage();
				 }

			 }
			 else
			 {
				 testFailure("Able to login with:" +sUser + "and  "+strLoginPassword +"  userid and password");
				 CapturePage();
			 }
		 }
		 valCount=valCount+1;
		 info("Finished:Function  validatePasswordIncorrect"); 
	 }

	 /************************************************************************************************************
	  * Function: validatePopupWindowFrame 
	  * Description: This function validates the frame name of popup window.
	  *
	  * Created By: Ghulam Quadir
	  * Date: Sep 2016 
	  * Modified By: 
	  * To be incorporated: Nil InputParameters:
	  * @param sFrameName : Name of the popup window frame
	  * Example:
	  * validatePopupWindowFrame("Add to Favorites")
	  */
	 public void validatePopupWindowFrame(String sFrameName) throws Exception
	 {
		 info("Starting function validatePopupWindowFrame");
		 if (docIndex == null) {
			 docIndex = getDocIndex();
		 }
		 sFrameName=sFrameName.trim();

		 incrementValidationCount(1);

		 boolean flag=false;
		 boolean frameVal1=false;
		 boolean frameVal2=false;

		 String browser1 = e1BrowserWindow+"/web:document[@name='E1MENUMAIN*']";
		 DOMElement popupDiv=null;
		 String elePath=browser1+"/web:div[@title='"+sFrameName+"' ]";//Validating popup windows asssciated with Favorites.		
		 //info("elePath="+elePath); 
		 if(web.exists(elePath,10))
		 {
			 frameVal1=true;
		 }

		 if(frameVal1==true)
		 {
			 popupDiv=web.element(elePath);  
			 if(popupDiv.exists() && popupDiv!=null)
			 {
				 String style=popupDiv.getAttribute("style");
				 if(style.contains("display: block") || style.contains("display=\"block\""))////It is hidden(Verifying  popup is visible)
				 {
					 info("PASSED : Expected Frame "+sFrameName+" found on the page");
					 return;//One popup window related to Favorites found and validation comletes here.
				 }
			 }
		 }

		 //Validating other types of popup window frame. It includes doc names like iFrame, E1MenuMain etc.
		 elePath=e1Browser+"/web:div[@text='"+sFrameName+"' ]";//Validating popup windows other than associated with Favorites.	
		 if(web.exists(elePath,10))
		 {
			 frameVal2=true;
		 }
		 if(frameVal2)
		 {
			 info("PASSED : Expected Frame "+sFrameName+" found on the page");
			 flag=true;
		 }


		 if(flag==false)
		 {
			 web.window(e1Browser).capturePage();
			 testFailure("FAILED : Expected Frame "+sFrameName+" Not found on the page");
		 }

		 info("End function validatePopupWindowFrame");
		 return;
	 }
	 /************************************************************************************************************
	  * Function: validatePositionofSaveFmtButton
	  * Description: This function will validate the position of save Format Button.
	  * Created By:Rupa
	  * Modified by : Ghulam Quadir
	  * Date: September 2016
	  * To be incorporated:
	  * Input Parameters: 
	  *          @param iIndex :Iindex of the grid in the webpage starting from 0.
	  *          @param position :position of the save icon that is expected.
	  *          
	  * Returns: 
	  *          @return Nil
	  * **********************************************************************************************************
	  */

	 public void validatePositionOfsaveFmtButton(@Arg("iIndex") int iIndex,@Arg("position")String position) throws Exception{
		 info("Starting:Function validatePositionOfsaveFmtButton");
		 if(docIndex==null){
			 getDocIndex();
		 }

		 valCount=valCount+1; 

		 String alignValue ,gridId;
		 gridId = getGridObjReference(iIndex);

		 String path="//web:table[@gridid='"+gridId+"']";
		 info("gridid="+gridId);
		 DOMElement table=(web.element("//web:table[@gridid='"+gridId+"']"));
		 DOMElement td=table.getChildren().get(0).getChildren().get(0).getChildren().get(1);//This is the 2nd td having property align=right
		 String prop=td.getAttribute("align");
		 info("prop="+prop);
		 if( (!(prop.equals("right"))) || prop==null)
		 {
			 CapturePage();    
			 testFailure("Failed : Image 'Save' is not at the top most right corner");
			 return;
		 }
		 DOMElement ele=web.element("//web:table[@gridid='"+gridId+"']/web:td[@align='right']/web:img[@alt='Save Grid Format']");
		 //This line insures that we are seeing the td in which all items are at the right side. So the 'Save' image also will at right 
		 //side at some position
		 if(ele !=null && ele.exists())
		 {
			 //Now Check if the 'Save' is visible or hidden
			 DOMElement tempParent=ele.getParent().getParent();
			 //for ff
			 Map<String, String> attr =tempParent.getAttributes();
			 String style=attr.get("style");
			 info("style : "+style);
			 if(style==null)
			 {
				 style = tempParent.getAttribute("style");
			 }
			 //for IE
			 //  String style=tempParent.getAttribute("style");
			 info("style : "+style);
			 if(style.contains("display: block"))//Image is visible
			 {
				 info("Passed: Image 'Save' is at the right corner of the grid");
			 }else
			 {
				 CapturePage();    
				 testFailure("Failed : Image 'Save' not found the in The grid");
			 }


		 }else
		 {
			 CapturePage();    
			 testFailure("Failed : Image 'Save' not found the in The grid");

		 }

		 info("Finished function:validatePositionOfsaveFmtButton");
	 }

	 /************************************************************************************************************
	  * Function: validateRangeGridRowCount
	  * Description: This function is used to validate number of rows of Range grid.
	  * Created By: Spurthi P
	  * Date: Oct 2016
	  * Input Parameters: 
	  *      @param sid : Id of the record range displayed above the Grid
	  *      @param sRows : Expected number of rows in Range Grid              		
	  * Returns: 
	  * 		@return Nil
	  ***********************************************************************************************************
	  */
	 public void validateRangeGridRowCount(@Arg("sid") String sid,	@Arg("sRows") String sRows) throws Exception {

		 info("Start Function: validateRangeGridRowCount");

		 String[] txt = web.element(e1Browser+"/web:td[@id='"+sid+"']").getAttribute("text").split("-");
		 txt[1] = txt[1].replaceAll(" ","");		
		 if(txt[1].equals(sRows)){
			 info("[validateRangeGridRowCount] Passed: Expected and Actual row count (" + sRows+ ") are matching");
		 }else{
			 CapturePage();			
			 testFailure("[validateRangeGridRowCount]  Failed : Expected row count is " + sRows+ " and the actual row count is "+ txt[1]);		
		 }

		 incrementValidationCount(1);
		 info("End Function: validateRangeGridRowCount");
	 }

	 /************************************************************************************************************

	  * Function: validateRowSelectorType
	  * Description: This function checks for the type of row selector on the specified grid
	  * Created By: Yashin Bidar
	  * Date: Sep 2016 
	  * To be incorporated: Nil 
	  * InputParameters:
	  * @param iIndex:visible index of the grid on the page
	  * @param sType:Expected type of selector(radio/checkbox)
	  * eg: validateRowSelectorType(0,radio)-checks if the first grid on the page has radio buttons on the row selector column
	  * *******************************************************************************************************/			 
	 public void validateRowSelectorType(int iIndex,String sType) throws Exception{
		 info("Starting function validateRowSelectorType");
		 incrementValidationCount(1);
		 String colObj[]=null;
		 String gridId=getGridObjReference(iIndex);
		 info(gridId);
		 try{
			 colObj=web.document(e1Browser).executeJsFunction("setRowSelector", gridId.toString(),"0");
		 }catch(Exception e){};
		 if((colObj[0]!=null)&&((colObj[0].length()!=0))&&(!colObj[0].equalsIgnoreCase("null"))){
			 info("0:"+colObj[0]+", 1:"+colObj[1]);
		 }
		 else
		 {
			 if(sType.equalsIgnoreCase("none"))
			 {
				 info("empty"+colObj[0]);
				 info("Function validateRowSelectorType Passed:Grid with index "+iIndex+" has no row selector type");
				 return;
			 }
			 else
			 {
				 CapturePage();
				 testFailure("validateRowSelectorType failed:Grid with index "+iIndex+" has no row selector type");
				 return;
			 }
		 }


		 if(colObj[1].trim().equalsIgnoreCase(sType.trim()))
		 {
			 info("Function validateRowSelectorType Passed:Grid with index "+iIndex+" has row selector type:"+colObj[1]);
		 }
		 else
		 {
			 CapturePage();
			 testFailure("validateRowSelectorType failed:Grid with index "+iIndex+" has row selector type:"+colObj[1]);
		 }
	 }


	 /************************************************************************************************************
	  * Function: validateTextMOFieldReadOnly
	  * Description: This function is used to validate field is editable or not
	  * Created By: Megha K
	  * Date: Aug 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param readonly:Field is expected to be ReadOnly or editable(True or False)
	  * Returns: 
	  * 		@return Nil
	  * Examples: validateTextMOFieldReadOnly(True)
	  * 
	  **********************************************************************************************************
	  */		

	 public void validateTextMOFieldReadOnly(@Arg("readonly") String readonly) throws Exception{
		 info("Starting Function validateTextMOFieldReadOnly");
		 checkFrame();
		 incrementValidationCount(1);
		 String bro;
		 if(isModalForm==true){
			 bro=e1Browser;
		 }else{
			 bro="/";
		 }

		 web.object(bro+"/web:form[@name='MOOption']/web:object[@id='jdeRTF' ]").setSelectedJSElement();

		 web.document("/web:window[@index='0']/web:document[@index='"+docIndex+"']").executeJavaScript
		 ("function checkreadonlyprop(){return selectedOATSWebDomElement.readonly;}");

		 String readonlyprop=web.document("/web:window[@index='0']/web:document[@index='"+docIndex
			 +"']").executeJsFunction("checkreadonlyprop")[0];
		 info("Value returned from readonly property is " +readonlyprop);

		 if(readonlyprop.equalsIgnoreCase(readonly)){  
			 if(readonlyprop.equalsIgnoreCase("True")){
				 info("validateTextMOFieldReadOnly Passed: Text Field is Readonly");
			 }
			 else{
				 info("validateTextMOFieldReadOnly Passed: Text Field is Editable");
			 }
		 }
		 else{
			 if(readonlyprop.equalsIgnoreCase("True")){
				 CapturePage();
				 testFailure("validateTextMOFieldReadOnly Failed: Text Field is Readonly");
			 }
			 else{
				 CapturePage();
				 testFailure("validateTextMOFieldReadOnly Failed: Text Field is Editable");
			 }
		 }
		 info("Ending Function validateTextMOFieldReadOnly");
	 }
	 /************************************************************************************************************
	  * Function: validateTreeRowImageName
	  * Description: This function will validate the title of the image in a particular row in a tree
	  * Created By: Anusha Bonam
	  * Date: August 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *                      @param iIndex : index of the Tree starting from 0
								@param rowIndex: row index starting from 0 
								@param colIndex : column index starting from 0 (Generally 1)
								@param img:  name of the image

	  * Returns: 
	  *                      @return Nil
	  * Example: validateTreeRowImageName(0,1,1,"BuildInDefinition");
	  * **********************************************************************************************************
	  */
	 public void validateTreeRowImageName(@Arg("iIndex") int iIndex, @Arg("rowIndex") int rowIndex,@Arg("colIndex") int colIndex,@Arg("imgName") String imgName) throws Exception {
		 info("Starting:Function validateTreeRowImageName");
		 if(docIndex==null){
			 getDocIndex();
		 } 
		 boolean flag = false;
		 //getting the tree id 
		 DOMTable treeId = getTreeGrid(iIndex);
		 if(treeId!=null)  { 
			 info("Treegrid with index "+iIndex+" found");
			 //getting the rows				
			 List<DOMElement> rows = treeId.getElementsByTagName("tr");
			 int rowCount = treeId.getRowCount();
			 if((rowIndex<0)||(rowIndex>(rowCount-1)))
			 {
				 CapturePage();
				 testFailure("Row does not exist");
				 flag = true;
				 //return;
			 }

			 if((rowIndex>=0)&&(rowIndex < (rowCount))){
				 //get the particular row passed through rowindex
				 DOMElement row = rows.get(rowIndex);
				 //checking for the columns for that particular row
				 List<DOMElement> columns = row.getElementsByTagName("td");
				 if((colIndex<0)||(colIndex>(columns.size()-1)))
				 {
					 CapturePage();
					 testFailure("Column does not exist");
					 flag = true;
					 // return;
				 }
				 if((colIndex>=0)&&(colIndex < (columns.size()))){
					 DOMElement column = columns.get(colIndex);
					 //checking for the images present in that particular column
					 List<DOMElement> images  = column.getElementsByTagName("img");

					 if(images.size()>0) {
						 int imgIndex = (images.size()-1);
						 DOMElement img = images.get(imgIndex);
						 //info("found image...next is to chk title property");
						 String imgTitlePrprty=img.getAttribute("title");
						 info("imgTitlePrprty: "+imgTitlePrprty);
						 if((imgTitlePrprty!=null)&&(imgTitlePrprty.trim().equalsIgnoreCase(imgName.trim()))){
							 info("validateTreeRowImageName Passed: Image with Title " + imgTitlePrprty + " exists in the tree");
						 }
						 else {
							 CapturePage();	
							 testFailure("validateTreeRowImageName Failed: Image with Title " + imgTitlePrprty + " doesnot exists in the tree or the image does not have title property. Expected image title is : " + imgName);
						 }

					 }
					 else{
						 CapturePage();
						 testFailure("No images present");
					 }
				 }
			 }else{
				 CapturePage();
				 testFailure("No Row with row index "+rowIndex+" found");
			 }
		 }else{
			 CapturePage();
			 testFailure("Tree with index "+iIndex+" not found");
		 }
		 if(flag == true){
			 valCount = valCount+1;
			 //info("valCount in flag ="+valCount);
			 return;
		 }

		 valCount = valCount+1;
		 //info("valCount ="+ valCount);
		 info("Finished:Function validateTreeRowImageName ");
	 }

	 /************************************************************************************************************
	  * Function: validateVAExistsInGridCell
	  * Description: This function can be used to validate whether visual assist exist in particaulr cell of a grid.
	  * Created By: Rupa
	  * Date: September 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *          @param iIndex - index of the grid in the webpage starting from 0.
	  *          @param iRow - visible row index of the specified row.
	  *          @param sColName -Column Name that needs to be validated.
	  *          @param sExist - whether the visual assist exist or not i.e true/false.
	  * Returns:Nil 
	  * Example:      
	  * **********************************************************************************************************
	  */
	 public void validateVAExistsInGridCell(@Arg("iIndex") int iIndex,      @Arg("iRow") int iRow,@Arg("sColName")  String sColName ,@Arg("sExist") boolean sExist)throws Exception{
		 info("Starting:Function validateVAExistsInGridCell");
		 String iColIndex;
		 int  rowIndex,flag=0;
		 checkFrame();
		 String gridId = getGridObjReference(iIndex);
		 if(gridId!=null) {   
			 String[] output = web.document(e1Browser).executeJsFunction("getvisibleRowCount", gridId);
			 int rowCount = Integer.parseInt(output[0]);
			 if(iRow > rowCount){
				 iRow=iRow+1;

				 testFailure("Validating grid to row " +iRow + "and Grid only has "+rowCount +"  row");
				 CapturePage();    
				 valCount=valCount +1;

			 }
			 String colIndex=getColIndexForColName(gridId,sColName);
			 if(colIndex!=null){
				 rowIndex = getRowIndexForVisibleRow(gridId, iRow);
				 String[] alt = web.document(e1Browser).executeJsFunction("getGridImageAltProperty", gridId,""+rowIndex,colIndex);
				 for(int j=0;j<alt.length;j++)//assuming if a grid cell have more than one image
				 {
					 if(sExist==true)
					 {

						 if(alt[j].equalsIgnoreCase("Visual Assist (F2)")){ //Visual Assist (F2) alt property is common for all visual assist.
							 flag=1;    
						 }
					 } 
					 else if(sExist==false)
					 { 

						 if(!alt[j].equalsIgnoreCase("Visual Assist (F2)")){ 
							 flag=1;     
						 }     
					 }
				 }
				 if(flag==1) 
				 {
					 info("Passed: The Visual assist  validation is successful for  column  "+sColName );   
				 }
				 else
				 {
					 testFailure("Failed : The Visual assist validation  failed for column  "+sColName);
					 CapturePage(); 
				 }
			 }

			 else
			 {
				 testFailure("Failed to identify column "+sColName);
				 CapturePage();
			 } 
		 }

		 valCount=valCount+1;
		 info("Finished:Function validateVAExistsInGridCell");
	 }

	 //end copying

	 /****************************************************************************************************
	  * Function: getIEVersion
	  * Description: Returns current IE Version
	  * **************************************************************************************************
	  */
	 public String getIEVersion() throws Exception {
		 executeJSCode();
		 if(!bDB){
			 ieVersion=web.document(e1Browser).executeJsFunction("getInternetExplorerVersion");
		 }else{
			 ieVersion=web.document(sDBBrowser).executeJsFunction("getInternetExplorerVersion");
		 }
		 //info("IE Version="+ieVersion[0]);
		 return ieVersion[0];
	 }
	 /****************************************************************************************************
	  * Function: executeJSCode
	  * Description: To read Grid.js file and enable javascript function calls
	  * **************************************************************************************************
	  */
	 public void executeJSCode() throws Exception{
		 setErrorRecovery(BasicErrorRecovery.ERR_FILE_NOT_FOUND, ErrorRecoveryAction.Fail);
		 String RepPath=getScriptPackage().getRepositoryPath().toLowerCase();
		 /*if(RepPath.contains("functional")){
			 RepPath=RepPath.replace("\\functional", "\\automator");
		 }*/
		 //RepPath = "\\\\Den00bwk.us.oracle.com\\OATS_ToolsRepository\\CrossBrowserEOne";
		 RepPath="\\\\den00hrs.us.oracle.com\\OATS_Repository\\E1";
		 File jsFile=new File(RepPath+"\\Grid.js");


		 if(!jsFile.exists()){
			 System.out.println("file not found");
			 jsFile = new File("C:\\Grid.js");
		 }		
		 String jsCode = new String(utilities.getFileService().readBytesFromFile(jsFile));
		 if(!bDB){
			 web.document(e1Browser).executeJavaScript(jsCode);
		 } else{
			 web.document(sDBBrowser).executeJavaScript(jsCode);
		 }
	 }


	 public void run() throws Exception {

	 }
	 public void finish() throws Exception {
	 }

	 /**** These functions are added for flow builder**/
	 public void isElementExist(String sElementType, @Arg("Attribute Name")String sAttributeName, @Arg("Attribute Value")String sAttributeValue, @Arg("Element Name")String sElementName, String colName) throws Exception {
		 info("Starting:Function isElementExist ");
		 incrementValidationCount(1);
		 checkFrame();
		 String bro="";
		 if(isADF||isModalForm)
			 bro=e1Browser;
		 else
			 bro="/";

		 String elementType="";
		 boolean result=false;
		 sElementType=sElementType.trim();
		 elementType=getElementTag(sElementType);

		 sAttributeName=sAttributeName.trim();
		 sAttributeValue=sAttributeValue.trim();
		 sElementName=sElementName.trim();

		 info("Path="+(bro+"/web:"+elementType+"[@"+sAttributeName+"='"+sAttributeValue+"']")); 
		 DOMElement ele=web.element(bro+"/web:"+elementType+"[@"+sAttributeName+"='"+sAttributeValue+"']");

		 if(ele.exists())
		 {     
			 DOMElement pEle=ele;
			 String sTag="",isHidden="",isVisible="";
			 int i=0;
			 while(pEle!=null)
			 {
				 isVisible=pEle.getAttribute("style");
				 isVisible=isVisible.replaceAll(" ", "");
				 if(isVisible!=null&&isVisible.contains("display:none"))
				 {
					 //return false;
					 result=false;
					 int appender=checkColumnExists(colName);
					 if(appender==0){
						 datatable.getGlobalDatatable().addColumn("Global",colName,0);
					 }
					 datatable.getGlobalDatatable().setValue("Global",0,  colName, result+"");
					 return;
				 }
				 sTag=pEle.getTag();
				 if(sTag!=null&&sTag.equalsIgnoreCase("div"))
				 {     
					 break;
				 }
				 else
					 pEle=pEle.getParent();
			 }

		 }

		 if((ele!=null) && (ele.exists()))
		 {
			 info(sElementName+" "+sElementType+" with "+sAttributeName+" "+ sAttributeValue+" found on page");
			 //return true;
			 result=true;
		 }
		 else
		 {
			 info(sElementName+" "+sElementType+" with "+sAttributeName+" "+ sAttributeValue+" not found on page");
			 //return false;
			 result=false;
		 }
		 int appender=checkColumnExists(colName);
		 if(appender==0){
			 datatable.getGlobalDatatable().addColumn("Global",colName,0);
		 }
		 datatable.getGlobalDatatable().setValue("Global",0,  colName, result+"");

	 } 
	 public void outputHeaderText (@Arg("id") String id,@Arg("IsEditable") String isEditable,@Arg("sFldName")  String sFldName, String colName) throws Exception{
		 int appender=checkColumnExists(colName);
		 if(appender==0){
			 datatable.getGlobalDatatable().addColumn("Global",colName,0);
		 }
		 String tmpCol=outputHeaderText(id, isEditable, sFldName);
		 String tmpVal=(String)datatable.getGlobalDatatable().getValue("Global",0, tmpCol);
		 datatable.getGlobalDatatable().setValue("Global",0,  colName, tmpVal);	
		 datatable.getGlobalDatatable().deleteColumn("Global",tmpCol);
	 }
	 public void outputGridRowDupColData(@Arg("iIndex") int iIndex,@Arg("iRow") int iRow, @Arg("sParam") String sParam,@Arg("sAliases") String sAliases, String ColumnName) throws Exception {
		 int appender=checkColumnExists(ColumnName);
		 if(appender==0){
			 datatable.getGlobalDatatable().addColumn("Global",ColumnName,0);
		 }
		 String tmpCol=outputGridRowDupColData(iIndex, iRow, sParam, sAliases)[0];
		 String tmpVal=(String)datatable.getGlobalDatatable().getValue("Global",0, tmpCol);
		 datatable.getGlobalDatatable().setValue("Global",0,  ColumnName, tmpVal);	
		 datatable.getGlobalDatatable().deleteColumn("Global",tmpCol);
	 }
	 public void outputGridRowData(@Arg("iIndex") int iIndex, @Arg("iRow") int iRow, @Arg("sParam") String sParam, String ColumnName)throws Exception {
		 int appender=checkColumnExists(ColumnName);
		 if(appender==0){
			 datatable.getGlobalDatatable().addColumn("Global",ColumnName,0);
		 }
		 String tmpCol=outputGridRowData(iIndex, iRow, sParam)[0];
		 String tmpVal=(String)datatable.getGlobalDatatable().getValue("Global",0, tmpCol);
		 datatable.getGlobalDatatable().setValue("Global",0,  ColumnName, tmpVal);	
		 datatable.getGlobalDatatable().deleteColumn("Global",tmpCol);
	 }
	 public void outputGridRowBgColor(@Arg("iIndex") int iIndex, @Arg("iRow") int iRow,@Arg("sParam") String sParam, String colName) throws Exception {
		 int appender=checkColumnExists(colName);
		 if(appender==0){
			 datatable.getGlobalDatatable().addColumn("Global",colName,0);
		 }
		 String tmpCol=outputGridRowBgColor(iIndex,iRow, sParam)[0];
		 String tmpVal=(String)datatable.getGlobalDatatable().getValue("Global",0, tmpCol);			 
		 datatable.getGlobalDatatable().setValue("Global",0,  colName, tmpVal);	
		 datatable.getGlobalDatatable().deleteColumn("Global",tmpCol);
	 }
	 public void isError(String colName) throws Exception{
		 int appender=checkColumnExists(colName);
		 if(appender==0){
			 datatable.getGlobalDatatable().addColumn("Global",colName,0);
		 }
		 boolean tmpVal=(Boolean)isError();		 
		 datatable.getGlobalDatatable().setValue("Global",0,  colName, tmpVal);	
	 }
	 public void isWarning(String colName) throws Exception{
		 int appender=checkColumnExists(colName);
		 if(appender==0){
			 datatable.getGlobalDatatable().addColumn("Global",colName,0);
		 }
		 boolean tmpVal=(Boolean)isWarning();		 
		 datatable.getGlobalDatatable().setValue("Global",0,  colName, tmpVal);	
	 }
	 public void getABNumber(String colName) throws Exception{
		 int appender=checkColumnExists(colName);
		 if(appender==0){
			 datatable.getGlobalDatatable().addColumn("Global",colName,0);
		 }
		 String tmpVal=(String)getABNumber();		 
		 datatable.getGlobalDatatable().setValue("Global",0,  colName, tmpVal);	
	 }
	 public void getActiveXText(@Arg("iIndex") int iIndex, String colName) throws Exception {
		 int appender=checkColumnExists(colName);
		 if(appender==0){
			 datatable.getGlobalDatatable().addColumn("Global",colName,0);
		 }
		 String tmpVal=(String)getActiveXText(iIndex);		 
		 datatable.getGlobalDatatable().setValue("Global",0,  colName, tmpVal);	
	 }
	 public void getUserID(String colName) throws Exception{
		 int appender=checkColumnExists(colName);
		 if(appender==0){
			 datatable.getGlobalDatatable().addColumn("Global",colName,0);
		 }
		 String tmpVal=(String)getUserID();		 
		 datatable.getGlobalDatatable().setValue("Global",0,  colName, tmpVal);	
	 }
	 public void getGridRowCountByIndex(@Arg("iIndex") int iIndex, String colName) throws Exception { 
		 int appender=checkColumnExists(colName);
		 if(appender==0){
			 datatable.getGlobalDatatable().addColumn("Global",colName,0);
		 }
		 int tmpVal=(Integer)getGridRowCountByIndex(iIndex);	 
		 datatable.getGlobalDatatable().setValue("Global",0,  colName, tmpVal);	
	 }
	 public void getGridRowNo(@Arg("iIndex") int iIndex,    @Arg("sFieldName") String sFieldName,@Arg("sValue") String sValue, String colName) throws Exception { 
		 int appender=checkColumnExists(colName);
		 if(appender==0){
			 datatable.getGlobalDatatable().addColumn("Global",colName,0);
		 }
		 int tmpVal=(Integer)getGridRowNo(iIndex, sFieldName, sValue);  
		 datatable.getGlobalDatatable().setValue("Global",0,  colName, tmpVal); 
	 }
	 public void getDate(@Arg("sDateFormat") String sDateFormat,@Arg("mCount") int mCount,@Arg("dCount") int dCount,@Arg("yCount") int yCount,String colName ) throws Exception {
		 int appender=checkColumnExists(colName);
		 if(appender==0){
			 datatable.getGlobalDatatable().addColumn("Global",colName,0);
		 }
		 String tmpVal=(String)getDate(sDateFormat, mCount, dCount, yCount);	 
		 datatable.getGlobalDatatable().setValue("Global",0,  colName, tmpVal);	
	 }
	 public void createDate(@Arg("sDateFormat") String sDateFormat, int day, int month, int year, String colName ) throws Exception {
		 int appender=checkColumnExists(colName);
		 if(appender==0){
			 datatable.getGlobalDatatable().addColumn("Global",colName,0);
		 }
		 String tmpVal=(String)createDate(sDateFormat, day, month, year); 
		 datatable.getGlobalDatatable().setValue("Global",0,  colName, tmpVal);
	 }
	 public void getWorkingDay(String sDateFormat,int workingdays, String colName) throws Exception {
		 int appender=checkColumnExists(colName);
		 if(appender==0){
			 datatable.getGlobalDatatable().addColumn("Global",colName,0);
		 }
		 String tmpVal=(String)getWorkingDay(sDateFormat, workingdays);	 
		 datatable.getGlobalDatatable().setValue("Global",0,  colName, tmpVal);	
	 }
	 public void getTreeRowCount(@Arg("iIndex") int iIndex, String colName) throws Exception {
		 int appender=checkColumnExists(colName);
		 if(appender==0){
			 datatable.getGlobalDatatable().addColumn("Global",colName,0);
		 }
		 int tmpVal=(Integer)getTreeRowCount(iIndex);	 
		 datatable.getGlobalDatatable().setValue("Global",0,  colName, tmpVal);	
	 }

	 /************************************************************************************************************
	  * Function: isRowSelected
	  * Description: This function will retrn true or false depending on the selected/deselected state of the specified grid row
	  * Created By: Ravi
	  * Date: April 2011
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param iIndex :Iindex of the grid in the webpage starting from 0.
	  * 		@param iRow :visible row index starting from 0
	  * Returns: 
	  * 		@return false for not selected, true for selected row
	  * **********************************************************************************************************
	  */
	 public boolean isRowSelected(@Arg("iIndex") int iIndex,     @Arg("iRow") int iRow) throws Exception {
		 info("Starting:Function isRowSelected");
		 String gridId;

		 int rowIndex, rowCount;
		 checkFrame();
		 gridId = getGridObjReference(iIndex);
		 if (gridId!=null) {
			 //info(gridId);
			 rowCount=getGridRowCountByIndex(iIndex);
			 if((iRow>=0) && (iRow<rowCount)){

				 rowIndex = getRowIndexForVisibleRow(gridId, iRow);
				 //info(""+rowIndex);

				 web.document(e1Browser).executeJsFunction("ScrollToExtremeLeft",gridId);
				 Thread.sleep(5000);
				 for(int x=0;x<100;x++){
					 String[] checkBoxView=web.document(e1Browser).executeJsFunction("scrollCheckBoxIntoView", gridId,""+rowIndex,""+x);
					 
					 info("checkBoxView:"+checkBoxView[0]);
					 if(checkBoxView[0].equalsIgnoreCase("true"))

						 break;
					 else if(checkBoxView[0].equalsIgnoreCase("false"))
					 {
						 Thread.sleep(1000);
						 continue;
					 }
					 else
						 break;
				 }
				 
				 String[] status=web.document(e1Browser).executeJsFunction("IsRowSelected", gridId,Integer.toString(rowIndex));
				 info("1:"+status[0]+" 2:"+status[1]);
				 String actStatus=null;
				 if ((browser.getBrowser() instanceof FireFoxBrowser)||(browser.getBrowser() instanceof ChromeBrowser) || (browser.getBrowser() instanceof MicrosoftEdgeBrowser)) 
					 actStatus=status[1];
				 else
					 actStatus=status[0];

				 info("actStatus:"+actStatus);
				 if((actStatus).equalsIgnoreCase("true")){
					 info("PASSED: Row is selected");
					 beginStep("[isRowSelected] Passed:Row is selected");
					 {
						 getStepResult().isPassed();
					 }endStep();
					 info("Finished:Function isRowSelected "); 
					 return true;
				 }else{
					 info("Failed: Row is not selected");
					 info("Finished:Function isRowSelected "); 
					 return false;
				 }

			 }else{
				 getLogger().error("Failed: Grid only has " + rowCount + " rows. Unable to validate row "+iRow);
				 web.window(e1BrowserWindow).capturePage();
				 
				 testFailure("[isRowSelected] Failed:Grid only has " + rowCount + " rows. Unable to validate row "+iRow);
				 info("Finished:Function isRowSelected "); 
				 return false;
			 }

		 }else{
			 info("Finished:Function isRowSelected ");
			 return false;
		 }
	 }
	 public boolean IsRowSelected(int iIndex,	 int iRow) throws Exception {
		 return isRowSelected(iIndex, iRow);
	 }
	 public void isRowSelected(int iIndex,	int iRow, String colName) throws Exception {
		 int appender=checkColumnExists(colName);
		 if(appender==0){
			 datatable.getGlobalDatatable().addColumn("Global",colName,0);
		 }
		 boolean tmpVal=(Boolean)isRowSelected(iIndex,iRow);		 
		 datatable.getGlobalDatatable().setValue("Global",0,  colName, tmpVal);
	 }

	 /******************************************************************************************************************/
	 public void getLPadData(@Arg("sData") String sstring,@Arg("padChar") char padChar,@Arg("tLength") int tLength,@Arg("ColName") String colName) throws Exception{
		 int appender=checkColumnExists(colName);
		 if(appender==0){
			 datatable.getGlobalDatatable().addColumn("Global",colName,0);
		 }
		 String tmpVal=(String)getLPadData(sstring, padChar, tLength);		 
		 datatable.getGlobalDatatable().setValue("Global",0,  colName, tmpVal);	
	 }


	 public void getTreeRowNo(int iIndex, int colIndex, String sValue, String colName) throws Exception{
		 int appender=checkColumnExists(colName);
		 if(appender==0){
			 datatable.getGlobalDatatable().addColumn("Global",colName,0);
		 }
		 String tmpVal=""+getTreeRowNo(iIndex, colIndex, sValue);	 
		 datatable.getGlobalDatatable().setValue("Global",0,  colName, tmpVal);	
	 }


	 public void isActiveXText(@Arg("iIndex") int iIndex, @Arg("sGivenText") String sGivenText, @Arg("colName")String colName) throws Exception{
		 int appender=checkColumnExists(colName);
		 if(appender==0){
			 datatable.getGlobalDatatable().addColumn("Global",colName,0);
		 }
		 String tmpVal=""+isActiveXText(iIndex, sGivenText); 
		 datatable.getGlobalDatatable().setValue("Global",0,  colName, tmpVal);	
	 }

	 public void isActiveXTextContain(@Arg("iIndex") int iIndex, @Arg("sGivenText") String sGivenText, @Arg("colName")String colName) throws Exception{
		 int appender=checkColumnExists(colName);
		 if(appender==0){
			 datatable.getGlobalDatatable().addColumn("Global",colName,0);
		 }
		 String tmpVal=""+isActiveXTextContain(iIndex, sGivenText);
		 datatable.getGlobalDatatable().setValue("Global",0,  colName, tmpVal);	
	 }

	 public void validateHeaderText(String id, String fldName,String sVal) throws Exception{
		 validateHeaderText(id, "N", fldName, sVal);
	 }
	 /************************************************************************************************************
		 * Function: validateRightJustifiedText	 
		 * Description: This function validates whether the data in text box is Right Justified or not.		
		 * Created By: Spurthi 
		 * Input Parameters: 
		 *  @param id : HTML id of the text field	 
		 *  @param sVal :  Value in the text field
		 * 	@return Nil
		 *  Example: validateRightJustifiedText("C0_187", "M30");
		 * **********************************************************************************************************
		 */
		public void validateRightJustifiedText (@Arg("id")String id, String sVal) throws Exception{		
			info("Starting:Function validateRightJustifiedText ");
			checkFrame();
			if (web.exists(e1Browser+"/web:input_text[@id='"+id+"']", 5)){
				int maxLength = -1;	
				String objVal;		
				objVal = web.textBox(e1Browser+"/web:input_text[@id='"+id+"']").getAttribute("value");
				maxLength =Integer.parseInt(web.textBox(e1Browser+"/web:input_text[@id='"+id+"']").getAttribute("maxlength"));
				boolean flag = true;	
				if (sBrowser.equalsIgnoreCase("chrome")){
					 	DOMDocument document = web.document(e1Browser);
						String curVal[]=null;					
						document.executeJavaScript("function getCurrentValue(){return document.getElementById('"+id+"').value;}");
						curVal = web.document(e1Browser).executeJsFunction("getCurrentValue");   
						objVal=curVal[0];
				 }
				if(objVal.contains(sVal)){			
					for(int i=0;i<=maxLength-sVal.length()-1;i++){
						
						if(!(objVal.charAt(i)==' ')){
							flag = false;
							break;						
						}
					}			
						if(flag){
							info("validateRightJustifiedText PASSED : The data is Right Justified");
						}else{
							CapturePage();
							reportFailure("[validateRightJustifiedText] FAILED : The data "+sVal+" Left Justified");
						}
				}else
				{
					CapturePage();
					reportFailure("[validateRightJustifiedText] FAILED : The text "+sVal+" is not present in the text field with id "+id);
				}
				
			}else {     			
				CapturePage();
				reportFailure("[validateRightJustifiedText] FAILED : The text field with id : "+id+" is not present on the displayed page");
			}   	
			incrementValidationCount(1);		
			info("Finished:Function validateRightJustifiedText "); 	
		}
		/************************************************************************************************************
		 * Function: validateHeaderToolTipText  
		 * Description: This function will validates the tool tip Text for the element whose id is mentioned
		 * Created By: Spurthi 	
		 * Input Parameters: 
		 * 		@param sElementType :Type of element (image, button, icon, text, link, hyperlink, radio, checkbox, password )
		 *      @param id - id of the element having Tool tip 
		 *      @param toolTipText  - Tool tip text that needs to be validated .              		
		 * Returns: 
		 * 		@return Nil
		 *	   Example: validateHeaderToolTipText("image","C0_120", "Tool Tip: Blast.gif, Clickable, Maintain Aspect Ratio");
		 * **********************************************************************************************************
		 */
		public void validateHeaderToolTipText(@Arg("Type")String sElementType,@Arg("id")String id, @Arg("toolTipText")String toolTipText) throws Exception
		{
			info("Starting:Function validateHeaderToolTipText");	
			
			sElementType=getElementTag(sElementType.trim());
			DOMElement ele=web.element("//web:"+sElementType+"[@id='"+id+"']");
			if(ele!=null && ele.exists())
			{	String toolTip =ele.getAttribute("title");
			if(toolTip!=null)
			{				
				if(toolTip.trim().equalsIgnoreCase(toolTipText.trim())){
					info("validateHeaderToolTipText PASSED : The validation of tool tip text is successful");
				}else{
					reportFailure("validateHeaderToolTipText FAILED :The validation of tool tip text failed - expected is "+toolTipText +" and actual is "+toolTip);
					CapturePage();
				}			
			}else{			
				reportFailure("validateHeaderToolTipText FAILED :Tool tip doesnot exist for the element with id "+id);
				CapturePage();						
			}
			}else{
				reportFailure("validateHeaderToolTipText FAILED : element with id "+id+" does not exist");
				CapturePage();
			}
			incrementValidationCount(1);
			info("Finished:Function validateHeaderToolTipText");
		}
		
		/************************************************************************************************************
		 * Function: validateSortedWebListItems
		 * Description: This Function validates whether the items/options in the specified WebList are in sorted order or not.	 
		 * Created By: Spurthi 
		 * Input Parameters: 
		 * 		@param sId : Id of the WebList to be validated		
		 * Returns: 
		 * 		@return Nil
		 * Example: validateSortedWebListItems("C0_131");
		 * **********************************************************************************************************
		 */
		public void validateSortedWebListItems(@Arg("Id") String sId) throws Exception { 
			info("Starting:Function validateSortedWebListItems ");
			checkFrame();	
			if(web.exists(e1Browser+"/web:select[(@id='"+sId+"')]"))
			{
				List<DOMElement> allItems=web.selectBox(e1Browser+"/web:select[(@id='"+sId+"')]").getOptions();
				List original = new ArrayList(allItems.size());
				for(int i=1;i<allItems.size();i++){
					original.add(allItems.get(i).getAttribute("text"));
				}		
				List sortedcopy = new ArrayList(original);
				Collections.sort(sortedcopy);		

				if(original.equals(sortedcopy)){
					info("[validateSortedWebListItems] Passed: Items in Weblist with Id "+sId+" is sorted");
				}else{
					CapturePage();
					reportFailure("[validateSortedWebListItems] Passed: Items in Weblist with Id "+sId+" is Not sorted");					
				}
			}
			else{
				CapturePage();
				reportFailure("[validateSortedWebListItems] Failed: The weblist with Id "+sId+" is not present in the displayed page");			
				}
			incrementValidationCount(1);
			info("Finished:Function validateSortedWebListItems "); 	
		}
		/************************************************************************************************************
		  * Function: validateCapturedDataByCondition
		  * Description: Used to Validate if captured integer data in "C:\\Capture.csv" meets the specified arithmatic condition .Captured file(Capture.csv) should consist of only one column.
		  * Created By: Spurthi P
		  * Date: Aug 2017
		  * Input Parameters: 
		  * 		@param operator: operator : > (Greater than) or < (Less than) or  == (Equal to) or  >= (Greater than or equal to) or  <= (Less than or Equal to).
		  * 		@param value: Value to be compared.
		  * Returns: 
		  *  		@return Nil
		  * Example: 
		  *			captureGridData("0", "all", "true", "2"); - To capture column 2 data.	  
		  *  		validateCapturedDataByCondition(">=", "4");
		  * **********************************************************************************************************
		  */
		public void validateCapturedDataByCondition ( String operator, int value)throws Exception{
			info("Starting:Function validateCapturedDataByCondition ");
			boolean flag = true;
			ScriptEngineManager mgr = new ScriptEngineManager();
			ScriptEngine engine = new ScriptEngineManager(null).getEngineByName("JavaScript");
	        String osName = System.getProperty("os.name");
			String fileLoc = null;
			
			if(osName.equalsIgnoreCase("Windows 8.1") || osName.equalsIgnoreCase("Windows 10") || osName.equalsIgnoreCase("Windows 10.0")){
				info("OS Name :" +osName);
				info(sBrowser);
               fileLoc = "\\\\den00bwk.us.oracle.com\\OATS_ToolsRepository\\OATS_ToolsRepository_"+sBrowser+"\\ScriptResources\\Capture.csv";
			}
			else{
				fileLoc = "C:\\Capture.csv";
			}
			File f1 = new File(fileLoc);
			BufferedReader reader1 = new BufferedReader(new FileReader(f1));
			String line1 = null;
			int count=0;
			line1 = reader1.readLine();
			while((line1 = reader1.readLine()) != null){		
			String exp = line1+operator+value;		
			  if(!((Boolean)engine.eval(exp)).booleanValue()){
				  flag = false;
				  CapturePage();
				testFailure("ERROR validateCapturedDataByCondition Failed: "+line1+" !"+operator+value);
			 }
			count++;
			}		
			if(flag){			
				info("validateCapturedDataByCondition Passed: Captured data meets the expected condition ");
			}else{
				info("validateCapturedDataByCondition Failed: Captured data does not meet the expected condition ");
			}
			incrementValidationCount(count);
			info("Finished:Function validateCapturedDataByCondition "); 
		}

		/************************************************************************************************************
		  * Function: validateCapturedDataOrder
		  * Description: Used to Validate if captured data(Integer/String) in "C:\\Capture.csv" is in Ascending or descending order . Captured file(Capture.csv) should consist of only one column.
		  * Created By: Spurthi P
		  * Date: Aug 2017
		  * Input Parameters: 
		  * 		@param operator: Order : 'Asc' for  Ascending order and 'Dsc' for Descending order.
		  * Returns: 
		  *  		@return Nil
		  * Example: 
		  *			captureGridData("0", "all", "true", "2"); - To capture column 2 data.
		  *			validateCapturedDataOrder("Asc"); - to validate if captured data is in order.
		  * **********************************************************************************************************
		  */
		public void validateCapturedDataOrder (String Order)throws Exception{
			info("Starting:Function validateCapturedDataOrder "); 		
			
			String osName = System.getProperty("os.name");
			String fileLoc = null;
			
			try{
				if(osName.equalsIgnoreCase("Windows 8.1") || osName.equalsIgnoreCase("Windows 10") || osName.equalsIgnoreCase("Windows 10.0")){
					info("OS Name :" +osName);
					info(sBrowser);
	                fileLoc = "\\\\den00bwk.us.oracle.com\\OATS_ToolsRepository\\OATS_ToolsRepository_"+sBrowser+"\\ScriptResources\\Capture.csv";
				}
				else{
					fileLoc = "C:\\Capture.csv";
				}
			File f1 = new File(fileLoc);
			
			//to get the type of contents in Capture.csv
			BufferedReader reader = new BufferedReader(new FileReader(f1));
			String line = null;
			reader.readLine();
			line = reader.readLine();
			
			List x1,x2;
			BufferedReader reader1 = new BufferedReader(new FileReader(f1));
			String line1 = null;
			int count=0;
			line1 = reader1.readLine();
			
			//check for integer data
			if(line.matches("\\d+")){
				x1 = new ArrayList<Integer>();			
				while((line1 = reader1.readLine()) != null){
					x1.add(Integer.parseInt(line1));
					count++;
				}
				x2 = new ArrayList<Integer>(x1);		
			//check for string data
			}else if(line.matches("^[a-zA-Z0-9]*$")){
				x1 = new ArrayList<String>();
				while((line1 = reader1.readLine()) != null){
					x1.add(line1);
					count++;
				}
				x2 = new ArrayList<String>(x1);	
			}else{
				x1 = null;
				x2 = null;
			}		
			
			if(Order.equalsIgnoreCase("Asc")){
				Collections.sort(x1);	
			}else if(Order.equalsIgnoreCase("Dsc")){
				Collections.sort(x1);	
				Collections.reverse(x1);
			}
			if(x1.equals(x2) && !x1.isEmpty() && !x2.isEmpty()){
				info(" validateCapturedDataOrder Passed : Captured data is in "+Order+" order"); 
			}else{
				info(" validateCapturedDataOrder Failed : Captured data is NOT in "+Order+" order");
			}
			
			incrementValidationCount(count);
			reader.close();
			reader1.close();
			}catch(Exception e){
				info("validateCapturedDataOrder Failed : Unable to read C:\\Capture.csv file content");
				e.printStackTrace();
			}
			info("Finished:Function validateCapturedDataOrder "); 
		
		}

	 /********************************************************************************************/
	 /************************************************************************************************************
	  * Function: clickDataItem
	  * Description: Used to click on data item present at a particular index in a particular group in  particular chart
	  * Created By: Sravan
	  * Date: October 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param chartIndex :Chart Index starting from 0 
	  * 		@param groupIndex :Group Index starting from 0
	  * 		@param seriesIndex :Series Index starting from 0
	  * Returns: 
	  * 		@return 
	  * **********************************************************************************************************
	  */
	 public void clickDataItem(int chartIndex, int groupIndex, int seriesIndex) throws Exception{
		 info("Start of function clickDataItem");
		 JETChart chart=getJetChart(chartIndex);
		 try{
			 chart.selectDataItem(seriesIndex, groupIndex);

		 }catch (oracle.oats.scripting.modules.webdom.common.api.exception.WaitForPageTimeoutException e) {
			 testFailure("Data Item with seriesindex "+seriesIndex+" group index "+groupIndex+" not exists");
		 }
		 info("End of function clickDataItem");
	 }

	 /************************************************************************************************************
	  * Function: clickJETButton
	  * Description: Used to click on a button in the chart
	  * Created By: Sravan
	  * Date: October 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param chartIndex :Chart Index starting from 0 
	  * 		@param ButtonName :Button name
	  * Returns: 
	  * 		@return 
	  * **********************************************************************************************************
	  */
	 public void clickJETButton(int chartIndex, String ButtonName) throws Exception{
		 info("Start of function clickJETButton");
		 JETButton MenuButton=jet.button("//web:JETButton[@title='"+ButtonName+"']["+chartIndex+"]");
		 if((MenuButton!=null)&&(MenuButton.exists())){
			 MenuButton.focus();
			 MenuButton.click();
			 syncFrame();
			 info(ButtonName+" button found clicked");
		 }else{
			 CapturePage();
			 testFailure(ButtonName+" Button not found for Chart with index "+chartIndex);
		 }
		 info("End of function clickJETButton");
	 }

	 /************************************************************************************************************
	  * Function: clickSpringBoardElement
	  * Description: This function clicks on the specified Spring Board item
	  * Created By: Sravan
	  * Modified By: Ghulam Quadir
	  * Date: October 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *         @param ItemName :Spring Board Item name
	  *         
	  * Returns: 
	  *         @return null
	  * **********************************************************************************************************
	  */
	 public void clickSpringBoardElement(String ItemName) throws Exception{
		 info("Starting:Function clickSpringBoardElement ");
		 if (docIndex == null) {
			 getDocIndex();
		 }
		 DOMElement ele=null;
		 boolean isHidden=true;
		 int i=0;
		 while(web.exists("//web:span[@text='"+ItemName+"']["+i+"]"))
		 {
			 ele=web.element("//web:span[@text='"+ItemName+"']["+i+"]");
			 i++;
			 isHidden=isElementHidden(ele);
			 info("isHidden="+isHidden);
			 if(!isHidden){
				 String parentDivClass=ele.getParent().getClassName();
				 if((parentDivClass!=null) && ((parentDivClass.equals("landingPageDisplayTextDiv"))||(parentDivClass.equals("springBoardDisplayTextDiv")))){
					 isHidden=false;
					 break;
				 }else{
					 isHidden=true;
				 }
			 }
		 }
		 if(!isHidden){
			 ele.focus();
			 ele.click();
			 syncFrame();
			 syncFrame();
			 info("PASSED : "+ItemName+" from SpringBoard Found and Clicked");
		 }else  {
			 testFailure("FAILED : "+ItemName+" from SpringBoard NOT Found");
			 CapturePage();
		 }
		 info("End : Function clickSpringBoardElement ");
	 }

	 /************************************************************************************************************
	  * Function: clickWatchlistTab
	  * Description: This function clicks on the specified tab on the watchlist.
	  * Created By: Yashin
	  * Date: October 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *         @param sTab :Watchlist Tab Name
	  *         
	  * Returns: 
	  *         @return null
	  * **********************************************************************************************************
	  */
	 public void clickWatchlistTab(String sTab) throws Exception{
		 info("Starting function clickWatchlistTab");
		 String index="";
		 if(sTab.trim().equalsIgnoreCase("All"))
		 {
			 index="0";
		 }
		 else if(sTab.trim().equalsIgnoreCase("Matches"))
		 {
			 index="1";
		 }
		 else if(sTab.trim().equalsIgnoreCase("Warning"))
		 {
			 index="2";
		 }
		 else if(sTab.trim().equalsIgnoreCase("Critical"))
		 {
			 index="3";
		 }
		 else
		 {
			 testFailure("clickWatchlistTab failed:Tab "+sTab+" not found.");
			 CapturePage();
			 return;
		 }
		 String path="/web:window[@index='0']/web:document[@index='12']/web:a[@index='"+index+"']";
		 if(web.link(path).exists())
		 {
			 web.link(path).focus();
			 web.link(path).click();
			 info("clickWatchListTab passed:"+sTab+" found and clicked");
		 }
		 else
		 {
			 testFailure("clickWatchlistTab failed:Tab "+sTab+" not found.");
			 CapturePage();
		 }
		 info("End of function clickWatchlistTab");
	 }

	 /************************************************************************************************************
	  * Function: clickWatchListElement
	  * Description: This function clicks on the specified Watchlist item
	  * Created By: Sravan
	  * Date: October 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *         @param watchListItem :Watch List Item name
	  *         
	  * Returns: 
	  *         @return null
	  * **********************************************************************************************************
	  */
	 public void clickWatchListElement(String watchListItem) throws Exception{
		 info("Starting:Function clickWatchListElement ");
		 if (docIndex == null) {
			 getDocIndex();
		 }	 
		 //DOMElement ele=web.element("//web:div[@className='watchlistDisplayTextDiv']/web:span[@text='"+watchListItem+"']");
		 DOMElement ele=web.element("//web:span[@text='"+watchListItem+"']");
		 boolean isHidden=isElementHidden(ele);
		 //System.out.println(isHidden);
		 if(!isHidden){
			 ele.focus();
			 ele.click();
			 syncFrame();
			 info("PASSED : Watchlist Item "+watchListItem+" Found and Clicked");
		 }else  {
			 testFailure("FAILED : Watchlist Item "+watchListItem+" NOT Found");
			 CapturePage();
		 }
		 info("End : Function clickWatchListElement ");
	 }

	 /****************************************************************************************************
	  * Function: formatValue
	  * Description: format the value with given decimal location and save it to data table. Based on No of digits
	  *				 it will convert into respective K,M,G,T,P,E formats
	  * Created By: Varma
	  * Date: March 2017
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param fldName :Field Name with which column need to be added.
	  * 		@param value :value you want to format. 
	  *			@param decimalLocation :No of digits required after decimal.
	  * **************************************************************************************************
	  */
	 public void formatValue(String value, int decimalLocation, String fldName)throws Exception{
		 String fValue = null,decPoint = "";
		 boolean flag = false;
		 String final_value=null;
		 String val = value;
		 info("Value intered : "+val);
		 if(val.contains("-")){
			 flag = true;
			 val = val.replace("-","");			
		 }		
		 Double d = Double.parseDouble(val);


		 if((d >= 0)&&(d <= 1000)){	 			
			 fValue = d+"";
			 final_value = "";
		 }else if((d > 1000)&&(d < 1000000)){				
			 fValue = (d/1000)+"";
			 final_value = "K";
		 }else if((d >= 1000000)&&(d < 1000000000)){				
			 fValue=((d/1000000))+"";
			 final_value = "M";

		 }else if((d >= 1000000000)&&(d < 1000000000000.00)){
			 fValue=(d/1000000000)+"";
			 final_value = "G";

		 }else if((d >= 1000000000000.00)&&(d < 1000000000000000.0000)){				
			 fValue=(d/1000000000000.00)+"";
			 final_value = "T";
		 }else if((d >= 1000000000000000.0000)&&(d < 1000000000000000000.0000)){				
			 fValue=(d/1000000000000000.0000)+"";
			 final_value = "P";
		 }else if((d >= 1000000000000000000.0000)&&(d < 1000000000000000000000.0000)){				
			 fValue=(d/1000000000000000000.0000)+"";
			 final_value = "E";

		 }
		 if(decimalLocation==0){
			 fValue = fValue.replace(".", "DOT");
			 fValue = fValue.split("DOT")[0]+final_value;
			 info("Final formatted value="+fValue);
			 fldName = fldName.replaceAll(" ", "");
			 String newFldname = fldName;
			 datatable.addColumn("Global",newFldname.trim(),0);
			 datatable.setValue("Global", 0, newFldname.trim(),fValue);
			 info("Column "+newFldname.trim()+" created and value set : "+fValue);
			 return;
		 }

		 for(int i = 0; i<decimalLocation;i++){
			 decPoint =decPoint+"0";
		 }	
		 DecimalFormat df = new DecimalFormat("0."+decPoint);
		 fValue = df.format(Double.parseDouble(fValue))+final_value;
		 if(flag){
			 fValue ="-"+fValue;
		 }
		 /*if(value.equals("0")){
					fValue = "0"+fValue;
				}*/
		 info("Final formatted value="+fValue);

		 fldName = fldName.replaceAll(" ", "");
		 String newFldname = fldName;

		 datatable.getGlobalDatatable().addColumn("Global",newFldname.trim(),0);
		 datatable.getGlobalDatatable().setValue("Global", 0, newFldname.trim(),fValue);
		 info("Column "+newFldname.trim()+" created and value set : "+fValue);

	 }
	 /************************************************************************************************************
	  * Function: getChartHoverText
	  * Description: Used to get the tool tip hover text(help) form the chart specified by index and store in the datatable.
	  * Created By: Sunil
	  * Date: Nov 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param chartIndex :Chart Index starting from 0 
	  * 		@param colName : Name of the column in datatable.
	  * Returns: *********************************************************************************************************
	  */
	 public void getChartHoverText( @Arg("chartIndex") int chartIndex, @Arg("colName") String colName) throws Exception{
		 checkFrame();
		 String helpTxt = "";
		 DOMElement chartTitleElem=web.element("//web:span[@id='chartTitle']["+chartIndex+"]");
		 if((chartTitleElem!=null)&& (chartTitleElem.exists())){
			 DOMElement toolTipText=web.element("//web:span[@id='startDrawerHoverText']["+chartIndex+"]");
			 if((toolTipText!=null)&& (toolTipText.exists())){
				 helpTxt = toolTipText.getDisplayText();
				 if(helpTxt.contains("Application")){
					 helpTxt = helpTxt.replace("Application: ", "");
					 helpTxt = helpTxt.replace("Form: ", "");	
					 helpTxt = helpTxt.replace("\n", "|").replace("\r", "");
				 }else if(helpTxt.contains("Object")){
					 helpTxt = helpTxt.replace("Object: ", "");				
				 }
				 info("Tool tip hover text : "+helpTxt);
				 int appender=checkColumnExists(colName);
				 if(appender==0){
					 datatable.getGlobalDatatable().addColumn("Global",colName,0);
				 }
				 datatable.getGlobalDatatable().setValue("Global",0,  colName, helpTxt);	
			 }
			 else{
				 CapturePage();
				 testFailure("Failed : Tool tip hover text is not present.");
			 }
		 }else{
			 CapturePage();
			 testFailure("Chart with Index "+chartIndex+" not found");
		 }
	 }
	 /************************************************************************************************************
	  * Function: getGridRowNoForMulCol  
	  * Description: This function returns the row index starting from 0, where the specified search criterion meets, else return -1
	  * Created By: Varma
	  * Date: March 2017
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *      @param iIndex - index of the grid in the webpage starting from 0,
	  *      @param sFieldName -  column header of the cell
	  *      @param colName - colName to be added in datatable to store rowindex.   
	  * Returns: 
	  *      @return The matched row index (starting from 0) or -1 if no matching row exists
	  * **********************************************************************************************************
	  */
	 public void getGridRowNoForMulCol(int iIndex,    String sFieldNames, String colName) throws Exception { 				
		 int appender=checkColumnExists(colName);
		 if(appender==0){
			 datatable.getGlobalDatatable().addColumn("Global",colName,0);
		 }
		 //String sFieldNames=sFieldName+"="+sValue;
		 String tmpVal= ""+getGridRowNo(iIndex,sFieldNames);		 
		 datatable.getGlobalDatatable().setValue("Global",0,  colName, tmpVal); 

	 }

	 /************************************************************************************************************
	  * Function: getJetChart
	  * Description: to get chart object with given index
	  * Created By: Sravan
	  * Date: October 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param chartIndex :Chart Index starting from 0 
	  * Returns: 
	  * 		@return chart Object
	  * **********************************************************************************************************
	  */
	 public JETChart getJetChart(int chartIndex) throws Exception{
		 JETChart chart=jet.chart("//web:JETChart[@id='chart']["+chartIndex+"]");
		 if(chart!=null&& chart.exists()){
			 return chart;
		 }else{
			 CapturePage();
			 testFailure("Chart with Index "+chartIndex+" not found");
			 return null;
		 }
	 }

	 /************************************************************************************************************
	  * Function: getSeriesName
	  * Description: used to get Series name corresponding to series index
	  * Created By: Yashin
	  * Date: October 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param chartIndex :Chart Index starting from 0 
	  * 		@param seriesIndex :Series Index starting from 0
	  * Returns: 
	  * 		@return Series Name
	  * **********************************************************************************************************
	  */
	 public String getSeriesName(int chartIndex,int seriesIndex) throws Exception{

		 String seriesName=null;
		 JETChart chart=getJetChart(chartIndex);
		 List<String> seriesNames=chart.getSeriesNames();
		 seriesName=seriesNames.get(seriesIndex);
		 return seriesName;

	 }

	 /************************************************************************************************************
	  * Function: getValueFromToolTip
	  * Description: Called internally from getDataItemAttribute function, if it is unable to get any values directly. 
	  *               This function instead gets tooltip value and extracts required attribute value from there.
	  * Created By: Yashin
	  * Date: November 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *         @param chartIndex :Chart Index starting from 0 
	  *         @param groupIndex :Group Index starting from 0
	  *         @param seriesIndex :Series Index starting from 0
	  *         @param attributeName :Attribute name (group/value/x/y/z)
	  *         
	  * Returns: 
	  *         @returns value of the attribute captured 
	  * **********************************************************************************************************
	  */
	 public String getValueFromToolTip(int chartIndex, int groupIndex, int seriesIndex, String attributeName)throws Exception{
		 String value="";
		 JETChart chart=getJetChart(chartIndex);
		 ChartDataItem item=chart.getDataItem(seriesIndex, groupIndex);
		 if(attributeName.equalsIgnoreCase("value")){
			 attributeName="Value";
		 }else if(attributeName.equalsIgnoreCase("group")){
			 attributeName="Group";
		 }else if(attributeName.equalsIgnoreCase("x")){
			 attributeName="X";
		 }else if(attributeName.equalsIgnoreCase("y")){
			 attributeName="Y";
		 }else if(attributeName.equalsIgnoreCase("z")){
			 attributeName="Z";
		 }else if(attributeName.equalsIgnoreCase("series")){
			 attributeName = "Series";
		 }

		 String tooltip=item.getTooltip();
		 if(tooltip.contains(attributeName))
		 {
			 value=tooltip.split(attributeName+":")[1].split("<br>")[0].trim();
		 }
		 return value;
	 }

	 /************************************************************************************************************
	  * Function: hideSeriesItem
	  * Description: Used to hide the Series item
	  * Created By: Sravan
	  * Date: October 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param chartIndex :Chart Index starting from 0 
	  * 		@param seriesName :Series name
	  * Returns: 
	  * 		@return 
	  * **********************************************************************************************************
	  */
	 public void hideSeriesItem(int chartIndex, String SeriesName) throws Exception{
		 info("Start of function hideSeriesItem");

		 JETChart chart=getJetChart(chartIndex);
		 String parts[]=SeriesName.split(";");
		 for(int i=0;i<parts.length;i++){
			 int seriesNo=-1;
			 try{
				 seriesNo=Integer.parseInt(parts[i]);
				 chart.hideSeriesByIndices(false,seriesNo);
			 }catch (NumberFormatException e) {
				 chart.hideSeriesByNames(false,SeriesName);
			 }
		 }
		 info("End of function hideSeriesItem");
	 }

	 /************************************************************************************************************
	  * Function: isElementChecked
	  * Description: It returns a boolean value based on a web check box or a radio button present on the page are checked or not
	  * Created By: Sunil
	  * Date: Jan 2017
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param iIndexOrId:index or id of the element
	  * 		@param fldName: Name of the element
	  * 		@param sCategory: Category type of element
	  * Returns: 
	  * 		@return (True/False)
	  * Example : isElementChecked("C0_484", "Last", "Radio") // Passed Id of field
	  * 			 isElementChecked( "0", "Last", "Radio") // Passed index of field
	  * **********************************************************************************************************
	  */
	 public boolean isElementChecked(@Arg("iIndexOrId") String id, @Arg("fldName") String fldName, @Arg("sCategory") String sCategory)throws Exception {
		 checkFrame();
		 if(docIndex==null){
			 getDocIndex();
		 }
		 incrementValidationCount(1);
		 String attr = "id";
		 try{
			 int index=Integer.parseInt(id);
			 attr="index";
		 }catch(NumberFormatException n)
		 {
			 attr="id";
		 }

		 String bro="";
		 if((attr.equals("id"))&&(isModalForm==false)&&(isADF==false))
		 {
			 bro="/";
		 }
		 else
		 {
			 bro=e1Browser;
		 }

		 String chStatus;
		 boolean chS = false;
		 boolean isElePresent = true;
		 if(sCategory.toLowerCase().trim().equalsIgnoreCase("checkbox")){
			 if(web.exists(bro+"/web:input_checkbox[@"+attr+"='"+id+"']",20)){
				 isElePresent = false;
				 info("Check Box with "+attr+" "+id+" found");			
				 chStatus=web.checkBox(bro+"/web:input_checkbox[@"+attr+"='"+id+"']").getAttribute("checked");
				 info(chStatus);
				 if(chStatus.toLowerCase().equals("true")){				
					 chS=true;
				 }
			 }
		 }else if(sCategory.toLowerCase().trim().equalsIgnoreCase("radio")){
			 if(web.exists(bro+"/web:input_radio[@"+attr+"='"+id+"']",20)){
				 isElePresent = false;
				 info("Radio Button with "+attr+" "+id+" found");
				 chStatus =""+ web.radioButton(bro+"/web:input_radio[@"+attr+"='"+id+"']").isSelected();                
				 info(chStatus);
				 if(chStatus.toLowerCase().equals("true")){				
					 chS=true;
				 }
			 }
		 }else {
			 CapturePage();
			 testFailure("Category type is incorrect.");
		 }
		 // Check element is present
		 if(isElePresent){
			 CapturePage();
			 testFailure("Element "+fldName+" with "+attr+" "+id+" not found on the page.");
		 }
		 return chS;
	 }
/*************************************************************************************************************
	  * Function: getColorName
	  * Description: This function will store all the color property in the hash map.
	  * Created By: Sunil
	  * Modified By: Anusha Bonam
	  * Date: Feb 2017
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * @param colorInHaxOrRGBFormat : color code
	  * Returns: 
	  *          @return color property or null
	  **************************************************************************************************************/	
	 
	 //@ScriptService oracle.oats.scripting.modules.image.api.ImageService img;


	 public String getColorName(String colorInHaxOrRGBFormat) throws Exception {
		 //colorName has to be declared as a global variable
		 // Stored all color as needed by calling function.
		 if(colorName==null || colorName.size()==0){
			 colorName.put("rgb(0, 175, 214)", "blue");
			 colorName.put("#00afd6", "blue");
			 colorName.put("gray", "gray");
			 colorName.put("700", "bold");
			 colorName.put("italic", "italic");
			 colorName.put("rgb(170, 170, 170)", "gray");
			 //**********Adding all other colors for a consolidated color functions
			 //red
			 colorName.put("#ff0000","red");
			 colorName.put("rgb(255, 0, 0)","red");
			 colorName.put("#ff7c7c","red");
			 colorName.put("rgb(255, 124, 124)","red");
			 //navy
			 colorName.put("#23238e","navy");
			 colorName.put("rgb(35, 35, 142)","navy");
			 //blue
			 colorName.put("#00ffff","blue");
			 colorName.put("rgb(0, 255, 255)","blue");
			 colorName.put("rgb(0, 0, 255)","blue");
			 colorName.put("#0000ff","blue");
			 colorName.put("#bfd4e5","blue");
			 colorName.put("rgb(191, 212, 229)","blue");
			 colorName.put("#1e5daa","blue");
			 colorName.put("rgb(30, 93, 170)","blue");
			 //lightblue
			 colorName.put("#e4f0fa","lightblue");
			 colorName.put("rgb(228, 240, 250)","lightblue");
			 //yellow
			 colorName.put("#ffff00","yellow");
			 colorName.put("rgb(255, 255, 0)","yellow");
			 colorName.put("#ffff01","yellow");
			 colorName.put("rgb(255, 255, 1)","yellow");
			 //pink
			 colorName.put("#ff0066","pink");
			 colorName.put("rgb(255, 0, 102)","pink");
			 colorName.put("rgb(255, 0, 255)","pink");
			 colorName.put("#ff00ff","pink");
			 //green
			 colorName.put("#00ff00","green");
			 colorName.put("rgb(0, 255, 0)","green");
			 colorName.put("rgb(0, 128, 0)","green");
			 colorName.put("#008000","green");
			 //basic
			 colorName.put("transparent","basic");
			 colorName.put("rgb(238, 238, 238)","basic");
			 colorName.put("rgba(0, 0, 0, 0)","basic");
			 //black
			 colorName.put("#333333","black");
			 colorName.put("rgb(0, 0, 0)","black");
			 //gray
			 colorName.put("#DDDDDD","gray");
			 colorName.put("rgb(221, 221, 221)","gray");
			 colorName.put("rgb(244, 246, 247)","gray");
			 colorName.put("#f4f6f7","gray");
			 colorName.put("#b9babc","gray");
			 colorName.put("rgb(185, 186, 188)","gray");
			 colorName.put("rgb(51, 51, 51)","gray");

			 //purple
			 colorName.put("#8e236b","purple");
			 colorName.put("rgb(142, 35, 107)","purple");
			 //white
			 colorName.put("#FFFFFF","white");
			 colorName.put("rgb(255, 255, 255)","white");
			 
			 //maroon(Added 26.12.17)
			 colorName.put("#80000","maroon");
			 colorName.put("rgb(111, 66, 66)","maroon");

		 }
		 String color=colorName.get(colorInHaxOrRGBFormat);
		 if(color == null){
			 info("Color is returned as null or blank value.");
		 }
		 // info("color : "+color);
		 return color;
	 }	
	 /************************************************************************************************************
	  * Function: isNavigationSubMenu Description: This function is used to check if sub menu exists or not. It works in Fastpath and Favorites. It Returns a boolean.Created By: Ghulam Quadir Modified By: Date: Aug 2016 To be incorporated: Nil InputParameters:
	  * @param sCategory :Navigation bar name. Like Navigator, Favorite.
	  * @param appPath :Semi colon separated path of the application. If there are two items with same name write the index like 'index|SubMenuName'
	  * @param sStatus :True when sub menu exists. False when sub menu does NOT exists
	  * @return boolean
	  * Example:
	  *         isNavigationSubMenu("Navigator", "2|Processing Options;PO TEST",true)//Here, 2 is the index of that item from fastpath
	  *         isNavigationSubMenu("Navigator", "Power User Tasks;Support Setup;Action Plan", false)//when sub menu does not exists.
	  *         isNavigationSubMenu("Favorites", "  Daily Processing ;  Word Search", true)// When to validate item from navigation bar Favorite
	  *         *****************************************************************
	  */
	 /*THIS FUNCTION IS BASED ON ONLY SPAN AND ANCHOR TAG. IF THERE IS A COMBINATION OF TD,SPAN AND ANCHOR TAG IT WILL FAIL
	  *THIS SCENARIO IS NOT COMMON AND NOT SO URGET, SO WE ARE NOT HADNLING THIS FOR NOW. IT WOULD BE EASY TO REVISE THE EXISTING CODE LATER ACCORDINGLY.*/
	 public boolean isNavigationSubMenu(@Arg("sCategory")
			 String sCategory, @Arg("appPath")
			 String appPath, @Arg("sStatus")
			 boolean sStatus) throws Exception 
			 {
		 boolean result=false;
		 int subMenuLength=0;//How many semi colon separated items are there in argument
		 int foundItemCount=0;//Counts how many sub menu item found in application 
		 info("Starting function isNavigationSubMenu");
		 valCount++;//Increamenting the validation count variable

		 String[] pathItem = appPath.split(";"); 
		 subMenuLength=pathItem.length;
		 String element = null;
		 String[] elementItem = null;

		 DOMDocument doc=null;
		 DOMElement eleDom=null;
		 List<DOMElement> divList=null;
		 String currId=null;
		 String childId=null;


		 if (!(web.exists("//web:input_text[@id='TE_FAST_PATH_BOX' ]",60))) {//It insures navigation bar is rendered/loaded properly.
			 OSPreferences("Fail");
			 web.window(e1BrowserWindow).capturePage();
			 testFailure("Function isNavigationSubMenu Exiting. E1 page does not exist.");
			 return false;
		 }

		 String firstDivID="";
		 if(sCategory.equalsIgnoreCase("navigator"))//Fastpath
		 {
			 firstDivID="e1MMenuRootInner";
			 web.textBox("//web:input_text[@id='TE_FAST_PATH_BOX']").click();
			 Thread.sleep(1000);
		 }else if(sCategory.equalsIgnoreCase("Favorites"))
		 {
			 firstDivID="e1MMenuFav";
			 web.element("//web:div[@id='drop_fav_menus']").click();
			 Thread.sleep(1000);
		 }else if(sCategory.equalsIgnoreCase("Open Applications"))
		 {
			 web.element("//web:div[@id='drop_openapps']").click();
			 //Work on it if needed. Items in it are <table> not <div>
			 return false;
		 }	

		 int i = 0;
		 for (i = 0; i < pathItem.length; i++) {
			 elementItem = Pattern.compile("[|]").split(pathItem[i].trim());
			 String actualEleItem="";
			 int intIndex=0;
			 try {
				 intIndex = Integer.parseInt(elementItem[0].trim());
				 actualEleItem=elementItem[1].trim();
			 }catch (NumberFormatException e) {
				 actualEleItem=elementItem[0].trim();
			 }
			 String childTreeId="";
			 if(i==0)
			 {
				 eleDom=	web.element("//web:div[@id='"+firstDivID+"']");
				 divList=eleDom.getElementsByTagName("div"); 
			 }else
			 {
				 childTreeId="flyoutInnerTabletreechild"+currId.replace("fldnode","");
				 eleDom=web.element("//web:table[@id='" + childTreeId+"']");
				 divList=eleDom.getElementsByTagName("div"); 
			 }

			 String divId="";
			 String taskLabel="";
			 int count=-1;//This will indicate how many times a single item appears in a sigle folder/fastpath subfolder
			 boolean flag=false;
			 for(int j=0;j<divList.size();j++)
			 {
				 taskLabel=(divList.get(j)).getAttribute("tasklabel");
				 if(taskLabel==null)
				 {
					 continue;
				 }
				 if(taskLabel.equals(actualEleItem))
				 {
					 count++;
					 if(count==intIndex)//Handling the correct item based on index if there are two similar items in submenu
					 {
						 divId=(divList.get(j)).getAttribute("id");
						 currId="fldnode"+divId.replace("node","");
						 info("Navigation SubMenu "+pathItem[i]+" exists");
						 if(i==pathItem.length-1)//It is the last item of fastpath
						 {
							 foundItemCount++;
						 }else 
						 {
							 foundItemCount++;
							 web.element("//web:span[@id='" + currId + "']").click();
						 }
						 flag=true; 
						 Thread.sleep(2000);
					 }
				 }
			 }
			 if(flag==false)
			 {
				 OSPreferences("Fail");
				 web.window(e1BrowserWindow).capturePage();
				 info("Navigation SubMenu "+pathItem[i]+" does NOT exists");
				 //This will click on Navigation again to make the popuplated div disappear.
				 if(sCategory.equalsIgnoreCase("navigator"))//Fastpath
				 {
					 web.textBox("//web:input_text[@id='TE_FAST_PATH_BOX']").click();
					 Thread.sleep(1000);
				 }else if(sCategory.equalsIgnoreCase("Favorites"))
				 {
					 web.element("//web:div[@id='drop_fav_menus']").click();
					 Thread.sleep(1000);
				 }
				 if(sStatus==true)
				 {
					 return false;
				 }else
				 {
					 return true;
				 }
			 }
		 }
		 if(foundItemCount==subMenuLength)
		 {
			 info("Navigation SubMenu exists");
			 if(sStatus==true)
			 {
				 result=true;
			 }else
			 {
				 result=false;
			 }
		 }else
		 {
			 info("Navigation SubMenu does NOT exists");
			 if(sStatus==true)
			 {
				 result= false;
			 }else
			 {
				 result=true;
			 }
		 }
		 //This will click on Navigation again to make the popuplated div disappear.
		 if(sCategory.equalsIgnoreCase("navigator"))//Fastpath
		 {
			 web.textBox("//web:input_text[@id='TE_FAST_PATH_BOX']").click();
			 Thread.sleep(1000);
		 }else if(sCategory.equalsIgnoreCase("Favorites"))
		 {
			 web.element("//web:div[@id='drop_fav_menus']").click();
			 Thread.sleep(1000);
		 }

		 info("End Function isNavigationSubMenu");
		 return result;
			 }

	 /************************************************************************************************************
	  * Function: newUserLoginForForeignLang
	  * Description: The newUserLoginForForeignLang will be used to start an EnterpriseOne session and log in.
	  * Note: Here User will pass the login Id and password.
	  * Created By: Sunil Kumar
	  * Date: Jan 2017
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *                          @param sUser : Login User Id
	  *                          @param sPasswd : Login password
	  * Returns: 
	  *                          @return Nil
	  * **********************************************************************************************************
	  */
	/* public void newUserLoginForForeignLang(String sUser, String sPasswd) throws Exception
	 {
		 info("Starting: Function [newUserLoginForForeignLang]");
		 String environment=null, role=null,sloginUrl=null; 
		 String [] arryStrng; 
		 int parts;
		 web.clearAllCache();
		 web.clearAllPersistentCookies();

		 try{                      //Retrieving the Environment, Role and LoginURL from Login.ini file   
			 BufferedReader reader = new BufferedReader(new FileReader("C:/Login.ini"));
			 String line = null;
			 parts = 0;
			 line = reader.readLine();
			 if (line.equals("[ENVIRONMENT]")){
				 while ((line = reader.readLine()) != null) {
					 arryStrng = line.split("=");
					 if (arryStrng[0].equalsIgnoreCase("Environment")) {
						 environment = arryStrng[1]; 
						 parts = parts+1;
					 }else if (arryStrng[0].equalsIgnoreCase("Role")) {
						 role = arryStrng[1]; 
						 parts = parts+1;
					 }else if(arryStrng[0].equalsIgnoreCase("LoginURL")){
						 sloginUrl = arryStrng[1];
						 parts = parts+1;
					 }
					 if (parts==3) {
						 break;
					 }
				 }
			 }  
			 reader.close();
		 }
		 catch (Exception e) {
			 System.out.println(e.toString());
		 }

		 if(!web.exists("/web:window[@index='0']"))
			 browser.launch();
		 web.window("/web:window[@index='0']").navigate(sloginUrl); 
		 think(10);

		 web.textBox("//web:input_text[@id='User' or @name='User']").setText(sUser);
		 web.textBox("//web:input_password[@id='Password' or @name='Password']").setText(sPasswd);
		 web.textBox("//web:input_text[@id='Environment' or @name='Environment']").setText(environment);
		 web.textBox("//web:input_text[@id='Role' or @name='Role']").setText(role);
		 web.button("//web:input_submit[@value='Sign In']").click();
		 getScript("EOneUtility").callFunction("syncFrame");
		 think(20);

		 if(web.exists("//web:div[@id='drop_openapps']",20) || web.exists("//web:div[@id='drop_mainmenu']", 20)){
			 info("Pass: Login Successful");
		 }
		 else{
			 getScript("EOneUtility").callFunction("CapturePage");
			 testFailure("Login Error. Unable to login. Please check login credentials in SMLogin.ini file and try again.");
		 }
		 datatable.addColumn("Global", "User");
		 datatable.setValue("Global", 0, "User", sUser);
		 info("User "+sUser+" is added to datatable");
		 info("Finished: Function [newUserLoginForForeignLang]");
	 }*/
	 public void newUserLoginForForeignLang(String sUser) throws Exception
     {
           info("Starting: Function [newUserLoginForForeignLang]");
           getScript("EOneUtility").callFunction("setBrowser");
           String environment=null, role=null,sloginUrl=null; 
            String [] arryStrng; 
            int parts;
            //Commented as part of Edge browser testing.
          // web.clearAllCache();
           //web.clearAllPersistentCookies();

           try{                      //Retrieving the Environment, Role and LoginURL from Login.ini file   
                  BufferedReader reader = new BufferedReader(new FileReader("C:/Login.ini"));
                 String line = null;
                 parts = 0;
                 line = reader.readLine();
                 if (line.equals("[ENVIRONMENT]")){
                       while ((line = reader.readLine()) != null) {
                             arryStrng = line.split("=");
                             if (arryStrng[0].equalsIgnoreCase("Environment")) {
                                   environment = arryStrng[1]; 
                                    parts = parts+1;
                             }else if (arryStrng[0].equalsIgnoreCase("Role")) {
                                   role = arryStrng[1]; 
                                    parts = parts+1;
                             }else if(arryStrng[0].equalsIgnoreCase("LoginURL")){
                                   sloginUrl = arryStrng[1];
                                   parts = parts+1;
                             }
                             if (parts==3) {
                                   break;
                             }
                       }
                 }  
                  reader.close();
           }
           catch (Exception e) {
                 System.out.println(e.toString());
           }
           String release = "";
           if(releaseEnvMap.isEmpty()){
                       releaseEnvMap.put("PY910", "91");
                       releaseEnvMap.put("PY900", "90");
                       releaseEnvMap.put("PD910", "EXA");
                       releaseEnvMap.put("STBAWS", "STABLEA");
                       releaseEnvMap.put("STBAAU", "STABLEA");
                       releaseEnvMap.put("STBAWIN", "STABLEA");
                       releaseEnvMap.put("PY812", "812");
                       releaseEnvMap.put("PY920", "92");
                       releaseEnvMap.put("JPY920", "92");
                       releaseEnvMap.put("PY920AS", "92");
                       releaseEnvMap.put("JDV920", "TOOLS");
						releaseEnvMap.put("JDV910", "TOOLS");

                 }
           release=releaseEnvMap.get(environment);
           if((release==null)||(release.length()==0)) {
                       setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.Fail);
                       fail("Passwords for the given environment are not available in special login page, please verify Login.ini");
                 }
           if(!web.exists("/web:window[@index='0']"))
                 browser.launch();
                       
                 web.window("/web:window[@index='0']").navigate("http://den00hrs.us.oracle.com:7305/SpecialLogins");
                 web.window("/web:window[@title='*Generic UserIDs*']").waitForPage(null);
                 info("release : "+release);
                 DOMTable relTable=web.table("/web:window[@title='*Generic UserIDs*']/web:document[@index='0']/web:table[@id='"+release+"']");
                 List<DOMElement> rows=relTable.getElementsByTagName("tr");
                 String Passwrd="";
                 for(DOMElement row:rows){
                       List<DOMElement> cells=row.getElementsByTagName("td");
                       if(cells.size()>=3){
                             String user=cells.get(1).getAttribute("innerText");
                             if(user.toUpperCase().equals(sUser.toUpperCase())){
                                   Passwrd=cells.get(2).getAttribute("innerText");
                             }
                       }
                 }
                 info("Password for user : "+sUser+" is "+Passwrd);
                 if(Passwrd.length()==0) {
                       setErrorRecovery(BasicErrorRecovery.ERR_FUNCTION_EXCEPTION, ErrorRecoveryAction.Fail);
                       fail("Password for User "+sUser+" is not available in special login page, Please verify Login Credentials");
                 }
                 //adding newUser to datatable

                 int appender=(Integer)getScript("EOneUtility").callFunction("checkColumnExists","newUser");
                 if(appender==0){
                       datatable.getGlobalDatatable().addColumn("Global","newUser",0);
                 }
                 datatable.getGlobalDatatable().setValue("Global", 0, "newUser",sUser);
                                   
                 web.window("/web:window[@index='0']").navigate(sloginUrl); 
                  think(10);
           web.textBox("//web:input_text[@id='User' or @name='User']").setText(sUser);
           web.textBox("//web:input_password[@id='Password' or @name='Password']").setText(Passwrd);
           web.textBox("//web:input_text[@id='Environment' or @name='Environment']").setText(environment);
           web.textBox("//web:input_text[@id='Role' or @name='Role']").setText(role);
           web.button("//web:input_submit[@value='Sign In']").click();
           getScript("EOneUtility").callFunction("syncFrame");
           think(20);

           if(web.exists("//web:div[@id='drop_openapps']",20) || web.exists("//web:div[@id='drop_mainmenu']", 20)){
                 info("Pass: Login Successful");
           }
           else{
                 getScript("EOneUtility").callFunction("CapturePage");
                 getScript("EOneUtility").callFunction("testFailure","Login Error. Unable to login. Please check login credentials in SMLogin.ini file and try again.");
           }
           datatable.addColumn("Global", "User");
           datatable.setValue("Global", 0, "User", sUser);
           info("User "+sUser+" is added to datatable");
           info("Finished: Function [newUserLoginForForeignLang]");
     }


	 /************************************************************************************************************
	  * Function: openView
	  * Description: Used to launch queryselector tool and then open View
	  * Created By: Rupa
	  * Date: Dec 2016
	  * To be incorporated:
	  * Input Parameters:
	  *          @param sView - view name to be opened .
	  * Returns:
	  *                @return Nil
	  * **********************************************************************************************************
	  */
	 public void openView(@Arg("sView") String sView) throws Exception{
		 info("Starting: Function OpenView ");

		 closeDeadDataBrowsers();
		 // Only Databrowser table windows open, close Orphan data browser windows.
		 sView=sView.toUpperCase();
		 String sDataBrowser = "/web:window[@title='Query*']/web:document[@index='0' or @name='DataBrowser']";
		 if(!qsFlag ||!(web.exists(sDataBrowser))) {
			 fastPath("databrowser");
			 Thread.sleep(5000);
			 if(!web.window("/web:window[@title='Query*']").exists()){
				 web.link("//web:a[@id='fastPathButton']").focus();
				 web.link("//web:a[@id='fastPathButton']").click();
			 }
			 web.window("/web:window[@title='Query*']").maximize();

			 web.window("/web:window[@title='Query*']").maximize();
			 if(web.exists(sDataBrowser,80)){
				 //Set the view radio button
				 web.radioButton(sDataBrowser+"/web:form[@index='0']/web:input_radio[(@name='targetType' and @value='view') or @index='3']").select();
				 info("Data browser Opened Successfully");
			 }
			 else{
				 CapturePage();
				 testFailure("Failure: Data browser Failed To Open, Exiting Function");
				 return;
			 }
		 }
		 else 
		 {
			 web.radioButton(sDataBrowser+"/web:form[@index='0']/web:input_radio[@index='0']").select();
			 Thread.sleep(2000);
			 web.radioButton(sDataBrowser+"/web:form[@index='0']/web:input_radio[(@name='targetType' and @value='view') or @index='3']").select();
		 }
		 qsFlag=true;
		 sView=sView.trim();

		 web.textBox(sDataBrowser+"/web:form[@index='0']/web:input_text[@id='viewName']").click();
		 web.textBox(sDataBrowser+"/web:form[@index='0']/web:input_text[@id='viewName']").setText(sView);
		 web.textBox(sDataBrowser+"/web:form[@index='0']/web:input_text[@id='viewName']").fireEvent("onBlur");
		 web.textBox(sDataBrowser+"/web:form[@index='0']/web:input_text[@id='viewName']").pressTab();
		 think(5);

		 String outerhtml=web.element(sDataBrowser+"/web:form[@index='0']/web:input_text[@id='viewName']").getAttribute("OuterHTML");

		 if(outerhtml.contains("border-color: rgb")){

			 CapturePage();
			 testFailure("Failure: View Open,View doesn't exist" + sView);
			 return;	

		 }
		 int w=0;
		 Thread.sleep(1000);
		 web.button(sDataBrowser+"/web:form[@index='0']/web:input_button[@value='OK']").focus();
		 web.button(sDataBrowser+"/web:form[@index='0']/web:input_button[@value='OK']").click();
		 while(w<100&&(!(web.exists("/web:window[@title='Data Browser - "+ sView.toUpperCase() +"*']",1)||web.exists("/web:window[@title='Data"+spaceChar+"Browser"+spaceChar+"-"+spaceChar+""+ sView.toUpperCase() +"*']",1)))){
			 info("waiting for "+w);	
			 if(web.exists("/web:window[@index='2']")){
				 info("3rd window");
			 }
			 Thread.sleep(1000);
			 w++;

		 }
		 if(web.exists(sDBBrowser+"/web:table[@className='JSGridQTPClass' and @id='jdeGrid*']",20)){
			 bDB=true;
			 info("View Open, View: " + sView  + " opened successfully");  
		 }
		 else{
			 CapturePage();
			 testFailure("Failure: View Open , View: " + sView  + " Never Opened");
		 }

		 info("Finished: Function OpenView ");
	 }

	 /************************************************************************************************************
	  * Function: selectJETListBox
	  * Description: Used to select a particular List Item from a JET select box
	  * Created By: Sravan
	  * Date: October 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param chartIndex :Chart Index starting from 0 
	  * 		@param listBoxName :ListBox name (Query/Version/ Group BY)
	  * 		@param ListItem	: Item to be selected
	  * Returns: 
	  * 		@return 
	  * **********************************************************************************************************
	  */
	 public void selectJETListBox (int chartIndex, String listBoxName, String ListItem) throws Exception{
		 info("Start of function selectJETListBox");
		 String selectBoxId="";
		 if(listBoxName.equalsIgnoreCase("QUERY")){
			 selectBoxId="queryCombobox";
		 }else if(listBoxName.equalsIgnoreCase("version")){
			 selectBoxId="versionsComboBox";
		 }else if(listBoxName.equalsIgnoreCase("Group By")){
			 selectBoxId="group";
		 }else if(listBoxName.equalsIgnoreCase("Title")){
			 selectBoxId="dropDown";
		 }else{
			 selectBoxId="dropDownValue";
		 }
		 JETSelect selectbox=jet.select("//web:JETSelect[@id='"+selectBoxId+"']["+chartIndex+"]");
		 if((selectbox!=null) && (selectbox.exists())){
			 try{
				 selectbox.selectByLabels(ListItem);
			 }catch (Exception e) {
				 e.printStackTrace();
				 CapturePage();
				 testFailure(ListItem +" not found in "+listBoxName+" listbox for chart with index "+chartIndex);
			 }
		 }else{
			 CapturePage();
			 testFailure(listBoxName+" list box not found for Chart with index "+chartIndex);
		 }
		 info("End of function selectJETListBox");
	 }

	 /************************************************************************************************************
	  * Function: showSeriesItem
	  * Description: Used to show the Series item
	  * Created By: Sravan
	  * Date: October 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param chartIndex :Chart Index starting from 0 
	  * 		@param seriesName :Series name
	  * Returns: 
	  * 		@return 
	  * **********************************************************************************************************
	  */
	 public void showSeriesItem(int chartIndex, String SeriesName) throws Exception{	
		 info("Start of function showSeriesItem");
		 JETChart chart=getJetChart(chartIndex);
		 String parts[]=SeriesName.split(";");
		 for(int i=0;i<parts.length;i++){
			 int seriesNo=-1;
			 try{
				 seriesNo=Integer.parseInt(parts[i]);
				 chart.showSeriesByIndices(false,seriesNo);
			 }catch (NumberFormatException e) {
				 chart.showSeriesByNames(false,SeriesName);
			 }
		 }
		 info("End of function showSeriesItem");
	 }

	 /************************************************************************************************************
	  * Function: SumOfColumnValues
	  * Description: Calculate the total sum of specified column records present in the grid and
	  * 				store result in the data table. 
	  * Created By: Sunil
	  * Date: Nov 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param index : grid index
	  * 		@param sColumnName: Name of the column
	  * 		@param outVar: name of datatable column name.
	  *  Returns: 
	  * 		@return Nil
	  * **********************************************************************************************************
	  */
	 public void sumOfColumnValues(@Arg("index") int iIndex, @Arg("sColumnName") String sColumnName, @Arg("outVar") String outVar) throws Exception {
		 info("Starting: Function [SumOfColumnValues]");
		 String gridId = "";
		 String colIndex = "";
		 String webListId = "";
		 double sumOfColumn = 0;
		 double val = 0;
		 int totalRowCount = 0;
		 boolean flag = false;
		 if(!bDB){
			 checkFrame();
			 gridId = getGridObjReference(iIndex);
			 if(gridId!=null){
				 if(isElementExist("image","id","jdehtmlGridLast"+gridId,"Go to end")){
					 web.element("//web:img[@id='jdehtmlGridLast"+gridId+"']").click();
					 syncFrame();
					 // Wait until row is appeared on screen.
					 for(int waitCont = 0; waitCont < 500 ; waitCont++){
						 if(web.exists("//web:td[@id='GridLabel"+gridId+".Records']")){
							 break;
						 }
					 }
					 if(!(web.exists("//web:td[@id='GridLabel"+gridId+".Records']"))){
						 CapturePage();
						 testFailure("Failed: No records are populated in the grid or E1 Server may get down.");
						 return;
					 }
				 }
				 gridId = getGridObjReference(iIndex);	
				 colIndex=getColIndexForColName(gridId,sColumnName);
				 if(colIndex!=null){
					 webListId = "sectionDropDown"+gridId;
					 if (web.exists("//web:select[( @id='"+webListId+"')]", 20)){
						 int webListSize = web.selectBox("//web:select[( @id='"+webListId+"')]").getOptions().size();
						 for(int webListIdx =0; webListIdx < webListSize ; webListIdx++){
							 web.selectBox("//web:select[( @id='"+webListId+"')]").click();
							 web.selectBox("//web:select[(@id='"+webListId+"')]").selectOptionByIndex(webListIdx);
							 syncFrame();
							 String[] output = web.document(	e1Browser).executeJsFunction("getvisibleRowCount", gridId);
							 totalRowCount = Integer.parseInt(output[0]);
							 for(int rowidx = 0; rowidx < totalRowCount; rowidx++){
								 String cellVal[]=web.document(e1Browser).executeJsFunction("getGridRowCellValue",gridId,Integer.toString(rowidx),colIndex);
								 String fieldVal=cellVal[0];
								 fieldVal = fieldVal.replace(",", "");
								 if(fieldVal.contains("-")){
									 fieldVal = fieldVal.replace("-", "");
									 fieldVal = "-"+fieldVal;
								 }
								 if( fieldVal == null || fieldVal.length() == 0 || fieldVal.trim().equals("")){
									 continue;
								 }
								 try {
									 val=Double.parseDouble(fieldVal.trim()); 
								 } catch (NumberFormatException nfe) {
									 info("NumberFormatException: " + nfe.getMessage());
								 } catch (NullPointerException npe){
									 info("NullPointerException: " + npe.getMessage()); 
								 }
								 sumOfColumn= sumOfColumn + val;
							 }
						 }
					 }else{
						 String[] output = web.document(	e1Browser).executeJsFunction("getvisibleRowCount", gridId);
						 totalRowCount = Integer.parseInt(output[0]);
						 if(totalRowCount == 0){
							 CapturePage();
							 warn("WARNING: No records are populated in the grid.");
						 }
						 for(int rowidx = 0; rowidx < totalRowCount; rowidx++){
							 String cellVal[]=web.document(e1Browser).executeJsFunction("getGridRowCellValue",gridId,Integer.toString(rowidx),colIndex);
							 String fieldVal=cellVal[0];
							 fieldVal = fieldVal.replace(",", "");
							 if(fieldVal.contains("-")){
								 fieldVal = fieldVal.replace("-", "");
								 fieldVal = "-"+fieldVal;
							 }
							 if( fieldVal == null || fieldVal.length() == 0 || fieldVal.trim().equals("")){
								 continue;
							 }
							 try {
								 val=Double.parseDouble(fieldVal.trim()); 
							 } catch (NumberFormatException nfe) {
								 info("NumberFormatException: " + nfe.getMessage());
							 } catch (NullPointerException npe){
								 info("NumberFormatException: " + npe.getMessage()); 
							 }
							 sumOfColumn= sumOfColumn + val;
						 }
					 }
					 flag = true;
				 }else{
					 CapturePage();
					 testFailure("Failed to identifying column "+sColumnName+" hance sum of column data could not stored in the data table.");
				 }
			 }else{
				 CapturePage();
				 testFailure("Failed : Grid not found.");
			 }

		 }else {   //If data browser exists.
			 Thread.sleep(5000);
			 gridId=getDataBrowserGridObjReference();
			 if(gridId!=null){
				 if(web.element("//web:img[@id='jdehtmlGridLast"+gridId+"']").exists()){
					 web.element("//web:img[@id='jdehtmlGridLast"+gridId+"']").click(); 
					 syncFrame();
					 // Wait until row is appeared on screen.
					 for(int waitCont = 0; waitCont < 500 ; waitCont++){
						 if(web.exists("//web:td[@id='GridLabel"+gridId+".Records']")){
							 break;
						 }
					 }
					 if(!(web.exists("//web:td[@id='GridLabel"+gridId+".Records']"))){
						 CapturePage();
						 testFailure("Failed: No records are populated in the grid or E1 Server may get down.");
						 return;
					 }
				 }
				 gridId=getDataBrowserGridObjReference();
				 colIndex=getColIndexForColName(gridId,sColumnName);
				 if(colIndex!=null){
					 webListId = "sectionDropDown"+gridId;
					 if (web.exists("//web:select[( @id='"+webListId+"')]", 20)){
						 int webListSize = web.selectBox("//web:select[( @id='"+webListId+"')]").getOptions().size();
						 for(int webListIdx =0; webListIdx < webListSize ; webListIdx++){
							 web.selectBox("//web:select[( @id='"+webListId+"')]").click();
							 web.selectBox("//web:select[(@id='"+webListId+"')]").selectOptionByIndex(webListIdx);
							 syncFrame();
							 String[] output = web.document(	sDBBrowser).executeJsFunction("getvisibleRowCount", gridId);
							 totalRowCount = Integer.parseInt(output[0]);
							 for(int rowidx = 0; rowidx < totalRowCount; rowidx++){
								 String cellVal[]=web.document(sDBBrowser).executeJsFunction("getGridRowCellValue",gridId,Integer.toString(rowidx),colIndex);
								 String fieldVal=cellVal[0];
								 fieldVal = fieldVal.replace(",", "");
								 if(fieldVal.contains("-")){
									 fieldVal = fieldVal.replace("-", "");
									 fieldVal = "-"+fieldVal;
								 }
								 if( fieldVal == null || fieldVal.length() == 0 || fieldVal.trim().equals("")){
									 continue;
								 }
								 try {
									 val=Double.parseDouble(fieldVal.trim()); 
								 } catch (NumberFormatException nfe) {
									 info("NumberFormatException: " + nfe.getMessage());
								 } catch (NullPointerException npe){
									 info("NullPointerException: " + npe.getMessage()); 
								 }
								 sumOfColumn= sumOfColumn + val;
							 }
						 }
					 }else{
						 String[] output = web.document(	sDBBrowser).executeJsFunction("getvisibleRowCount", gridId);
						 totalRowCount = Integer.parseInt(output[0]);
						 if(totalRowCount == 0){
							 CapturePage();
							 warn("WARNING: No records are populated in the grid.");
						 }
						 for(int rowidx = 0; rowidx < totalRowCount; rowidx++){
							 String cellVal[]=web.document(sDBBrowser).executeJsFunction("getGridRowCellValue",gridId,Integer.toString(rowidx),colIndex);
							 String fieldVal=cellVal[0];
							 fieldVal = fieldVal.replace(",", "");
							 if(fieldVal.contains("-")){
								 fieldVal = fieldVal.replace("-", "");
								 fieldVal = "-"+fieldVal;
							 }
							 if( fieldVal == null || fieldVal.length() == 0 || fieldVal.trim().equals("")){
								 continue;
							 }
							 try {
								 val=Double.parseDouble(fieldVal.trim()); 
							 } catch (NumberFormatException nfe) {
								 info("NumberFormatException: " + nfe.getMessage());
							 } catch (NullPointerException npe){
								 info("NumberFormatException: " + npe.getMessage()); 
							 }
							 sumOfColumn= sumOfColumn + val;
						 }
					 }
					 flag = true;
				 }else{
					 CapturePage();
					 testFailure("Failed to identifying column "+sColumnName+" hance sum of column data could not stored in the data table.");
				 }
			 }else{
				 CapturePage();
				 testFailure("Failed : Grid not found.");
			 }
		 }
		 if(flag){
			 //DecimalFormat twoDForm = new DecimalFormat("#.##");
			 //twoDForm.setRoundingMode(RoundingMode.CEILING);
			 sumOfColumn = Double.valueOf(sumOfColumn);
			 info("Total sum = "+sumOfColumn);
			 int appender=checkColumnExists(outVar);
			 if(appender==0){
				 datatable.getGlobalDatatable().addColumn("Global",outVar.trim(),0);
			 }
			 datatable.getGlobalDatatable().setValue("Global", 0, outVar.trim() ,sumOfColumn);
			 info("Passed: Indentified column "+sColumnName+ "and sum of cell values "+sumOfColumn+" stored in the datatable.");
		 }
		 info("Finished: Function [SumOfColumnValues]");
	 }

	 /************************************************************************************************************
	  * Function: UBEDataSelection  
	  * Description: This Function is used to submit the UBE with multiple data selection. 
	  * Created By: Sravan
	  * Date: Febraury 2011
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *      @param sReportId : Batch to be submitted
	  *      @param sVersionID: Version to be submitted
	  *      @param dataSelections: Multiple dataselections  seperated by semicolons                                
	  * Returns: 
	  *                      @return Nil
	  * **********************************************************************************************************
	  */
	 public void UBESubmitWithDataSelection(@Arg("sReportId") String sReportId, @Arg("sVersionID") String sVersionID, @Arg("dataSelections") String dataSelections) throws Exception {
		 UBEDataSelection(sReportId, sVersionID, dataSelections);
	 }

	 /************************************************************************************************************
	  * Function: validateChartTitle
	  * Description: Used to validate the title of the chart specified by index
	  * Created By: Sravan
	  * Modified By: Ghulam Quadir
	  * Date: October 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param chartIndex :Chart Index starting from 0 
	  * 		@param chartTitle :Chart Title
	  * Returns: 
	  * 		@return 
	  * **********************************************************************************************************
	  */
	 public void validateChartTitle(int chartIndex, String chartTitle) throws Exception{
		 info("Start of function validateChartTitle");
		 incrementValidationCount(1);
		 String title=getChartTitle(chartIndex);

		 String[] com=title.split("\r\n"); 
		 title=com[0].trim();

		 if( (title!=null)&& (title.equals(chartTitle))){
			 info( "[validateChartTitle] Passed: Chart with index "+chartIndex+" and with title " + title +" found");
		 }else{
			 if(title==null){
				 title="";
			 }
			 CapturePage();
			 testFailure("[validateChartTitle] Failed: Expected title of chart with index "+chartIndex+" is: "+chartTitle+", Actual chart title :"+title);
		 }
		 info("End of function validateChartTitle");
	 }

	 /************************************************************************************************************
	  * Function: validateChartType
	  * Description: Used to validate the type of the chart
	  * Created By: Sravan
	  * Date: October 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param chartIndex :Chart Index starting from 0 
	  * 		@param chartType : chart Type (Bar/line/combo/pie)
	  * Returns: 
	  * 		@return 
	  * **********************************************************************************************************
	  */
	 public void validateChartType(int chartIndex, String chartType) throws Exception{
		 info("Start of function validateChartType");
		 incrementValidationCount(1);
		 String actChartType= getChartType(chartIndex);
		 if(actChartType.equalsIgnoreCase(chartType)){
			 info("[validateChartType] Passed: chart type is "+chartType +"as expected");
		 }else{
			 testFailure("[validateChartType] Failed: Expected chart type is "+chartType +" actual chart type is "+actChartType);
			 CapturePage();
		 }
		 info("End of function validateChartType");
	 }

	 /************************************************************************************************************
	  * Function: validateDataItemAttribute
	  * Description: Used to validate attribute value of item for given chart
	  * Created By: Sravan
	  * Date: October 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param chartIndex :Chart Index starting from 0 
	  * 		@param groupIndex :Group Index starting from 0
	  * 		@param seriesIndex :Series Index starting from 0
	  * 		@param attributeName :Attribute name (color/bordercolor/group/series/value/tooltip)
	  * 		@param attributeValue :Value to be validated
	  * Returns: 
	  * 		@return 
	  * **********************************************************************************************************
	  */
	 public void  validateDataItemAttribute(int chartIndex, int groupIndex, int seriesIndex, String attributeName, String attributeValue) throws Exception{
		 info("Start of function validateDataItemAttribute");
		 incrementValidationCount(1);
		 attributeValue=attributeValue.replaceAll(newline, " ");
		 attributeValue=attributeValue.replaceAll("<br>", " ").trim();
		 String actValue=getDataItemAttribute(chartIndex, groupIndex, seriesIndex, attributeName);
		 if(actValue!=null){
			 actValue=actValue.replaceAll(newline, " ");
			 actValue=actValue.replaceAll("<br>", " ").trim();
			 if(actValue.trim().equals(attributeValue)){
				 info("[validateDataItemAttribute Passed]: Expected and Actual values for attribute "+attributeName+" is "+actValue);
			 }else{
				 CapturePage();
				 testFailure("[validateDataItemAttribute Failed]: Expected "+attributeName +" is "+attributeValue+ " and Actual value is "+actValue);
			 }
		 }
		 info("End of function validateDataItemAttribute");

	 }

	 /************************************************************************************************************
	  * Function: validateDataItemCount
	  * Description: Used to validate actual data items displayed
	  * Created By: Sravan
	  * Date: October 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param chartIndex :Chart Index starting from 0 
	  * 		@param dataItemCount :Expected data item count
	  * Returns: 
	  * 		@return 
	  * **********************************************************************************************************
	  */
	 public void validateDataItemCount(int chartIndex, int dataItemCount) throws Exception{
		 info("Start of function validateDataItemCount");
		 JETChart chart=getJetChart(chartIndex);
		 int seriesCount=chart.getSeriesCount();
		 int GroupsCount=chart.getGroupCount();
		 //System.out.println(GroupsCount);
		 int count=0;
		 for(int i=0;i<seriesCount;i++){
			 for(int j=0;j<GroupsCount;j++){
				 //info("Group  "+j+" Series "+i);
				 try{					
					 ChartDataItem item=chart.getDataItem(i, j);
					 if(item!=null){
						 double val=item.getValue();
						 //System.out.println(val);
						 if( val!=0){
							 count=count+1;
						 }
					 }
				 }catch(Exception e){
					 e.printStackTrace();
				 }
			 }
		 }
		 if(count==dataItemCount){
			 info("validateDataItemCount Passed: Expected and Actual data item count is "+dataItemCount);
		 }else{
			 CapturePage();
			 testFailure("validateDataItemCount Failed: Expected count is "+dataItemCount+" Actual count is"+count);
		 }
		 info("End of function validateDataItemCount");
	 }

	 /************************************************************************************************************
	  * Function: validateNoChartDataDisplayed
	  * Description: Validates chart contains no data
	  * Created By: Sravan
	  * Date: October 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param chartIndex :Chart Index starting from 0 
	  * Returns: 
	  * 		@return 0
	  * **********************************************************************************************************
	  */
	 public void validateNoChartDataDisplayed(int chartIndex) throws Exception{
		 info("Start of function validateNoChartDataDisplayed");
		 JETChart chart=getJetChart(chartIndex);
		 try{
			 int count=chart.getSeriesCount();
			 if(count==0){
				 info("Passed: No data displayed for chart with index "+chartIndex);
			 }else{
				 CapturePage();
				 testFailure("Failed: Data displayed on chart where as no data is expected");
			 }
		 }catch (oracle.oats.scripting.modules.webdom.common.api.exception.WaitForPageTimeoutException e) {
			 info("Passed: No data displayed for chart with index "+chartIndex);
		 }
		 info("End of function validateNoChartDataDisplayed");
	 }

	 /************************************************************************************************************
	  * Function: validateSeriesCount
	  * Description: Used to validate Series/legend count of a chart
	  * Created By: Sravan
	  * Date: October 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param chartIndex :Chart Index starting from 0 
	  * 		@param seriesCount : Expected Series Count
	  * Returns: 
	  * 		@return 
	  * Example:
	  * 		validateSeriesCount(0,10);
	  * **********************************************************************************************************
	  */
	 public void validateSeriesCount(int chartIndex, int seriesCount) throws Exception{
		 info("Start of function validateSeriesCount");
		 incrementValidationCount(1);
		 int actCount= getSeriesCount(chartIndex);
		 if(seriesCount==actCount){
			 info("[validateSeriesCount] Passed: Chart series count is "+seriesCount+" as expected");
		 }else{
			 testFailure("[validateSeriesCount] Failed: Expected chart series count is "+seriesCount +" actual count is "+actCount);
			 CapturePage();
		 }
		 info("End of function validateSeriesCount");
	 }

	 /************************************************************************************************************
	  * Function: validateSeriesHidden
	  * Description: Used to validate if a series item is visible/hidden
	  * Created By: Yashin
	  * Date: October 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param chartIndex :Chart Index starting from 0 
	  * 		@param seriesName :Series name
	  * 		@param isHidden : is the series hidden (true/false)
	  * Returns: 
	  * 		@return 
	  * **********************************************************************************************************
	  */
	 public void validateSeriesHidden (int chartIndex, String seriesName, boolean isHidden) throws Exception{
		 info("Start of function validateSeriesHidden");
		 incrementValidationCount(1);
		 JETChart chart=getJetChart(chartIndex);
		 //Boolean bStatus=chart.checkSereisHiddenByName(seriesName);
		 Boolean bStatus=chart.isSeriesHidden(seriesName);
		 if(!isHidden)	{
			 if(!bStatus){
				 info("validateSeriesHidden Passed: Series Item "+seriesName+" is selected and visible as expected");
			 }else{
				 CapturePage();
				 testFailure("validateSeriesHidden Failed: Series Item "+seriesName+" is expected to be visible but actual status is hidden");
			 }
		 }else{
			 if(bStatus){
				 info("validateSeriesHidden Passed: Series Item "+seriesName+" is hidden");
			 }else{
				 CapturePage();
				 testFailure("validateSeriesHidden Failed: Series Item "+seriesName+" is expected to be hidden but actual status id visible");
			 }
		 }
		 info("End of function validateSeriesHidden");
	 }

	 /************************************************************************************************************
	  * Function: validateSeriesItemPresent
	  * Description: Used to validate  if a Series is present in a chart
	  * Created By: Sravan
	  * Date: October 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param chartIndex :Chart Index starting from 0 
	  * 		@param seriesName :Series name
	  * Returns: 
	  * 		@return 
	  * **********************************************************************************************************
	  */
	 public void validateSeriesItemPresent (int chartIndex, String seriesName) throws Exception{
		 info("Start of function validateSeriesItemPresent");
		 incrementValidationCount(1);
		 JETChart chart=getJetChart(chartIndex);
		 List<String> seriesNames=chart.getSeriesNames();
		 boolean flag=false;
		 for(String s : seriesNames){
			 if(s!=null && s.equals(seriesName)){
				 info("[validateSeriesItemPresent Passed] Series Item "+seriesName+" Found for chart with index "+chartIndex);
				 flag=true;
				 break;
			 }
		 }
		 if(!flag){
			 testFailure("[validateSeriesItemPresent Failed] Series Item "+seriesName+" not found for chart with index "+chartIndex);
			 CapturePage();
		 }
		 info("End of function validateSeriesItemPresent");
	 }

	 /************************************************************************************************************
	  * Function: validateWatchlistCounterValue
	  * Description: This function validates the counter value for the watchlist item passed as argument.
	  * Created By: Yashin
	  * Date: October 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *         @param sItemName :Watchlist Item Name
	  *         @param value: counter value
	  *         
	  * Returns: 
	  *         @return 
	  * **********************************************************************************************************
	  */
	 public void validateWatchlistCounterValue(String sItemName, String value) throws Exception{
		 info("Starting function validateWatchlistCounterValue");
		 incrementValidationCount(1);
		 String counter=getWatchlistCounterValue(sItemName);
		 if(counter.trim().equalsIgnoreCase(value.trim())){
			 info("[validateWatchlistCounterValue Passed]: Watchlist count for item "+sItemName+" is "+value+" as expected");
		 }else{
			 CapturePage();
			 testFailure("[validateWatchlistCounterValue Failed]: Expected Watchlist count for item "+sItemName+" is "+value+" and actual value is "+counter);
		 }
		 info("End of function validateWatchlistCounterValue");
	 }

	 /************************************************************************************************************
	  * Function: validateXAxisTitle
	  * Description: Used to validate title on X axis in chart
	  * Created By: Sravan
	  * Date: October 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param chartIndex :Chart Index starting from 0 
	  * 		@param AxisTitle :X Axis Title
	  * Returns: 
	  * 		@return 
	  * **********************************************************************************************************
	  */
	 public void validateXAxisTitle(int chartIndex, String AxisTitle) throws Exception{
		 info("Start of function validateXAxisTitle");
		 incrementValidationCount(1);
		 JETChart chart=getJetChart(chartIndex);
		 if(chart!=null&& chart.exists()){
		 }else{
			 CapturePage();
			 testFailure("Chart with Index "+chartIndex+" not found");
			 return;
		 }
		 String title=chart.getXAxis().getTitle();
		 if(title==null){
			 title="";
		 }

		 if(title.equals(AxisTitle)){
			 info("X Axis Title Validation Passed: Expected and Actual title are matching. Title is :"+title);
		 }else{
			 CapturePage();
			 testFailure("X Axis Title Validation for chart with index "+chartIndex+" Failed. Expected title is :"+AxisTitle+", Actual title is :"+title);
		 }
		 info("End of function validateXAxisTitle");
	 }
	 /************************************************************************************************************
	  * Function: validateYAxisTitle
	  * Description: Used to validate title on Y axis in chart
	  * Created By: Sravan
	  * Date: October 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param chartIndex :Chart Index starting from 0 
	  * 		@param AxisTitle :Y Axis Title
	  * Returns: 
	  * 		@return 
	  * **********************************************************************************************************
	  */
	 public void validateYAxisTitle(int chartIndex, String AxisTitle) throws Exception{
		 info("Start of function validateYAxisTitle");
		 incrementValidationCount(1);
		 JETChart chart=getJetChart(chartIndex);
		 if(chart!=null&& chart.exists()){
		 }else{
			 CapturePage();
			 testFailure("Chart with Index "+chartIndex+" not found");
			 return;
		 }
		 String title=chart.getYAxis().getTitle();
		 if(title==null){
			 title="";
		 }

		 if(title.equals(AxisTitle)){
			 info("Y Axis Title Validation Passed: Expected and Actual title are matching. Title is :"+title);
		 }else{
			 CapturePage();
			 testFailure("Y Axis Title Validation for chart with index "+chartIndex+" Failed. Expected title is :"+AxisTitle+", Actual title is :"+title);
		 }
		 info("End of function validateYAxisTitle");
	 }

	 /************************************************************************************************************
	  * Function: validateY2AxisTitle
	  * Description: Used to validate title on Y2 axis in chart
	  * Created By: Sravan
	  * Date: October 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param chartIndex :Chart Index starting from 0 
	  * 		@param AxisTitle :Y2 Axis Title
	  * Returns: 
	  * 		@return 
	  * **********************************************************************************************************
	  */
	 public void validateY2AxisTitle(int chartIndex, String AxisTitle) throws Exception{
		 info("Start of function validateY2AxisTitle");
		 incrementValidationCount(1);
		 JETChart chart=getJetChart(chartIndex);
		 if(chart!=null&& chart.exists()){
		 }else{
			 CapturePage();
			 testFailure("Chart with Index "+chartIndex+" not found");
			 return;
		 }
		 String title="";
		 if(chart.getY2Axis()!=null){

			 title=chart.getY2Axis().getTitle();
			 if(title==null){
				 title="";
			 }
		 }
		 if(title.equals(AxisTitle)){
			 info("Y2 Axis Title Validation Passed: Expected and Actual title are matching. Title is :"+title);
		 }else{
			 CapturePage();
			 testFailure("Y Axis Title Validation for chart with index "+chartIndex+" Failed. Expected title is :"+AxisTitle+", Actual title is :"+title);
		 }
		 info("End of function validateY2AxisTitle");
	 }

	 /************************************************************************************************************
	  * Function: getWatchlistCounterValue
	  * Description: This function returns the counter value for the watchlist item passed as argument.
	  * Created By: Yashin
	  * Date: October 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *         @param sItemName :Watchlist Item Name
	  *         
	  * Returns: 
	  *         @return counter value of watchlist item
	  * **********************************************************************************************************
	  */
	 public String getWatchlistCounterValue(String sItemName) throws Exception{
		 info("Starting function getWatchlistCounterValue");
		 String qty=null;
		 DOMElement ele=web.element("//web:span[@text='"+sItemName+"']");
		 if(ele.exists())
		 {
			 String sTag=ele.getTag();
			 while(!sTag.equalsIgnoreCase("td"))
			 {
				 ele=ele.getParent();
				 sTag=ele.getTag();
			 }
			 ele=ele.getPreviousSibling();
			 List<DOMElement> eleList=ele.getElementsByTagName("p");
			 if(!eleList.isEmpty())
			 {
				 qty=eleList.get(0).getAttribute("text");
				 info("Captured counter value of "+sItemName+". The value is:"+qty);
			 }
			 else
			 {
				 testFailure("Function getCounterValue failed: Item "+sItemName+" does not have a counter value");
				 CapturePage();
			 }

		 }
		 else
		 {
			 testFailure("Function getCounterValue failed: Item "+sItemName+" not found on watchlist");
			 CapturePage();
		 }
		 return qty;
	 }

	 public void getWatchlistCounterValue(String sItemName,String colName) throws Exception{
		 int appender=checkColumnExists(colName);
		 if(appender==0){
			 datatable.getGlobalDatatable().addColumn("Global",colName,0);
		 }
		 String tmpCol=getWatchlistCounterValue(sItemName);
		 //String tmpVal=(String)datatable.getGlobalDatatable().getValue("Global",0, tmpCol);
		 datatable.getGlobalDatatable().setValue("Global",0,  colName, tmpCol); 
		 //datatable.getGlobalDatatable().deleteColumn("Global",tmpCol);
	 }

	 /************************************************************************************************************
	  * Function: getAllGridColumns
	  * Description: This function returns all the grid columns visible in the grid.
	  * Created By:  RUPA
	  * Date: Aug 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param iIndex : Index of the grid.
	  *    
	  * Returns: 
	  * 		@return null
	  * example - getAllGridColumns(0);
	  * **********************************************************************************************************
	  */

	 public String getAllGridColumns(@Arg("iIndex")int iIndex) throws Exception{
		 info("Starting:Function getAllGridColumns");
		 String gridId;
		 String fieldName="";
		 String colIndex2="";
		 int flag=0;
		 if(!bDB){
			 checkFrame();
			 gridId = getGridObjReference(iIndex);
			 if(gridId!=null){


				 List<DOMElement> tdValues=web.element("//web:table[@id='jdeGridHeaderData"+gridId+"']/web:tr[@id='hdrRow"+gridId+"']").getElementsByTagName("td");


				 for(int i=0;i<tdValues.size();i++)
				 {

					 if(tdValues.get(i).getClassName()!=null && tdValues.get(i).getClassName().equalsIgnoreCase("JSGridHeaderCell"))
					 {
						 //String[] colIndex3 = new String[tdValues.size()] ;
						 colIndex2=	tdValues.get(i).getDisplayText();

						 if(colIndex2!=null)
						 {

							 if(fieldName.equals(""))
							 {
								 fieldName=colIndex2.replaceAll("[\\t\\n\\r]+"," ");
							 }else
							 {
								 fieldName=fieldName+";"+colIndex2.replaceAll("[\\t\\n\\r]+"," ");
							 }

						 }

					 }

				 }
			 }
			 //datatable.getGlobalDatatable().addColumn("Global","gridColumns",0);
			 //datatable.getGlobalDatatable().setValue("Global",0, "gridColumns" ,fieldName);

		 }
		 info("Finished:Function getAllGridColumns");
		 return fieldName;

	 }

	 public void getAllGridColumns(@Arg("iIndex") int iIndex, String colName) throws Exception {
		 int appender=checkColumnExists(colName);
		 if(appender==0){
			 datatable.getGlobalDatatable().addColumn("Global",colName,0);
		 }
		 String tmpVal= (String)getAllGridColumns(iIndex);	 
		 datatable.getGlobalDatatable().setValue("Global",0,  colName, tmpVal);	
	 }

	 /************************************************************************************************************

	  * Function: isGridHidden
	  * Description: This function checks if the specified grid is visible or hidden on the page
	  * Created By: Yashin Bidar
	  * Date: Sep 2016 
	  * To be incorporated: Nil 
	  * InputParameters:
	  * @param id:html id of the grid
	  * @param sStatus:true if grid should be hidden, else false
	  * *******************************************************************************************************/	 
	 public void isGridHidden( @Arg("ID") String id,Boolean isHidden) throws Exception {  
		 String sIsHidden=null;
		 info("Starting function isGridHidden");
		 incrementValidationCount(1);
		 if(docIndex==null){
			 getDocIndex();
		 }
		 String bro;
		 if(isModalForm==true){
			 bro=e1Browser;
		 }else{
			 bro="/";
		 }

		 if(web.exists(bro+"/web:table[@className='JSGridQTPClass' and @id='jdeGrid*']",20))
		 {              
			 setErrorRecovery(BasicErrorRecovery.ERR_FILE_NOT_FOUND, ErrorRecoveryAction.Fail);
			 executeJSCode();
			 /*PropertyTestList prop=new PropertyTestList();
			prop.add("className", "JSGridQTPClass");
			List<DOMElement> allTables=web.document(e1Browser).getElementsByTagName("table", prop); */       
			 List<DOMElement> allTables=web.document(e1Browser).getElementsByClassName("JSGridQTPClass"); 
			 //List<String> gridIds = new ArrayList<String>();
			 String output[];
			 gridIds.clear();
			 for(DOMElement tab:allTables){
				 String sId=tab.getAttribute("id");

				 if(sId.startsWith("jdeGrid"))
				 {
					 info("output 1 :");
					 output =  web.document(e1Browser).executeJsFunction("hiddenGrid",sId.replace("jdeGrid", ""));
					 info("output 2 :"+output[0]);
					 if(!output[0].equals("Hidden"))
					 {
						 /*web.table(e1Browser+"/web:table[@id='"+sId+"' ]").setSelectedJSElement();

						//web.document(e1Browser).executeJavaScript("function getVisibilty(){return selectedOATSWebDomElement.currentStyle.visibility.toString();}");
						web.document(e1Browser).executeJavaScript("function getVisibilty(){return selectedOATSWebDomElement.style.visibility.toString();}");*/

						 web.document(e1Browser).executeJavaScript("function getVisibilty(){return window.getComputedStyle(document.getElementById('"+sId+"'),null).getPropertyValue('visibility');}");
						 String s[]=web.document(e1Browser)
						 .executeJsFunction("getVisibilty");

						 info("hi");
						 //String s[]=web.document(e1Browser).executeJsFunction("getVisibilty");

						 info(s[0]);
						 if(!s[0].equalsIgnoreCase("hidden"))
						 {

							 if(sId.length()<8)
							 {
								 warn("Invalid Grid Id");
							 }

							 gridIds.add(sId.replace("jdeGrid", ""));

						 }
					 }
				 }
			 }
		 }
		 int flag=0;
		 for(int i=0;i<gridIds.size();i++)
		 {
			 if(id.contains("jdeGrid")){				 
				 id=id.replace("jdeGrid","");}

			 if(id.equalsIgnoreCase(gridIds.get(i)))
			 {
				 flag=1;
				 break;
			 }
		 }
		 if(flag==0)
		 {
			 if(isHidden)
			 {
				 info("function isGridHidden Passed:Grid with id "+id+" is hidden");
			 }
			 else
			 {
				 CapturePage();
				 testFailure("function isGridHidden Failed:Grid with id "+id+" is hidden");
			 }
		 }
		 else
		 {
			 if(!isHidden)
			 {
				 info("function isGridHidden Passed:Grid with id "+id+" is visible");
			 }
			 else
			 {
				 CapturePage();
				 testFailure("function isGridHidden Failed:Grid with id "+id+" is visible");
			 }
		 }

	 }


	 
	 
	 
	 
	 /************************************************************************************************************
	  * Function: navigateSubMenu Description: This function is used to navigate to an application by expanding the containing sub folders (like fastpath, Favorite). 
	  * Created By: Ghulam Quadir 
	  * Modified By: Date: Aug 2016 
	  * To be incorporated: Nil InputParameters:
	  * @param sCategory : It is navigation Bar type (Like Navigation , Favorites, Open Applications)
	  * @param appPath :Semi colon separated path of the application. If there are two items with same name write the index like 'index|SubMenuName'
	  * @return Nil 
	  * Example:
	  *         navigateSubMenu("Navigator", "2#|Processing Options;PO TEST")//Here, 2 is the index of that item
	  *         navigateSubMenu("Navigator", "Power User Tasks;Support Setup;Action Plan")
	  *         navigateSubMenu("Favorite", "Manage Favorite");
	  *         *****************************************************************
	  */
	 /*THIS FUNCTION IS BASED ON ONLY SPAN AND ANCHOR TAG. IF THERE IS A COMBINATION OF TD,SPAN AND ANCHOR TAG IT WILL FAIL
	  *THIS SCENARIO IS NOT COMMON AND NOT SO URGENT, SO WE ARE NOT HANDLING THIS FOR NOW. IT WOULD BE EASY TO REVISE THE EXISTING CODE LATER ACCORDINGLY.*/
	 public void navigateSubMenu(@Arg("sCategory") String sCategory, @Arg("appPath")	String appPath)  {
		 try
		 {
		 info("Starting function navigateSubMenu");
		 
		 String[] pathItem = appPath.split(";");
		 String element = null;
		 String[] elementItem = null;

		 DOMDocument doc=null;
		 DOMElement eleDom=null;
		 List<DOMElement> divList=null;
		 String currId=null;
		 String childId=null;

		 if (!(web.exists("//web:input_text[@id='TE_FAST_PATH_BOX' ]",60))) {//It insures navigation bar is rendered/loaded properly.
			 OSPreferences("Fail");
			 web.window(e1BrowserWindow).capturePage();
			 testFailure("Function navigateSubMenu Exiting. E1 page does not exist.");
			 return;
		 }

		 String firstDivID="";
		 if(sCategory.equalsIgnoreCase("navigator"))//Fastpath
		 {
			 firstDivID="e1MMenuRootInner";
			 web.textBox("//web:input_text[@id='TE_FAST_PATH_BOX']").click();
			 Thread.sleep(1000);
		 }else if(sCategory.equalsIgnoreCase("Favorites"))
		 {
			 firstDivID="e1MMenuFav";
			 web.element("//web:div[@id='drop_fav_menus']").click();
			 info("Favorites clicked"); 
			 Thread.sleep(1000);
		 }else if(sCategory.equalsIgnoreCase("Open Applications"))
		 {
			 web.element("//web:div[@id='drop_openapps']").click();
			 //Work on it if needed. Items in it are <table> not <div>
			 return;
		 }

		 //Handling 'Manage Favorites' and 'Add to Favorites'. Because div containing them have same task labele 'Favorites'
		 if((sCategory.equalsIgnoreCase("Favorites")) && (appPath.trim().equalsIgnoreCase("Manage Favorites")))
		 {
			 web.element("//web:span[@id='ManageFav']").click();
			 info("PASSED : Manage Favorites Clicked");
			 return;
		 }else if((sCategory.equalsIgnoreCase("Favorites")) && (appPath.trim().equalsIgnoreCase("Add to Favorites")))
		 {
			 web.element("//web:span[@id='AddToFav']").click();
			 info("PASSED : Add to Favorites Clicked");
			 return;
		 }
		 
		 
		 //This block is only handling Navigation SubMneu (Navigator->Actions->Help/My System Options/My System Profile...)
		 //This is because the HTML Elements structure for "Actions" is not same as remaining oters.
		 if(sCategory.equalsIgnoreCase("navigator"))//Fastpath
		 {
			 if(pathItem[0].trim().equalsIgnoreCase("Actions"))//"Actions" is encoutered 
			 {
				 //Clcik on Action
				 web.element("//web:table[@id='ActionsSubMenuTable']").click();
				 info("Clicked on Actions");
				 Thread.sleep(1000);
				 String childPath="//web:div[@id='actionsSubMenu']/web:a[@text='"+pathItem[1].trim()+"']";
				 boolean childPathExist=web.exists(childPath);
				 //info("childPathExist="+childPathExist);
				 if(childPathExist==true)
				 {
					 web.element(childPath).click();
					 info("Passed: Click on Navigation SubMenu "+appPath);
				 }else
				 {
					 CapturePage();
					 testFailure("FAILED : Navigation SubMenu "+appPath+" does not exists"); 
				 }
				 Thread.sleep(3000);
				 return;
			 }
		 }
		 
		
		 int i = 0;
		 for (i = 0; i < pathItem.length; i++) {
			 elementItem = Pattern.compile("[#$]").split(pathItem[i].trim());
			 //info("elementItem[0]="+elementItem[0]);
			 String actualEleItem="";
			 int intIndex=0;
			 try {
				 intIndex = Integer.parseInt(elementItem[0]);
				 actualEleItem=elementItem[1];
			 }catch (NumberFormatException e) {
				 actualEleItem=elementItem[0];
			 }			
			 actualEleItem = actualEleItem.replaceAll("-","&#45;");
			 //info("actualEleItem="+actualEleItem);
			 String childTreeId="";
			 if(i==0)
			 {
				 eleDom=web.element("//web:div[@id='"+firstDivID+"']");
				 divList=eleDom.getElementsByTagName("div");
			 }else
			 {
				 childTreeId="flyoutInnerTabletreechild"+currId.replace("fldnode","");
				 eleDom=web.element("//web:table[@id='" + childTreeId+"']");
				 divList=eleDom.getElementsByTagName("div"); 
			 }

			 String divId="";
			 String taskLabel="";
			 int count=-1;//This will indicate how many times a single item appears in a sigle folder/fastpath subfolder
			 boolean flag=false;
			 for(int j=0;j<divList.size();j++)
			 {
				 taskLabel=(divList.get(j)).getAttribute("tasklabel");
				 if(taskLabel==null)
				 {
					 continue;
				 }

				 //taskLabel.replaceAll("-","&#45;");				

				 //info("div task label="+taskLabel);
				 if(taskLabel.equals(actualEleItem))
				 {
					 count++;
					 if(count==intIndex)
					 {
						 divId=(divList.get(j)).getAttribute("id");
						 currId="fldnode"+divId.replace("node","");
						 if(i==pathItem.length-1)//It is the last item of fastpath
						 {
							 if((web.element("//web:a[@id='" + currId + "']")).exists() && (web.element("//web:a[@id='" + currId + "']"))!=null){
								 web.element("//web:a[@id='" + currId + "']").click();
							 }else{
								 web.element("//web:span[@id='" + currId + "']").click();
							 }
						 }else 
						 {
							 web.element("//web:span[@id='" + currId + "']").click();
						 }
						 info("Navigation SubMenu "+pathItem[i]+" clicked");
						 flag=true;
						 Thread.sleep(2000);
						 syncFrame();
					 }
				 }
			 }
			 if(flag==false)
			 {
				 OSPreferences("Fail");
				 web.window(e1BrowserWindow).capturePage();
				 testFailure("FAILED : Navigation SubMenu "+actualEleItem+" does not exists"); 
				 return;
			 }
		 }
		 info("End Function navigateSubMenu");
		 }catch(Exception e)
		 {
			 e.printStackTrace();
		 }
	 }

	 /*************************************************************************************************************
	  * Function: outputCSSProperties
	  * Description: This function used to output css properties or class name to the datatable
	  * Created By: Sunil
	  * Date: May 2017
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * @param iId : id of an element. 
	  * @param : cssStyleAttr : CSS property or class name of an element separated by semicolon(;)
	  * Returns: 
	  *          @return Nil
	  * Example : outputCSSProperties( 0 , "border-right-color;border-color;classname");
	  **************************************************************************************************************/	
	 public void outputCSSProperties( String iId, String cssStyleAttr) throws Exception{
		 checkFrame();
		 String elementType="";
		 String[] cssStyleAttributes = cssStyleAttr.split(";");
		 String allCSSProperties = "";
		 DOMDocument doc =null;
		 //info("cssStyleAttributes length : "+cssStyleAttributes.length);
		 if(docIndex==null){
			 getDocIndex();
		 }
		 //info("e1Browser : "+e1Browser);
		 DOMElement ele = web.document(e1Browser).getElementById(iId);
		 if(ele.exists())
		 {    
			 doc=web.document(e1Browser);
			 doc.executeJavaScript("function getCSSPro(id , property){"
				 +"var element = document.getElementById(id);"
				 +"property = property.toLowerCase();"
				 +"var pro;"
				 +"if(property == \"class\" || property == \"classname\"){"
				 +"	pro = element.className;"
				 +"}else{"
				 +"	var style = window.getComputedStyle(element);"
				 +"	pro = style.getPropertyValue(property);"
				 +"}"
				 +"return pro;"
				 +"}" ); 
			 for(int i=0;i<cssStyleAttributes.length;i++){
				 String[] output = doc.executeJsFunction("getCSSPro", iId , cssStyleAttributes[i]);
				 info(cssStyleAttributes[i]+"="+output[0]);
				 if(output[0]=="" || output[0] == null){
					 getScript("EOneUtility").callFunction("CapturePage");
					 testFailure("Failed : "+cssStyleAttributes[i]+" not found on the page.");
					 return;
				 }
				 if(allCSSProperties==""){
					 allCSSProperties = cssStyleAttributes[i]+"="+output[0];
				 }
				 else{
					 allCSSProperties =allCSSProperties+";"+cssStyleAttributes[i]+"="+output[0];
				 }

			 }
			 String colName = "cssProperty";
			 int appender=(Integer)getScript("EOneUtility").callFunction("checkColumnExists",colName);
			 if(appender!=0){
				 colName=colName+appender;
			 }
			 datatable.getGlobalDatatable().addColumn("Global", colName,0);
			 datatable.getGlobalDatatable().setValue("Global", 0, colName,allCSSProperties);
		 }else{
			 getScript("EOneUtility").callFunction("CapturePage");
			 testFailure("Failed : Specified element id "+iId+" not present on the page.");
		 }
	 }

	 //Overloaded function for ScriptBuilder
	 public void outputCSSProperties( String iId, String cssStyleAttr, String sColName) throws Exception{
		 checkFrame();
		 String elementType="";
		 String[] cssStyleAttributes = cssStyleAttr.split(";");
		 String allCSSProperties = "";
		 DOMDocument doc =null;
		 //info("cssStyleAttributes length : "+cssStyleAttributes.length);
		 if(docIndex==null){
			 getDocIndex();
		 }
		 //info("e1Browser : "+e1Browser);
		 DOMElement ele = web.document(e1Browser).getElementById(iId);
		 if(ele.exists())
		 {    
			 doc=web.document(e1Browser);
			 doc.executeJavaScript("function getCSSPro(id , property){"
				 +"var element = document.getElementById(id);"
				 +"property = property.toLowerCase();"
				 +"var pro;"
				 +"if(property == \"class\" || property == \"classname\"){"
				 +"	pro = element.className;"
				 +"}else{"
				 +"	var style = window.getComputedStyle(element);"
				 +"	pro = style.getPropertyValue(property);"
				 +"}"
				 +"return pro;"
				 +"}" ); 
			 for(int i=0;i<cssStyleAttributes.length;i++){
				 String[] output = doc.executeJsFunction("getCSSPro", iId , cssStyleAttributes[i]);
				 info(cssStyleAttributes[i]+"="+output[0]);
				 if(output[0]=="" || output[0] == null){
					 getScript("EOneUtility").callFunction("CapturePage");
					 testFailure("Failed : "+cssStyleAttributes[i]+" not found on the page.");
					 return;
				 }
				 if(allCSSProperties==""){
					 allCSSProperties = cssStyleAttributes[i]+"="+output[0];
				 }
				 else{
					 allCSSProperties =allCSSProperties+";"+cssStyleAttributes[i]+"="+output[0];
				 }

				 String colName="";
				 if(i==0)
				 {
					 colName = sColName;
				 }else
				 {
					 colName = cssStyleAttributes[i];	
				 }
				 int appender=(Integer)getScript("EOneUtility").callFunction("checkColumnExists",colName);
				 if(appender!=0){
					 colName=colName+appender;
				 }
				 datatable.getGlobalDatatable().addColumn("Global", colName,0);
				 datatable.getGlobalDatatable().setValue("Global", 0, colName,allCSSProperties);  
			 }

		 }else{
			 getScript("EOneUtility").callFunction("CapturePage");
			 testFailure("Failed : Specified element id "+iId+" not present on the page.");
		 }
	 }
	 /************************************************************************************************************
        * Function: reorderMenuItem
        * Description: This function will reorder menu item exists in the specified section.
        * Note : Before calling this function ensure that you must have clicked on either form/row menu on tool bar or right clicked on form/row area.
        * Created By: Sunil
        * Date: Feb 2017
        * To be incorporated: Nil
        * Input Parameters: 
        *         @param MenuType : Type of the menu.(i.e.,Form, Row)
        *         @param ScurceItems : Source of menu item name. In case sub menu pass sub menu item name sepreted by semicolumn(;).
        *         @param DestItems : Destination item name. In case sub menu pass sub menu item name sepreted by semicolumn(;).
        *         @param SourceSection : Section name in which source item is present.(Favorites/form/row present on pop up window).
        *         @param DestSection : Section name in which destination item is present.(Favorites/form/row present on pop up window).
        * Returns: 
        *         @return Nil
        * Example: 
        * reorderMenuItem( "Form", "Customer;Rebate History ", "Favorites", "Form", "Favorites");
        * reorderMenuItem( "Row", "A/B Information ", "Customer", "Favorites", "Row" );
        *   
        * **********************************************************************************************************
        */
      public void reorderMenuItem(String MenuType, String SourceItems, String DestItems, String SourceSection, String DestSection) throws Exception {
            checkFrame();
            info("Begin Function: reorderMenuItem");
            if((MenuType.trim()).equalsIgnoreCase("Form") || (MenuType.trim()).equalsIgnoreCase("Row")){
                  MenuType = MenuType.toUpperCase();

            }else {
                  CapturePage();
                  testFailure("Menu Type "+MenuType+" is not present");
                  return ;
            }

            String sourceId = "";
            String destId = "";
            for(int SourceDest = 0; SourceDest < 2; SourceDest++){
                  String[] menuItem;
                  String Section = "";
                  if( SourceDest == 1){
                        menuItem = SourceItems.split(";");
                        Section = SourceSection;
                  }else{
                        menuItem = DestItems.split(";");
                        Section = DestSection;
                  }

                  String element = null;
                  String[] elementItems = null;
                  List<DOMElement> nobrList=null;
                  boolean flag=false;
                  String elementValue="";
                  ArrayList<String> getEachElevalue=new ArrayList<String>();

                  DOMDocument doc=null;
                  DOMElement eleDom=null;

                  if ((web.exists("//web:img[@id='"+MenuType+"_EXIT_BUTTON' ]",60))) {//This ensures presence of "Form Menu icon" on the page 
                         //customClick(web.element("//web:img[@id='"+MenuType+"_EXIT_BUTTON' ]"));
                        //info(MenuType+" menu clicked");
                        doc=web.document(e1Browser);
                        String currId=web.element("//web:img[@id='"+MenuType+"_EXIT_BUTTON' ]").getAttribute("launchmenuid");//Row menu div id is different for all application.
                        eleDom=web.element("//web:div[@id='"+currId+"']");
                        String style =eleDom.getAttribute("style");
                        info("style display property : "+style);
                        boolean isPresent = false;
                        if(style.contains("display: block;") || style.contains("display=\"block\"")){
                              for(int i=0;i<menuItem.length;i++)
                              {
                                    isPresent = false;
                                    int itemIndex=0;
                                    element=menuItem[i].trim();//First Item of path
                                    elementItems=Pattern.compile("[|]").split(element);
                                    if(elementItems.length==2)//Index is present with from menu item
                                    {
                                          itemIndex=Integer.parseInt(elementItems[0]); 
                                           elementValue=elementItems[1];
                                          getEachElevalue.add(elementValue);
                                    }else
                                    {
                                          elementValue=elementItems[0];
                                          getEachElevalue.add(elementValue);
                                    }
                                    eleDom=web.element("//web:div[@id='"+currId+"']");
                                    nobrList=eleDom.getElementsByTagName("nobr");

                                    int count=-1;
                                    String innerHTML="";
                                    String divId="";

                                    for(DOMElement tempDom:nobrList)
                                    {
                                          innerHTML=tempDom.getAttribute("innerHTML");
                                          flag=false;

                                          if((innerHTML.replaceAll("&nbsp;","")).equalsIgnoreCase(elementValue))
                                          {
                                                isPresent = true;
                                                count++;
                                          }
                                          if(itemIndex==count)//This is the element to select
                                          {// in this block Hover/Click over the item and find the id of next div.
                                                //Get the First div element.
                                                DOMElement temp=tempDom;
                                                for(int j=0;;j++)
                                                {
                                                      temp=temp.getParent(); 
                                                       if((temp!=null)&&(temp.getTag().contains("DIV")))//getTag() return tag name in capital letter
                                                      {
                                                            divId=temp.getAttribute("id");
                                                            currId=divId.replace("-Show","");//This will be id of div of next path item
                                                            if(i==menuItem.length-1)//It is last element.
                                                            {    
                                                                  String str = "";
                                                                  if(Section.equalsIgnoreCase("Favorites") && MenuType.equalsIgnoreCase("form")){
                                                                        str = "FE";
                                                                  }else if(Section.equalsIgnoreCase("Favorites") && MenuType.equalsIgnoreCase("row")){
                                                                        str = "RE";
                                                                  }else if(Section.equalsIgnoreCase("form") || Section.equalsIgnoreCase("row")){
                                                                        str = "HE";
                                                                        count = -1;
                                                                        if(divId.contains("FE") || divId.contains("RE")){
                                                                              break;
                                                                        }
                                                                  }else{
                                                                        CapturePage();
                                                                        testFailure("FAILED : Function [reorderMenuItem] Exiting. Specified form menu section "+Section+" is not present.");
                                                                        return;
                                                                  }
                                                                  if(divId.contains(str) || divId.contains("Favorites"))//Parent div has id containing with "FE", "RE", "HE" or "Favorites"
                                                                  {
                                                                        //perform reorder operation
                                                                        sourceId = divId;
                                                                        info("sourceId = "+ sourceId+" destId = "+destId);
                                                                        if(SourceDest == 1){
                                                                              info("div style ="+style);
                                                                              //web.element("//web:div[@id='"+sourceId+"']").focus();
                                                                              //oracle.oats.scripting.modules.functionalTest.common.api.internal.types.Point pt1 = web.element("//web:div[@id='"+sourceId+"']").getElementCenterPoint();
                                                                              if(((style.contains("overflow-y: scroll;")) ||style.contains("overflow-y=\"scroll\""))&&(sourceId.contains("HE")||destId.contains("HE"))){
                                                                                    info("scroll bar present");
                                                                                    web.element("//web:div[@id='"+sourceId+"']").mouseOver(true);//.focus();
                                                                                    oracle.oats.scripting.modules.functionalTest.common.api.internal.types.Point pt1 = web.element("//web:div[@id='"+sourceId+"']").getElementCenterPoint();
                                                                                   Robot robot = new Robot();
                                                                                    robot.mouseMove(pt1.x, pt1.y);
                                                                                    robot.delay(2000);
                                                                                    robot.mousePress( InputEvent.BUTTON1_MASK);
                                                                                    robot.delay(2000);
                                                                                   web.element("//web:div[@id='"+destId+"']").mouseOver(true);//.focus();
                                                                                    robot.delay(2000);
                                                                                    oracle.oats.scripting.modules.functionalTest.common.api.internal.types.Point pt2 = web.element("//web:div[@id='"+destId+"']").getElementCenterPoint();
                                                                                    robot.mouseMove(pt2.x, pt2.y);
                                                                                    robot.delay(2000);
                                                                                    robot.mouseRelease( InputEvent.BUTTON1_MASK);
                                                                                    info("Passed : "+MenuType+" menu item '"+ SourceItems+" present at "+SourceSection+" section reordered with menu item "+DestItems+" present at "+DestSection+" section.");

                                                                              }
                                                                              else{
                                                                                    //web.element("//web:div[@id='"+sourceId+"']").mouseOver(true);
                                                                                    // web.element("//web:div[@id='"+sourceId+"']").mouseOver(false);
                                                                                    //web.element("//web:div[@id='"+sourceId+"']").focus();

                                                                                    //info(""+web.element("//web:div[@id='"+sourceId+"']").getChildren().get(0).getChildren().get(0).getChildren().get(0).getChildren().get(0).getChildren().get(0).getTag());
                                                                                   //oracle.oats.scripting.modules.functionalTest.common.api.internal.types.Point pt1 = web.element("/web:window[@index='0' or @title='JD Edwards']/web:document[@index='10']/web:td[@text='SO Header Browse ' or @index='41']").getElementCenterPoint();
                                                                                     oracle.oats.scripting.modules.functionalTest.common.api.internal.types.Point pt1 = web.element("//web:div[@id='"+sourceId+"']").getElementCenterPoint();

                                                                                    //oracle.oats.scripting.modules.functionalTest.common.api.internal.types.Point pt2 = web.element("/web:window[@index='0' or @title='JD Edwards']/web:document[@index='10']/web:td[@text='Favorites ' or @index='28']").getElementCenterPoint();
                                                                                    Robot robot = new Robot();
                                                                                    robot.mouseMove(pt1.x, pt1.y);
                                                                                    robot.delay(2000);
                                                                                    robot.mousePress( InputEvent.BUTTON1_MASK);
                                                                                    robot.delay(2000);
                                                                                    // web.element("//web:div[@id='"+destId+"']").focus();
                                                                                    robot.delay(2000);
                                                                                    oracle.oats.scripting.modules.functionalTest.common.api.internal.types.Point pt2 = web.element("//web:div[@id='"+destId+"']").getElementCenterPoint();
                                                                                    robot.mouseMove(pt2.x, pt2.y);
                                                                                    robot.delay(2000);
                                                                                    robot.mouseRelease( InputEvent.BUTTON1_MASK);

                                                                                    //web.element("//web:div[@id='"+sourceId+"']").dragTo("//web:div[@id='"+destId+"']");
                                                                                    // web.element("//web:div[@id='"+sourceId+"']").dragTo("//web:div[@id='"+destId+"']");
                                                                                    info("Passed : "+MenuType+" menu item '"+ SourceItems+" present at "+SourceSection+" section reordered with menu item "+DestItems+" present at "+DestSection+" section.");
                                                                              }
                                                                        }else{
                                                                              destId = divId;
                                                                        }
                                                                        flag=true;
                                                                        break;
                                                                  }else
                                                                  {
                                                                        CapturePage();
                                                                        testFailure("FAILED : Function [reorderMenuItem] : "+MenuType+" menu '"+getEachElevalue+"' not found in specified section ["+Section+"].");
                                                                        return;
                                                                  }

                                                            }else//mouse over element.
                                                            {
                                                                  //temp.getChildren().get(0).mouseOver();
                                                                  //temp.getChildren().get(0).click();
                                                                  temp.getChildren().get(0).focus();
                                                                  temp.getChildren().get(0).mouseOver(false);
                                                                  flag=true;
                                                                  break;
                                                            }
                                                      }
                                                      if(j==100)//Find upto hundred parent element only
                                                      {
                                                            break;
                                                      }
                                                }
                                                if(flag==true)//Element found. So come out of outer loop also;
                                                {
                                                      break;
                                                }
                                          }
                                    }
                                    if(isPresent == false ){
                                          if(SourceDest == 1){
                                                testFailure("FAILED : Function [reorderMenuItem] : "+MenuType+" menu '"+SourceItems+"' not found in specified section ["+SourceSection+"].");
                                          }else{
                                                testFailure("FAILED : Function [reorderMenuItem] : "+MenuType+" menu '"+DestItems+"' not found in specified section ["+DestSection+"].");
                                          }
                                          getScript("EOneUtility").callFunction("CapturePage");
                                          break;
                                    }
                              }
                              if(isPresent == false ){
                                    break; 
                               }
                        }else{
                              getScript("EOneUtility").callFunction("CapturePage");
                              testFailure("Failed : Pop Up menu is not present on the page to validate menu item. ");
                              return;
                        }
                  }
            }
            info("End Function : [reorderMenuItem].");
      }



      /************************************************************************************************************
       * Function: rightClickGridRowCol(iIndex,iRow,sFieldName)  
       * Description: This function will right click under the specified column of the specified row on the grid.
       * Created By: Rupa
       * Modified By: Sunil
       * Date: Feb 2017
       * To be incorporated: Nil
       * Input Parameters: 
       *              @param iIndex - index of the grid in the webpage starting from 0 
       *              @param iRow - Visible row number starting from 0
       *              @param sFieldName/cellValue - column header of the cell to be right clicked ,or colIndex value.                     
       * Returns: Nil
       * To Be incorporated:Nil
       * **********************************************************************************************************
       */
     public void rightClickGridRowCol(@Arg("iIndex") int iIndex,@Arg("iRow") int iRow, @Arg("sFieldName") String sFieldName)throws Exception {
           info("Started:Function rightClickGridRowCol ");
           checkFrame();
           info("gridId :******************** ");
           String colIndex="";
           String gridId = getGridObjReference(iIndex);
           info("gridId : "+gridId);
           if(gridId!=null){
                 int rCount=getGridRowCountByIndex(iIndex);
                 info("rCount : "+rCount);
                 if(iRow>(rCount-1)){ 
                              
                        web.window(e1BrowserWindow).capturePage();
                       testFailure("Clicking grid row "+(iRow+1)+" Failed:  grid only has "+rCount+" rows");
                       return;
                 }
                 //if(sFieldName.matches(".*\\d+.*"))
                 if(sFieldName.matches("\\d+"))
                 {
                       System.out.println("It has numerics");
                       colIndex=sFieldName;
                 }
                 else
                 {
                       colIndex=getColIndexForColName(gridId,sFieldName);
                 }
                 System.out.println("colIndex"+colIndex);
                 if(colIndex!=null){
                       int rowIndex=getRowIndexForVisibleRow(gridId,iRow);
                       web.document(e1Browser).executeJsFunction("clickGridAtRowCol", gridId.toString(),""+rowIndex,colIndex);
                       System.out.println("'gce"+gridId+"."+iRow+"."+colIndex+"'");
                       String gridCellId1="'gce"+gridId+"."+iRow+"."+colIndex+"'";
                       if(web.textBox(e1Browser+"/web:div[@id="+gridCellId1+"]").exists()){
                             web.textBox(e1Browser+"/web:div[@id="+gridCellId1+"]").focus();
                             web.textBox(e1Browser+"/web:div[@id="+gridCellId1+"]").mouseDown(true);
                             web.textBox(e1Browser+"/web:div[@id="+gridCellId1+"]").mouseUp(true);
                             info("Identified cell under column " + sFieldName + "& clicked");
                       }
                       else if( web.element(e1Browser+"/web:span[@id="+gridCellId1+"]").exists())
                        {
                             web.element(e1Browser+"/web:span[@id="+gridCellId1+"]").getNextSibling().focus();
                             web.element(e1Browser+"/web:span[@id="+gridCellId1+"]").getNextSibling().mouseDown(true);
                             web.element(e1Browser+"/web:span[@id="+gridCellId1+"]").getNextSibling().mouseUp(true);      
                        }else {
                                 String[] output1 = web.document(e1Browser).executeJsFunction("SetGridDatatAtRowCol", gridId,""+rowIndex,colIndex,"");
                                 web.textBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_text[@id='"+output1[0]+"']").focus();
                                 web.textBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_text[@id='"+output1[0]+"']").mouseDown(true);
                                 web.textBox(e1Browser+"/web:form[@id='E1PaneForm']/web:input_text[@id='"+output1[0]+"']").mouseUp(true);
                                 info("Identified cell under column " + sFieldName + "& clicked");
                        }
                 }
                 else{
                       web.window(e1BrowserWindow).capturePage();
                       
                       testFailure("[clickGridRowcol] Cell identification Failed:  Failed to identify column "+ sFieldName);
                 }
           }
           info("Finished:Function rightClickGridRowCol ");
     }



	 /************************************************************************************************************
	  * Function: getChartTitle
	  * Description: Used to get the title of the chart specified by index
	  * Created By: Sravan
	  * Date: October 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param chartIndex :Chart Index starting from 0  
	  * Returns: 
	  * 		@return string chartTitle
	  * **********************************************************************************************************
	  */
	 public String getChartTitle(int chartIndex) throws Exception{
		 if(docIndex==null){
			 getDocIndex();
		 }
		 DOMElement chartTitleElem=web.element("/"+"/web:span[@id='chartTitle']["+chartIndex+"]");
		 if((chartTitleElem!=null)&& (chartTitleElem.exists())){
			 String chartTitle= chartTitleElem.getDisplayText();
			 info("Title of the chart with Index "+chartIndex+" is "+chartTitle);
			 return chartTitle;
		 }else{
			 CapturePage();
			 testFailure("Chart with Index "+chartIndex+" not found");
			 return "";
		 }
	 }

	 public void getChartTitle(int chartIndex,String colName) throws Exception{
		 int appender=checkColumnExists(colName);
		 if(appender==0){
			 datatable.getGlobalDatatable().addColumn("Global",colName,0);
		 }
		 String tmpVal=(String)getChartTitle(chartIndex);		 
		 datatable.getGlobalDatatable().setValue("Global",0,  colName, tmpVal);	
	 }

	 /************************************************************************************************************
	  * Function: getChartType
	  * Description: Used to get the type of the chart
	  * Created By: Sravan
	  * Date: October 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param chartIndex :Chart Index starting from 0 
	  * Returns: 
	  * 		@return chart Type (Bar/line/combo/pie)
	  * **********************************************************************************************************
	  */
	 public String getChartType(int chartIndex) throws Exception{
		 JETChart chart=jet.chart("//web:JETChart[@id='chart']["+chartIndex+"]");
		 if(chart!=null&& chart.exists()){
			 return chart.getChartType();

		 }else{
			 CapturePage();
			 testFailure("Chart with Index "+chartIndex+" not found");
			 return "";
		 }

	 }
	 public void getChartType(int chartIndex,String colName) throws Exception{
		 int appender=checkColumnExists(colName);
		 if(appender==0){
			 datatable.getGlobalDatatable().addColumn("Global",colName,0);
		 }
		 String tmpVal=(String)getChartType(chartIndex);	 
		 datatable.getGlobalDatatable().setValue("Global",0,  colName, tmpVal);	
	 }

	 /************************************************************************************************************
	  * Function: getColNameForColIndex(iIndex,colIndex)
	  * Description: This function is used get the column name if the index of a column is passed 
	  * Created By: Anusha Bonam
	  * Date: August 2016
	  * To be incorporated:
	  * Input Parameters:
	  *      @param iIndex : index of the grid(generally starts from 0) 
	  *          @param colIndex : index of the Column (generally starts from 0) 
	  * @return Column Name
	  * Example : String a = getColNameForColIndex(0,0)
	  * **********************************************************************************************************
	  */
	 public String getColNameForColIndex(@Arg("iIndex") int iIndex, @Arg("colIndex") int colIndex) throws Exception {        
		 checkFrame();
		 String colName=null,c1 = null, gridId;
		 if(docIndex==null){
			 getDocIndex();
		 }

		 gridId = getGridObjReference(iIndex);

		 if (!bDB) {
			 if (gridId != null) {				
				 String[] output = web.document(e1Browser).executeJsFunction("getColLen", gridId);   

				 int colCount=0;
				 try{colCount=Integer.parseInt(output[0]);}catch (NumberFormatException e) {
					 warn("numberformat exception "+output[0]);
				 }				
				 int ivx;
				 String fieldName=null;				

				 if((colIndex<0)||(colIndex>(colCount-1)))
				 {
					 CapturePage();
					 testFailure("Column does not exist");
					 return null;
				 }
				 int x=0;
				 for(ivx=0;ivx<=(colCount-1);ivx++,x++){					
					 output = web.document(e1Browser).executeJsFunction("getColLabel", gridId,Integer.toString(ivx));
					 fieldName=output[0];					
					 String[] colIsHidden = web.document(e1Browser).executeJsFunction("gridCellIsHidden", gridId,Integer.toString(ivx));
					 if(colIsHidden[0].equalsIgnoreCase("false")){
						 if(fieldName!=null){
							 fieldName=fieldName.replaceAll(newline, "");
							 fieldName=fieldName.replaceAll(" ", "");
							 fieldName=fieldName.replaceAll("&#37;", "%");
							 fieldName=fieldName.replaceAll("&#39;", "'");
							 fieldName=fieldName.replaceAll("&#45;", "-");
							 fieldName=fieldName.replaceAll("&#40;", "(");
							 fieldName=fieldName.replaceAll("&#41;", ")");
							 fieldName=fieldName.replaceAll("&#42;", "*");
							 fieldName=fieldName.replaceAll("&#43;", "+");
							 fieldName=fieldName.replaceAll("&#38;", "&");

							 c1=fieldName.trim();							
							 if(colIndex==x){
								 info(c1+" Column is found at column index "+colIndex);
								 colName=c1;
								 return colName;
							 }
						 }
					 }
					 else{						
						 x=x-1;
					 }
				 }//for 
			 }
			 else{
				 CapturePage();
				 testFailure("Grid with index "+iIndex+" not found");
				 return null;
			 }
		 } 
		 if(colName==null){
			 CapturePage();
			 testFailure("Column with index "+colIndex+" does not exist");
		 }
		 return colName;
	 }

	 public void getColNameForColIndex(@Arg("iIndex") int iIndex,@Arg("colIndex") int colIndex, String colName) throws Exception {		 
		 int appender=checkColumnExists(colName);
		 if(appender==0){
			 datatable.getGlobalDatatable().addColumn("Global",colName,0);
		 }		 
		 String tmpVal=(String)getColNameForColIndex(iIndex, colIndex);		 
		 datatable.getGlobalDatatable().setValue("Global",0,  colName, tmpVal);
	 }

	 /************************************************************************************************************
	  * Function: getDataItemAttribute
	  * Description: Used to get attribute value of item from chart
	  * Created By: Sravan
	  * Modified By: Sunil
	  * Date: October 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param chartIndex :Chart Index starting from 0 
	  * 		@param groupIndex :Group Index starting from 0
	  * 		@param seriesIndex :Series Index starting from 0
	  * 		@param attributeName :Attribute name (color/bordercolor/group/series/value/tooltip)
	  * Returns: 
	  * 		@return Attribute Value
	  * **********************************************************************************************************
	  */
	 public String  getDataItemAttribute(int chartIndex, int groupIndex, int seriesIndex, String attributeName) throws Exception{
		 String val="";
		 JETChart chart=getJetChart(chartIndex);
		 try{
			 ChartDataItem item=chart.getDataItem(seriesIndex, groupIndex);
			 if(attributeName.equalsIgnoreCase("color")){
				 val=item.getColor();
			 }else if(attributeName.equalsIgnoreCase("bordercolor")){
				 val=item.getBorderColor();
			 }else if(attributeName.equalsIgnoreCase("value")){
				 String tooltip=item.getTooltip();
				 attributeName = "Value";
				 if(tooltip.contains(attributeName))
				 {
					 val=tooltip.split(attributeName+":")[1].split("<br>")[0].trim();
				 }
				 if(val == null){
					 val=String.valueOf(item.getValue());
				 }
			 }else if(attributeName.equalsIgnoreCase("series")){
				 String tooltip=item.getTooltip();
				 attributeName = "Series";
				 if(tooltip.contains(attributeName))
				 {
					 val=tooltip.split(attributeName+":")[1].split("<br>")[0].trim();
				 }
				 if(val == null){
					 val=getSeriesName(chartIndex, item.getSeriesIndex());
				 }
			 }else if(attributeName.equalsIgnoreCase("group")){
				 String tooltip=item.getTooltip();
				 attributeName = "Group";
				 if(tooltip.contains(attributeName))
				 {
					 val=tooltip.split(attributeName+":")[1].split("<br>")[0].trim();
				 }
				 if(val == null){
					 val=item.getGroup();
				 }
			 }else if(attributeName.equalsIgnoreCase("tooltip")){
				 val=item.getTooltip();
			 }else if(attributeName.equalsIgnoreCase("x")){
				 String tooltip=item.getTooltip();
				 attributeName = "X";
				 if(tooltip.contains(attributeName))
				 {
					 val=tooltip.split(attributeName+":")[1].split("<br>")[0].trim();
				 }
				 if(val == null){
					 val=(String) item.getX();
				 }
			 }else if(attributeName.equalsIgnoreCase("y")){
				 String tooltip=item.getTooltip();
				 attributeName = "Y";
				 if(tooltip.contains(attributeName))
				 {
					 val=tooltip.split(attributeName+":")[1].split("<br>")[0].trim();
				 }
				 if(val == null){
					 val=(String) item.getY();
				 }
			 }else if(attributeName.equalsIgnoreCase("z")){
				 String tooltip=item.getTooltip();
				 attributeName = "Z";
				 if(tooltip.contains(attributeName))
				 {
					 val=tooltip.split(attributeName+":")[1].split("<br>")[0].trim();
				 }
				 if(val == null){
					 val=(String) item.getZ();
				 }
			 }else if(attributeName.equalsIgnoreCase("label")){
				 val=item.getLabel();
			 }
		 }catch (oracle.oats.scripting.modules.webdom.common.api.exception.WaitForPageTimeoutException e) {
			 testFailure("Data Item with seriesindex "+seriesIndex+" group index "+groupIndex+" not exists");
			 return null;
		 }
		 return val;
	 }



	 public void  getDataItemAttribute(int chartIndex, int groupIndex, int seriesIndex, String attributeName,String colName) throws Exception{
		 int appender=checkColumnExists(colName);
		 if(appender==0){
			 datatable.getGlobalDatatable().addColumn("Global",colName,0);
		 }
		 String tmpVal=(String)getDataItemAttribute(chartIndex,groupIndex,seriesIndex,attributeName);		 
		 datatable.getGlobalDatatable().setValue("Global",0,  colName, tmpVal);	
	 }

	 /************************************************************************************************************
	  * Function: getGridRowNo  
	  * Description: This function returns the row index starting from 0, where the specified search criterion of multiple columns, else return -1
	  * Created By: Yashin Bidar
	  * Date: June 2017
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *      @param iIndex - index of the grid in the webpage starting from 0,
	  *      @param sFieldName -  Semicolon separated column value pairs 
	  *      getGridRowNo(0,"Column1=Value1;Column2=Value2.....ColumnN=ValueN");
	  *                                     
	  * Returns: 
	  *      @return Nil
	  * **********************************************************************************************************
	  */

	 public int getGridRowNo(@Arg("iIndex") int iIndex,     @Arg("sFieldNames") String sFieldNames) throws Exception {            
		 info("start of function getGridRowNo");
		 String gridId, colIndex;
		 checkFrame();
		 int rowIndex, rowCount, rowToSelect=-1, idx,numOfCols,counter=0;

		 String colValPairs[]=sFieldNames.split(";");
		 String output1[];
		 numOfCols=colValPairs.length;
		 info("No: of columns : "+numOfCols);
		 String SelColIndex,SelectColIndex,sValue;

		 gridId = getGridObjReference(iIndex);

		 if (gridId != null) {
			 rowToSelect = -1;                         
			 rowCount = getGridRowCountByIndex(iIndex);
			 for (idx = 0; idx < rowCount; idx++) {
				 rowIndex = getRowIndexForVisibleRow(gridId, idx);
				 for(int i=0;i<numOfCols;i++)
				 {
					 colIndex = getColIndexForColName(gridId, colValPairs[i].split("=")[0]);
					 if(colIndex !=null)
					 {
						 output1 = web.document(e1Browser).executeJsFunction("getGridRowValueAtCol",gridId, Integer.toString(rowIndex),colIndex);
						 //sValue=colValPairs[i].split("=")[1];
						 if(colValPairs[i].endsWith("="))
							 sValue="";
						 else
							 sValue=colValPairs[i].split("=")[1];
						 if((output1[0].startsWith("-")) || (output1[0].endsWith("-")))
						 {
							 if( (sValue.startsWith("-"))||(sValue.endsWith("-")))
							 {
								 sValue=sValue.replace("-", "");
								 output1[0]=output1[0].replace("-", "");
							 }
						 }
						 try{
							 double d1=Double.parseDouble(sValue);
							 double d2=Double.parseDouble(output1[0]);
							 sValue=Double.toString(d1);
							 output1[0]=Double.toString(d2);
						 }
						 catch(NumberFormatException e)
						 {
							 //e.printStackTrace();
						 }
						 if (output1[0].trim().equals(sValue)) 
						 {
							 counter+=1;
						 }
					 }
					 else{info("colindex is null");}

				 }

				 if(counter==numOfCols&&counter!=0)
				 {
					 rowToSelect = rowIndex;
					 output1 = web.document(e1Browser).executeJsFunction("getVisisbleRowIndex",gridId, Integer.toString(rowToSelect));
					 if(output1[0]!=null&&(output1[0].length()!=0))
					 {
						 rowToSelect=Integer.parseInt(output1[0]);
					 }
					 break;
				 }
				 else
				 {if(counter!=numOfCols)//resetting counter after each row
					 counter=0;}
			 }
		 }
		 info("Matching row is "+rowToSelect);
		 return rowToSelect;
	 }

	 /************************************************************************************************************
	  * Function: getSeriesCount
	  * Description: Used to get Series count of a chart
	  * Created By: Sravan
	  * Date: October 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param chartIndex :Chart Index starting from 0 
	  * Returns: 
	  * 		@return count
	  * Example:
	  * 		getSeriesCount(0);
	  * 		getSeriesCount(0,"LegendCount");
	  * **********************************************************************************************************
	  */
	 public int getSeriesCount(int chartIndex) throws Exception{
		 JETChart chart=jet.chart("//web:JETChart[@id='chart']["+chartIndex+"]");
		 if(chart!=null&& chart.exists()){
			 return chart.getSeriesCount();

		 }else{
			 CapturePage();
			 testFailure("Chart with Index "+chartIndex+" not found");
			 return 0;
		 }

	 }
	 public void getSeriesCount(int chartIndex,String colName) throws Exception{
		 int appender=checkColumnExists(colName);
		 if(appender==0){
			 datatable.getGlobalDatatable().addColumn("Global",colName,0);
		 }
		 String tmpVal=""+getSeriesCount(chartIndex);	 
		 datatable.getGlobalDatatable().setValue("Global",0,  colName, tmpVal);	
	 }

	 private boolean isElementHidden(DOMElement ele) throws Exception{
         boolean flag=false;
         DOMElement pEle=ele;
         while((pEle!=null) && (pEle.exists()))
         {
               //info(pEle.getClassName());
               String isVisible=pEle.getAttribute("style");
               if((isVisible!=null)&&(isVisible.replace(" ", "").contains("display:none"))  )     {
                     flag= true;
                     break;
               }
               String sTag=pEle.getTag();
               if( (sTag!=null) && (sTag.equalsIgnoreCase("div") || (sTag.equalsIgnoreCase("body")) ) ){

                     break;
               }else{
                     pEle=pEle.getParent();
               }
         }
         info("isElementHidden : "+flag);
         return flag;
   }


	 /************************************************************************************************************
	  * Function: isGridRowColEditable
	  * Description: This function checks if the specified cell is editable
	  * Created By: Yashin
	  * Date: Nov 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *      @param iIndex : Index of the Grid,
	  *      @param iRow : visible row index of the row
	  *      @param colName:name of the column                      
	  * Returns: 
	  *          @return true/false
	  * Example:isGridRowColEditable(0,0,OperationNumber)->Returns true if Operation number column field in first row of first grid is editable
	  *
	  * **********************************************************************************************************
	  */
	 public boolean isGridRowColEditable(@Arg("iIndex") int iIndex, @Arg("iRow") int iRow, String colName) throws Exception {
		 int rowIndex, rowCount;
		 checkFrame();

		 String gridId = getGridObjReference(iIndex); 

		 if(gridId!=null) 
		 {  
			 String[] output = web.document(e1Browser).executeJsFunction("getvisibleRowCount", gridId);
			 rowCount = Integer.parseInt(output[0]);

			 if(iRow >=rowCount)
			 {
				 iRow=iRow+1;
				 CapturePage();
				 testFailure("Validating Grid Row:" +iRow + "and Grid only has "+rowCount +"  row");
				 return false;
			 }


			 rowIndex = getRowIndexForVisibleRow(gridId, iRow);
			 String colIndex=getColIndexForColName(gridId, colName);
			 if(colIndex!=null)
			 {
				 String [] className = null;
				 try
				 {
					 web.document(e1Browser).executeJsFunction("clickGridAtRowCol", gridId.toString(),""+rowIndex,colIndex);

					 className=web.document(e1Browser).executeJsFunction("getGridCellClassName",gridId,Integer.toString(rowIndex),colIndex);
				 }catch(Exception e){}

				 if(className[0]!=null&&!className[0].equalsIgnoreCase("null")&&!className[0].equalsIgnoreCase("JSTextfieldDisabled"))
				 {
					 info("class:"+className[0]);
					 return true;
				 }
				 else
				 {
					 return false;
				 }
			 }
			 else
			 {
				 testFailure("Column "+colName+" does not exist");
				 CapturePage();
				 return false;
			 }

		 }
		 else
		 {
			 testFailure("Grid with index "+iIndex+" not found");
			 CapturePage();
			 return false;
		 }
	 }

	 /************************************************************************************************************
	  * Function: isRowContainAttachment
	  * Description: This function will check for the presence of attachment for given row in grid
	  * Created By: Megha K
	  * Date: Aug 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param iIndex :Iindex of the grid in the webpage starting from 0.
	  * 		@param iRow :row index starting from 0
	  * 		@param sColName :column header under which to validate the image
	  * Returns: 
	  * 		@return boolean:True when row has Attachment else False
	  * **********************************************************************************************************
	  */

	 public boolean isRowContainAttachment(@Arg("iIndex") int iIndex, @Arg("iRow") int iRow,@Arg("sColName") String sColName) throws Exception {
		 info("Starting:Function isRowContainAttachment");
		 if(docIndex==null){
			 getDocIndex();
		 }
		 int rowIndex, rowCount;
		 String iColIndex;
		 String gridId;
		 boolean present=false;
		 if (!bDB) {
			 checkFrame();
			 gridId = getGridObjReference(iIndex);
			 if(gridId!=null)  { 
				 rowCount = getGridRowCountByIndex(iIndex);
				 if(iRow > rowCount){
					 iRow=iRow+1;
					 CapturePage();
					 testFailure("Validating Grid Row:" +iRow + "and Grid only has "+rowCount +"  row");
				 }
				 iColIndex=web.document(e1Browser).executeJsFunction("gridColIndex",gridId,sColName)[1];	
				 if(iColIndex!=null){
					 rowIndex = getRowIndexForVisibleRow(gridId, iRow);
					 String[] altProperty = web.document(e1Browser).executeJsFunction("cellImageObject",gridId,Integer.toString(rowIndex), iColIndex);
					 if(altProperty[0].equals("Attachment")){
						 present=true;//return true;
					 }
				 }
			 }
		 }
		 info("Ending:Function isRowContainAttachment");
		 return present;
	 }

	 /************************************************************************************************************
	  * Function: isScrollbarPresent
	  * Description: This function will check for the presence of mentioned Scrollbar(Horizontal/Vertical) in the given grid
	  * Created By: Megha K
	  * Date: Sep 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param iIndex :Iindex of the grid in the webpage starting from 0.
	  * 		@param scrollbarType :Type of the Scrollbar(Horizontal/Vertical) which is expected to be present.
	  * Returns: 
	  * 		@return boolean: True when expected toolbar is present and false otherwise
	  * Example: isScrollbarPresent(0, Horizontal)
	  * **********************************************************************************************************
	  */

	 public boolean isScrollbarPresent(int gridIndex,String scrollbarType)throws Exception{
		 info("Starting of isScrollbarPresent method");
		 checkFrame();
		 String present=null;
		 String gridId=null;
		 if (!bDB) {
			 gridId=getGridObjReference(gridIndex);
			 if(gridId!=null){
				 present=web.document(e1Browser).executeJsFunction("isScrollbarEnabled",gridId,scrollbarType)[0];
			 }
		 }else{
			 gridId=getDataBrowserGridObjReference();
			 if (gridId != null) {
				 present=web.document(sDBBrowser).executeJsFunction("isScrollbarEnabled",gridId,scrollbarType)[0];
			 }
		 }
		 boolean exists=Boolean.parseBoolean(present);
		 info("Ending of isScrollbarPresent method");
		 return exists;
	 }
	 
	//Overloaded function for ScriptBuilder 
	 
	 public void isScrollbarPresent(int gridIndex,String scrollbarType, String colName)throws Exception{
         int appender=checkColumnExists(colName);
         if(appender==0){
               datatable.getGlobalDatatable().addColumn("Global",colName,0);
         }
         boolean tmpVal=isScrollbarPresent(gridIndex,scrollbarType);       
         datatable.getGlobalDatatable().setValue("Global",0,  colName, tmpVal+"");
   }




	 /************************************************************************************************************
	  * Function: isSeriesHidden
	  * Description: Used to know if the series is visible/hidden
	  * Created By: Yashin
	  * Date: October 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param chartIndex :Chart Index starting from 0 
	  * 		@param seriesName :Series name
	  * Returns: 
	  * 		@return true if hidden, false if visible
	  * **********************************************************************************************************
	  */
	 public boolean isSeriesHidden(int chartIndex, String seriesName) throws Exception{
		 JETChart chart=getJetChart(chartIndex);
		 //Boolean bStatus=chart.checkSereisHiddenByName(seriesName);
		 Boolean bStatus=chart.isSeriesHidden(seriesName);
		 return bStatus;
	 }
	 public void isSeriesHidden(int chartIndex, String seriesName,String colName) throws Exception{
		 int appender=checkColumnExists(colName);
		 if(appender==0){
			 datatable.getGlobalDatatable().addColumn("Global",colName,0);
		 }
		 String tmpVal=""+isSeriesHidden(chartIndex,seriesName);		 
		 datatable.getGlobalDatatable().setValue("Global",0,  colName, tmpVal);	
	 }

	 /************************************************************************************************************
	  * Function: isWebListItemPresent
	  * Description: This function is used to validate presence of weblist with given id.
	  * Created By:  RUPA
	  * Date: Aug 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param Iid : Id of the WebList on the page.
	  *    
	  * Returns: 
	  * 		@return boolean
	  * Example - isWebListItemPresent("0_1","Show ALL Columns","true")
	  * **********************************************************************************************************
	  */

	 public boolean isWebListItemPresent(@Arg("Iid") String Iid,@Arg("webListItem")String webListItem) throws Exception{
		 checkFrame();
		 boolean isExists = false;
		 if(docIndex==null){
			 getDocIndex();
		 }

		 String bro;
		 if(isModalForm==true){
			 bro=e1Browser;
		 }else{
			 bro="/";
		 }

		 incrementValidationCount(1);
		 if (web.exists(bro+"/web:select[( @id='"+Iid+"')]",10)){
			 String isDisabled = web.selectBox(bro+"/web:select[( @id='"+Iid+"')]").getAttribute("disabled");
			 if(isDisabled.equalsIgnoreCase("True")) {
				 CapturePage();
				 testFailure("Web List with the Id "+Iid+" is not Enabled in the page");
			 }else{
				 List<DOMElement> allItems=web.selectBox(bro+"/web:select[(@id='"+Iid+"')]").getOptions();
				 info("weblist size="+allItems.size());

				 for(DOMElement itm : allItems) {
					 try{
						 String txt=itm.getAttribute("text");

						 if(txt.trim().equals(webListItem.trim())) {
							 info("Weblist item "+webListItem+" with Id "+Iid+" is present in the weblist");
							 isExists=true;
							 break;
						 }
						 else
						 {
							 isExists=false;	
						 }

					 }



					 catch(Exception e){
						 e.printStackTrace();
					 }

				 }

			 }

		 }
		 else
		 {
			 return isExists;
		 }

		 return isExists;
	 }

	 public void isWebListItemPresent(@Arg("Iid") String Iid,@Arg("webListItem")String webListItem, String colName) throws Exception{
		 int appender=checkColumnExists(colName);
		 if(appender==0){
			 datatable.getGlobalDatatable().addColumn("Global",colName,0);
		 }
		 boolean tmpVal=(Boolean)isWebListItemPresent(Iid, webListItem);		 
		 datatable.getGlobalDatatable().setValue("Global",0,  colName, tmpVal);	
	 }

	 public void isNavigationSubMenu(String sCategory, String appPath, boolean sStatus, String colName) throws Exception {
		 int appender=checkColumnExists(colName);
		 if(appender==0){
			 datatable.getGlobalDatatable().addColumn("Global",colName,0);
		 }
		 boolean tmpVal=(Boolean)isNavigationSubMenu(sCategory, appPath, sStatus);		 
		 datatable.getGlobalDatatable().setValue("Global",0,  colName, tmpVal);
	 }
	 public void isElementChecked(@Arg("iIndexOrId") String id, @Arg("fldName") String fldName, @Arg("sCategory") String sCategory, String output)throws Exception {
			boolean res=isElementChecked(id,fldName,sCategory);
			
			int appender=checkColumnExists(output);
			 if(appender==0){
				 datatable.getGlobalDatatable().addColumn("Global",output,0);
			 }
			 datatable.getGlobalDatatable().setValue("Global",0,  output, ""+res);
		}
	 /**********************************************************************************
	  * Functions added on 28/7
	  */

	 /************************************************************************************************************
	  * Function: clickOnElement 
	  * Description: This function is used to click on any element. Ex: to click on image, input field, icon, div, button etc.
	  * Created By: Ghulam Quadir 
	  * Date: Sep 2016 
	  * Modified By:  Sunil -> Line 26779 (12/02/19)
	  * To be incorporated: Nil 
	  * InputParameters:
	  * @param sElementType :Type of element (image, button, icon)
	  * @param sAttributeName : A unique attribute to identify the element. (like id, name, alt etc)
	  * @param sAttributeValue: Avlue of that attribute
	  * @param sElementName :  It is the name of element which appears on the page. (OK, Cancel)
	  * @return Nil 
	  * Example: 
	  * clickOnElement("image","alt","About E1Page","About")//To click on element of type image having an atrribute 'alt' with value 'About E1Page' and When mouse over it 'About' Appears
	  * clickOnElement("text", "name", "E1PprodCode X", "Product Code")//To click on input filed (Header text)
	  * clickOnElement("button","id","C0_11","OK")//To click on abutton having id=C0_11
	  * clickOnElement("hyperlink","text","Blanks Invalid","Go To Error")//Clicking on hyperlink having text=Blanks Invalid
	  *         ****************************************
	  */
	 public void clickOnElement(String sElementType, String sAttributeName, String sAttributeValue, String sElementName) throws Exception {
		 info("Starting:Function clickOnElement ");
		 if (docIndex == null) {
			 getDocIndex();
		 }
		 
        

		 String elementType="";
         sElementName=sElementName.trim();
         sElementType=sElementType.trim();
         sAttributeName=sAttributeName.trim();
         sAttributeValue=sAttributeValue.trim();
         sElementName=sElementName.trim();
         DOMElement ele= null;
         if(sAttributeName.equalsIgnoreCase("xpath")){
               ele = web.element(sAttributeValue);
         }else{
               elementType=getElementTag(sElementType);       
               info("Path="+("//web:"+elementType+"[@"+sAttributeName+"='"+sAttributeValue+"']")); 
                ele=web.element("//web:"+elementType+"[@"+sAttributeName+"='"+sAttributeValue+"']");
         }
		 boolean isHidden=isElementHidden(ele);
		 //System.out.println(isHidden);
		 if(!isHidden){
			 ele.focus();
			 if(!sBrowser.equalsIgnoreCase("IE")){	
				 //ele.mouseClick(3,3); // ccommented this code becz it was not worked for Edge/chrome/firefox
				// ele.mouseClick(1,1);
				 ele.click();
			 }else{
				 ele.click();
			 }
			 syncFrame();
			 info("PASSED : Element "+sElementName+" Found and Clicked");
		 }else  {
			 testFailure("FAILED : Element "+sElementName+" NOT Found");
			 CapturePage();
		 }
		 info("End : Function clickOnElement ");
	 }

	 /************************************************************************************************************
	  * Function: getActiveElement
	  * Description: This function will get the id from the Active element on the EOne page.
	  * Created By: Rupa
	  * Date: May  2017
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *          @param Text/id-If you went text , enter text as parameter , if you want id put id as parameter.
	  * Returns: 
	  *          @return Text/id
	  *          
	  *          Example -getActiveElement("Text");//if you want text as the return value 
	  *          getActiveElement("Id"); //If u want id as return value
	  * ***********************************************************************************************************/
	 public String getActiveElement( @Arg("Text/ID")String textOrId) throws Exception {
		 info("Starting Function: getActiveElementId");
		 checkFrame();
		 // String activeElement[] = null; 
		 if(docIndex==null){
			 getDocIndex();
		 }
		 e1Document = "/web:document[@index='"+docIndex+"' or @name='e1menuAppIframe']";
		 e1Browser=e1BrowserWindow+e1Document;
		 DOMDocument document = web.document(e1Browser);
		 String selectedText[]=null,selectTextTagname[]=null;
		 //getting the tag name of the active element
		 document.executeJavaScript("function getActiveElementTagName(){return document.activeElement.tagName;}");
		 selectTextTagname = web.document(e1Browser).executeJsFunction("getActiveElementTagName");   
		 info("tag name :"+selectTextTagname[0]);
		 if(textOrId.equalsIgnoreCase("Id")){
			 document.executeJavaScript("function getActiveElement(){return document.activeElement.id;}");
			 //  activeElement  = web.document(e1Browser).executeJsFunction("getActiveElement"); 
			 selectedText  = web.document(e1Browser).executeJsFunction("getActiveElement"); 
			 if(selectedText[0].length()!=0)
			 {
				 info("The id of active element "+selectedText[0]);
			 }
			 else{
				 testFailure("There is no active Element or the element doesn't contains Id");
			 }
		 }
		 else if(textOrId.equalsIgnoreCase("Text"))
		 {
			 if((selectTextTagname[0].trim()).equalsIgnoreCase("SELECT")){
				 info("yes");
				 document.executeJavaScript("function getActiveElement(){var sel = document.activeElement;var opt = sel.options[sel.selectedIndex];return opt.text;}");
				 selectedText = web.document(e1Browser).executeJsFunction("getActiveElement");
				 info("selectedText val:"+selectedText[0]);
			 }
			 else if((selectTextTagname[0].trim()).equalsIgnoreCase("A")){
				 document.executeJavaScript("function getActiveElement(){return document.activeElement.text;}");
				 selectedText = web.document(e1Browser).executeJsFunction("getActiveElement");        
				 info("selectedText val:"+selectedText[0]);
			 }
			 //for input text fields : text box, button, checkbox or radio button
			 else if((selectTextTagname[0].trim()).equalsIgnoreCase("INPUT")){                                                                                                       
				 //to get id of element
				 document.executeJavaScript("function getActiveElementTagName(){return document.activeElement.id;}");
				 String ids[] = null; 
				 ids = web.document(e1Browser).executeJsFunction("getActiveElementTagName");
				 info("id :"+ids[0]);
				 //if button send value,if radiobutton send id,if other element sends title
				 if(web.exists(e1Browser+"/web:form[@id='E1PaneForm']/web:input_button[@id='"+ids[0]+"']",20)){
					 document.executeJavaScript("function getActiveElement(){return document.activeElement.value;}");

				 }else if(web.exists(e1Browser+"/web:form[@id='E1PaneForm']/web:input_radio[@id='"+ids[0]+"']",20)){
					 document.executeJavaScript("function getActiveElement(){return document.activeElement.title;}");
				 }else if(web.exists(e1Browser+"/web:form[@id='E1PaneForm']/web:input_checkbox[@id='"+ids[0]+"']",20)){
					 if(ids[0].startsWith("G0_1")){//if the chkbox is in grid, (selected value=1, deselected val = 0)
						 document.executeJavaScript("function getActiveElement(){return document.activeElement.value;}");
					 }else{
						 document.executeJavaScript("function getActiveElement(){return document.activeElement.title;}");
					 }
				 }
				 else{
					 document.executeJavaScript("function getActiveElement(){return document.activeElement.value;}");
					 selectedText = web.document(e1Browser).executeJsFunction("getActiveElement");        
					 info("selectedText val:"+selectedText[0]);
					 Pattern a = Pattern.compile("^\\s*$");
					 Matcher m =a.matcher(selectedText[0]);
					 if(m.find() || selectedText[0]==null){                                                                                                                                                    
						 document.executeJavaScript("function getActiveElement(){return document.activeElement.title;}");                                                                                    
					 }
				 }                                              
				 // activeElement = web.document(e1Browser).executeJsFunction("getActiveElement");
				 selectedText = web.document(e1Browser).executeJsFunction("getActiveElement");
				 info("selectedText title:"+selectedText[0]);
			 }                              
			 else{        
				 CapturePage();
				 testFailure("No active INPUT element is found on the page");
				 return null;
			 }   

		 }
		 else{
			 testFailure("Please put input parameter as ID or text");
		 }
		 //return activeElement[0];
		 return selectedText[0];

	 }
	 public void getActiveElement(String textOrId, String colName) throws Exception {		 
		 int appender=checkColumnExists(colName);
		 if(appender==0){
			 datatable.getGlobalDatatable().addColumn("Global",colName,0);
		 }		 
		 String tmpVal=(String)getActiveElement(textOrId);		 
		 datatable.getGlobalDatatable().setValue("Global",0,  colName, tmpVal);
	 }
	/************************************************************************************************************
      * Function: scrollGridRowIntoView
      * Description: this function scrolls the grid and brings the specified Row into grid visible area.
       * Created By: Yashin
      * Date: December 2016
      * To be incorporated: Nil
      * Returns:Nothing 
       * Example: scrollGridRowIntoView("0_1",15)
      * **********************************************************************************************************
      */
    public boolean scrollGridRowIntoView(String gridId, int rowIndex)
    {
    boolean result=false;
    try
    {
    
        for(int x=0;x<100;x++)
        {
        String[] checkBoxView=web.document(e1Browser).executeJsFunction("scrollCheckBoxIntoView", gridId,""+rowIndex,""+x);
        //info("checkbox:"+checkBoxView[0]);
        if(checkBoxView[0].equalsIgnoreCase("true"))
        {
              result= true;
              break;
        }
        else if(checkBoxView[0].equalsIgnoreCase("false"))
              {
              Thread.sleep(1000);
              continue;
        }else {
              
            	result=false;
            	break;
              }
              
        }
        
    }catch(Exception e)
    {
    	e.printStackTrace();
    }
    return result;
    }
	
	/************************************************************************************************************
      * Function: scrollGridColumnIntoView
      * Description: this function scrolls the grid and brings the specified Column into grid visible area.
       * Created By: Yashin
      * Date: December 2016
      * To be incorporated: Nil
      * Returns:Nothing 
       * Example: scrollGridRowIntoView("0_1",15)
      * **********************************************************************************************************
      */
    public boolean scrollGridColumnIntoView(String gridId, String colIndex)
    {
    boolean result=false;
    try
    {
    //info("scrollGridColumnIntoView org");
        for(int x=0;x<100;x++)
        {
        String[] status=web.document(e1Browser).executeJsFunction("scrollGridColumnIntoView", gridId,colIndex,""+x);
        if(status[0].equalsIgnoreCase("true"))
        {
              result= true;
              break; 
        }
        else if(status[0].equalsIgnoreCase("false"))
              {
              Thread.sleep(1000);
              continue;
        }else{
             result=false;
             break;
              }
              
        }
        
    }catch(Exception e)
    {
     e.printStackTrace();
    }
    return result;
    }
    
    public boolean scrollGridColumnIntoView(String gridId, String rowIndex, String colIndex)
    {
    boolean result=false;
    try
    {
    //info("scrollGridColumnIntoView org");
        for(int x=0;x<100;x++)
        {
        String[] status=web.document(e1Browser).executeJsFunction("scrollGridColumnIntoView", gridId,rowIndex,colIndex,""+x);
        if(status[0].equalsIgnoreCase("true"))
        {
              result= true;
              break; 
        }
        else if(status[0].equalsIgnoreCase("false"))
              {
              Thread.sleep(1000);
              continue;
              } else {
             result=false;
             break;
              }
              
        }
        
    }catch(Exception e)
    {
     e.printStackTrace();
    }
    return result;
    }
	 /************************************************************************************************************
	  * Function: validateHeaderTextError 
	  * Description: This function is used to validate if a header text input has error or not. 
	  * Created By: Ghulam Quadir  
	  * Modified By: 
	  * Date: Aug 2016 
	  * To be incorporated: Nil Input
	  * Parameters:
	  * @param id
	  *            :id of the input field
	  * @param sName
	  *            : name of header text
	  * @param sStatus
	  *            : True when there is error. False when there is no error.
	  *            Returns:
	  * @return Nil Example:
	  *         validateHeaderTextError("CO_012","Product Code",true)//When input
	  *         field has error
	  *         validateHeaderTextError("CO_012","Product Code",false)//When
	  *         input field has no error
	  *         *****************************************************************
	  */
	 public void validateHeaderTextError(String id, String sName, boolean sStatus) throws Exception {
		 info("Strting function validateHeaderTextError");
		 checkFrame();
		 if (docIndex == null) {
			 docIndex = getDocIndex();
		 }

		 String e1Document1 = "/web:document[@name='E1MENUMAIN*']";// Another document name other than 'e1menuAppIframe'
		 String e1Browser1 = e1BrowserWindow + e1Document1;

		 DOMElement element = null;
		 DOMDocument doc = null;
		 String attributeValue = null;

		 doc = web.document(e1Browser);
		 element = doc.getElementById(id);
		 if (element == null || (!element.exists())) {
			 doc = web.document(e1Browser1);
			 element = doc.getElementById(id);
			 if (element == null || (!element.exists())) {
				 testFailure("FAILED : Header text with name " + sName + " and id " + id + " Not found on the page");
				 web.window(
					 e1BrowserWindow).capturePage();
				 valCount++;
				 return;
			 }
		 }

		 attributeValue = element.getAttribute("style");
		 info("Attribute class value="+attributeValue);
		 // info("id="+(String)element.getAttribute("id"));
		 if ((sStatus == true)) {
			 //if ((attributeValue.contains("border-color:")) || (attributeValue.contains("background-color:")))// Error is there
			 if ((attributeValue.contains("border-color=")) || (attributeValue.contains("background-color=")) ||(attributeValue.contains("border-color:")) || (attributeValue.contains("background-color:")))// Error is there
			 {
				 info("PASSED: Header text with name " + sName + " has error");
			 } else {
				 CapturePage();
				 testFailure("FAILED : Header text with name " + sName + " has no error");
			 }
		 } else if (sStatus == false) {
			 //if ((attributeValue.contains("border-color:")) || (attributeValue.contains("background-color:")))// Error is there
			 if ((attributeValue.contains("border-color=")) || (attributeValue.contains("background-color=")) || (attributeValue.contains("border-color:")) || (attributeValue.contains("background-color:")))// Error is there
			 {
				 CapturePage();
				 testFailure("FAILED : Header text with name " + sName + " and id " + id + " has error");
			 } else {
				 info("PASSED: Header text with name " + sName + " has no error");
			 }
		 }
		 valCount++;
	 }

	 /************************************************************************************************************
	  * Function: validateMenuItemExistsAtSpecifiedSection
	  * Description: This function will validate menu item exists in the specified section.   
	  * Note : Before calling this function ensure that you must have clicked on either form/row menu on tool bar or right clicked on form/row area.
	  * Created By: Sunil
	  * Date: Feb 2017
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param MenuType : Type of the menu.(i.e.,Form, Row)
	  * 		@param Items : The menu item name available under the menu type.In case sub menu pass sub menu item name sepreted by semicolumn(;).
	  * 		@param eStatus : true if exists/false if does not exist.
	  * 		@param Section : Section in which menu item present.(Favorites/form/row present on pop up window).
	  *
	  * Returns: 
	  * 		@return Nil
	  * Example: 
	  * validateMenuItemExistsAtSpecifiedSection("Row","Refresh", "Favorites", false);  
	  * validateMenuItemExistsAtSpecifiedSection("Form","Customer;Exit for Testing","Form", true);// here "Exit for Testing" sub menu item of "Customer".
	  *  
	  * **********************************************************************************************************
	  */
	 public void validateMenuItemExistsAtSpecifiedSection(String MenuType, String Items, String Section, boolean eStatus) throws Exception {
		 checkFrame();
		 info("Begin Function:validateMenuItemExistsAtSpecifiedSection");
		 incrementValidationCount(1);
		 if((MenuType.trim()).equalsIgnoreCase("Form") || (MenuType.trim()).equalsIgnoreCase("Row")){
			 MenuType = MenuType.toUpperCase();

		 }else {
			 CapturePage();
			 testFailure("Menu Type "+MenuType+" is not present");
			 return;
		 }
		 String[] menuItem = Items.split(";");
		 String element = null;
		 String[] elementItems = null;
		 List<DOMElement> nobrList=null;
		 boolean flag=false;
		 String elementValue="";
		 ArrayList<String> getEachElevalue=new ArrayList<String>();

		 DOMDocument doc=null;
		 DOMElement eleDom=null;

		 if ((web.exists("//web:img[@id='"+MenuType+"_EXIT_BUTTON' ]",60))) {//This ensures presence of "Form Menu icon" on the page 
			 //customClick(web.element("//web:img[@id='"+MenuType+"_EXIT_BUTTON' ]"));
			 //info(MenuType+" menu clicked");
			 doc=web.document(e1Browser);

			 String currId=web.element("//web:img[@id='"+MenuType+"_EXIT_BUTTON' ]").getAttribute("launchmenuid");//Row menu div id is different for all application.
			 eleDom=web.element("//web:div[@id='"+currId+"']");
			 String style =eleDom.getAttribute("style");
			 // info("style display property : "+style);
			 if(style.contains("display: block;") || style.contains("display=\"block\"")){
				 for(int i=0;i<menuItem.length;i++)
				 {
					 int itemIndex=0;
					 element=menuItem[i].trim();//First Item of path
					 elementItems=Pattern.compile("[|]").split(element);
					 if(elementItems.length==2)//Index is present with from menu item
					 {
						 itemIndex=Integer.parseInt(elementItems[0]); 
						 elementValue=elementItems[1];
						 getEachElevalue.add(elementValue);
					 }else
					 {
						 elementValue=elementItems[0];
						 getEachElevalue.add(elementValue);
					 }
					 eleDom=web.element("//web:div[@id='"+currId+"']");
					 nobrList=eleDom.getElementsByTagName("nobr");

					 int count=-1;
					 String innerHTML="";
					 String divId="";
					 for(DOMElement tempDom:nobrList)
					 {
						 innerHTML=tempDom.getAttribute("innerHTML");
						 flag=false;
						 if((innerHTML.replaceAll("&nbsp;","")).equalsIgnoreCase(elementValue))
						 {
							 count++;
						 } 
						 if(itemIndex==count)//This is the element to select
						 {// in this block Hover/Click over the item and find the id of next div.

							 //Get the First div element.
							 DOMElement temp=tempDom;
							 for(int j=0;;j++)
							 {
								 temp=temp.getParent(); 
								 if((temp!=null)&&(temp.getTag().contains("DIV")))//getTag() return tag name in capital letter
								 {
									 divId=temp.getAttribute("id");
									 currId=divId.replace("-Show","");//This will be id of div of next path item
									 if(i==menuItem.length-1)//It is last element.
									 {	
										 String str = "";
										 if(Section.equalsIgnoreCase("Favorites") && MenuType.equalsIgnoreCase("form")){
											 str = "FE";
										 }else if(Section.equalsIgnoreCase("Favorites") && MenuType.equalsIgnoreCase("row")){
											 str = "RE";
										 }else if(Section.equalsIgnoreCase("form") || MenuType.equalsIgnoreCase("row")){
											 str = "HE";
											 count = -1;
											 if(divId.contains("FE") || divId.contains("RE")){
												 break;
											 }
										 }else{
											 CapturePage();
											 testFailure("FAILED : Function validateMenuItemExistsAtSpecifiedSection Exiting. Specified form menu section is not present.");
											 return;
										 }
										 if(divId.contains(str) || divId.contains(Section))//Parent div has id containing with "FE", "RE" or "HE"
										 {
											 flag=true;
											 break;
										 }else
										 {
											 if(eStatus){
												 CapturePage();
												 testFailure("FAILED : Function validateMenuItemExistsAtSpecifiedSection : "+MenuType+" menu '"+getEachElevalue+"' not found in specified section ["+Section+"].");
												 return;
											 }else{
												 info("Passed : Function validateMenuItemExistsAtSpecifiedSection : "+MenuType+" menu '"+getEachElevalue+"' not found in specified section ["+Section+"].");
												 return;
											 }
										 }

									 }else//mouse over element.
									 {
										 temp.getChildren().get(0).mouseOver();	
										 flag=true;
										 break;
									 }
								 }
								 if(j==100)//Find upto hundred parent element only
								 {
									 break;
								 }
							 }
							 if(flag==true)//Element found. So come out of outer loop also;
							 {
								 break;
							 }
							 //info("MOUSE OVER and currId="+currId);
						 }
					 }

				 }
			 }else{
				 getScript("EOneUtility").callFunction("CapturePage");
				 testFailure("Failed : Pop Up menu is not present on the page to validate menu item. ");
				 return;
			 }
			 //info("aStatus: "+flag+ "eStatus:  "+eStatus);
			 if(flag == eStatus){
				 if(eStatus){
					 info("validateMenuItemExistsAtSpecifiedSection Passed: "+MenuType+" menu '"+getEachElevalue+"' found in specified section ["+Section+"].");
				 }
				 else{
					 info("validateMenuItemExistsAtSpecifiedSection Passed: "+MenuType+" menu '"+getEachElevalue+"' not found in specified section ["+Section+"].");
				 }
			 }	
			 else {
				 if(eStatus){

					 CapturePage();	
					 testFailure("validateMenuItemExistsAtSpecifiedSection Failed: "+MenuType+" menu '"+getEachElevalue+"' not found in specified section ["+Section+"].");
				 }
				 else{
					 CapturePage();	
					 testFailure("validateMenuItemExistsAtSpecifiedSection Failed: "+MenuType+" menu '"+getEachElevalue+"' found in specified section ["+Section+"].");
				 }
			 }
		 }
		 info("End Function : validateMenuItemExistsAtSpecifiedSection");
	 }

	 /************************************************************************************************************
	  * Function:validatePopupExists(expectedValue)  
	  * Description: This function will validate ,whether popup exists or not.
	  * Created By: Rupa
	  * Date: August 2016
	  * To be incorporated: Nil 
	  * InputParameters:

	  * @param expectedValue - The popup should exists or not i.e true/false.

	  * 
	  * Returns: Nil
	  * Example-validatePopupExists(true) 
	  * **********************************************************************************************************
	  */
	 public void validatePopupExists(boolean expectedValue) throws Exception{
		 info("Starting:Function validatePopupExists");
		 int flag = 0;
		 //didn't checked for databrowser, since this scenerio doesn't exist for databrowser.
		 checkFrame();

		 if(expectedValue==true)
		 {

			 if(web.exists(e1Browser+"/web:div[@id='popupWindowTitle*']"))//I have given id='popupWindowTitlemodal*' ,as all popups have common id till popupWindowTitle.
			 {
				 flag = 1;	
			 }
		 }
		 else if(expectedValue==false)
		 {
			 if(web.exists(e1Browser+"/web:div[@id='popupWindowTitle*' ]",10)==false)
			 {
				 flag = 1;	
			 }
		 }

		 if(flag==1)
		 {
			 info("Popup validation is successfully validated");
		 }

		 else
		 {
			 testFailure("Popup validation is not successfull");
			 CapturePage(); 	
		 }
		 valCount=valCount+1;
		 info("Finished:Function validatePopupExists "); 
	 }
	 /************************************************************************************************************
	  * Function:validatePopupExists(property, property_value, expectedValue)  
	  * Description: This function will validate ,whether popup exists or not.
	  * Created By: Rupa
	  * Modified By: Anusha Bonam 
	  * Date: August 2016
	  * To be incorporated: Nil 
	  * InputParameters:
	  * @param property - The property attribute
	  * @param property_value - The property value
	  * @param expectedValue - The popup exists or not i.e true/false.
	  * 
	  * Returns: Nil
	  * Example-validatePopupExists("id","popupWindowTitleINYFEWindow",true);
	  * **********************************************************************************************************
	  */
	 public void validatePopupExists(String property,String property_value,boolean expectedValue) throws Exception{
		 info("Starting:Function validatePopupExists");
		 int flag = 0;
		 String bro="";
		 //didn't checked for databrowser, since this scenerio doesn't exist for databrowser.
		 checkFrame();
		 if(expectedValue==true){

			 /*e1Document = "/web:document[@index='"+(String)getScript("EOneUtility").callFunction("getDocIndex")+"' or @name='e1menuAppIframe']";
					e1Browser=e1BrowserWindow+e1Document;*/
			 if((isModalForm==false)&&(isADF==false)){
				 bro="/";
			 }else{
				 bro=e1Browser;
			 }
			 DOMElement parentDiv=web.element(bro+"/web:div[@"+property+"='" +property_value+"']");
			 String disp=parentDiv.getAttribute("style");

			 //info(e1Browser+"/web:div[@"+property+"='" +property_value+"']");
			 if(web.exists(bro+"/web:div[@"+property+"='" +property_value+"']"))
			 {

				 flag=1;


			 }
		 }
		 else
		 {
			 if(web.exists(bro+"/web:div[@"+property+"='" +property_value+"' ]",10)==false)
			 {

				 flag = 1;   
			 }
		 }

		 if(flag==1)
		 {
			 info("Popup validation is successfully validated");
		 }

		 else
		 {
			 reportFailure("Popup validation is not successfull");
			 CapturePage();   
		 }
		 valCount=valCount+1;
		 info("Finished:Function validatePopupExists "); 
	 }

	 /************************************************************************************************************
	  * Function: validateRadioButtonBGColor
	  * Description: This function is used to validate the border color of the specified type of the element (i.e., either radiobutton or checkbox)
	  * Created By: Anusha Bonam
	  * Date: September 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *          @param type: type of the element(i.e., radiobutton/radio, checkbox)
	  *          @param id: html id of the element
	  *          @param eleName:Name of the element
	  *          @param sColor: Background color of the element
	  * Returns: 
	  *          @return Nil
	  * **********************************************************************************************************
	  */
	 public void validateRadioButtonBGColor(@Arg("type") String type, @Arg("id") String id,@Arg("eleName") String eleName, @Arg("sColor") String sColor) throws Exception {
		 checkFrame();
		 info("Starting:Function validateRadioButtonBGColor "); 
		 incrementValidationCount(1);
		 String disabledLabelColor[]=null, disabledColor[]=null;
		 String eleType="";
		 if(((type.trim()).equalsIgnoreCase("radiobutton"))||((type.trim()).equalsIgnoreCase("radio"))){
			 eleType="input_radio";
		 }
		 else if((type.trim()).equalsIgnoreCase("checkbox")){
			 eleType="input_checkbox";
		 }
		 else{
			 web.window(e1BrowserWindow).capturePage();
			 testFailure("Type "+type+" is not present");
			 return;
		 }
		 String attr="id", bro="";

		 DOMElement ele=null, eleLabel = null;
		 if(id.contains("name="))
		 {
			 id=id.split("=")[1];
			 attr="name";
		 }
		 else
		 {
			 try{
				 int index=Integer.parseInt(id);
				 attr="index";
			 }
			 catch(NumberFormatException n)
			 {
				 attr="id";
			 }
		 }

		 if((attr.equals("id")||attr.equals("name"))&&(isModalForm==false)&&(isADF==false)){
			 bro="/";
		 }else{
			 bro=e1Browser;
		 }

		 ele= web.element(bro+"/web:"+eleType+"[@"+attr+"='"+id+"']");
		 eleLabel = web.element(bro+"/web:label[@text='"+eleName+"']");

		 String isDisabled=null;
		 String readonly=null;
		 if(((ele!=null) && (ele.exists()))&&((eleLabel!=null) && (eleLabel.exists())))
		 {
			 isDisabled=ele.getAttribute("disabled");
			 readonly=ele.getAttribute("readOnly");
			 info("Captured disable and readonly property values"+ isDisabled+"   "+readonly);
		 }else
		 {
			 CapturePage();
			 testFailure("validateRadioButtonBGColor Failed: Element \'"+eleName+"\' of type "+type+" with "+attr+" : "+id+" is NOT Found");

		 }
		 try{
			 if (((!(isDisabled==null))||isDisabled.equalsIgnoreCase("true"))&&((!(readonly==null))||readonly.equalsIgnoreCase("true")))
			 {
				 info(type+" \'"+eleName+"\' with "+attr+" "+id+" is disabled");

				 e1Document = "/web:document[@index='"+docIndex+"' or @name='e1menuAppIframe']";
				 e1Browser=e1BrowserWindow+e1Document;
				 DOMDocument document = web.document(e1Browser);
				 /*web.element("//web:label[@text='"+eleName+"']").setSelectedJSElement();
						document.executeJavaScript("function getLabelDisColor(){return selectedOATSWebDomElement.currentStyle.color;}");
						disabledLabelColor = web.document(e1Browser).executeJsFunction("getLabelDisColor"); */ 
				 //document.executeJavaScript("function getLabelDisColor(){return window.getComputedStyle(document.getElementById('"+id+"'),null).nextElementSibling.currentStyle.color;}");
				 document.executeJavaScript("function getLabelDisColor(){return window.getComputedStyle(document.getElementById('"+id+"').nextElementSibling,null).getPropertyValue('color');}");
				 disabledLabelColor = web.document(e1Browser).executeJsFunction("getLabelDisColor");
				 info("disabledLabelColor:"+disabledLabelColor[0]);

				 /*web.element("//web:"+eleType+"[@id='"+id+"']").setSelectedJSElement();
						document.executeJavaScript("function getDisColor(){return selectedOATSWebDomElement.currentStyle.color;}");
						disabledColor = web.document(e1Browser).executeJsFunction("getDisColor"); */  
				 document.executeJavaScript("function getDisColor(){return window.getComputedStyle(document.getElementById('"+id+"').parentElement,null).getPropertyValue('color');}");
				 disabledColor = web.document(e1Browser).executeJsFunction("getDisColor");
				 info("disabledColor:"+disabledColor[0]);

				 if ((disabledLabelColor[0]!=null)&&(disabledColor[0]!=null)){
					 //info("in b if");
					 if ((sColor.equalsIgnoreCase("grey"))||(sColor.equalsIgnoreCase("gray"))){
						 if ((disabledLabelColor[0].equalsIgnoreCase("#b9babc") || disabledLabelColor[0].equalsIgnoreCase("rgb(185, 186, 188)"))&&((disabledColor[0].equalsIgnoreCase("#333333"))||disabledColor[0].equalsIgnoreCase("rgb(51, 51, 51)"))){
							 info("validateRadioButtonBGColor Passed: Expected and Actual Color Matched");
						 }else{
							 CapturePage();
							 testFailure("validateRadioButtonBGColor Failed:Expected color is: "+sColor+" but actual label color is: "+disabledLabelColor[0]+" and actual color is: "+disabledColor[0]);
						 }
					 }
					 else{
						 CapturePage();
						 testFailure("validateRadioButtonBGColor Failed:Expected color is: "+sColor+" but actual label color is: "+disabledLabelColor[0]+" and actual color is: "+disabledColor[0]);
					 }
				 }
				 else{//info("in else");
					 CapturePage();
					 testFailure("validateRadioButtonBGColor:Color is null");
				 }
			 }
			 else{
				 CapturePage();                      
				 testFailure("validateRadioButtonBGColor Failed: "+type+" \'"+eleName+"\' with "+attr+" "+id+" is not disabled");   
			 }
		 }catch(NullPointerException e){info("NPE is caught");}
		 info("Finished:Function validateRadioButtonBGColor ");
	 }

	 /************************************************************************************************************
	  * Function: validateScrollbarExists
	  * Description: This function will check for the presence of mentioned Scrollbar(Horizontal/Vertical) in the given grid
	  * Created By: Megha K
	  * Date: Sep 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param iIndex :Index of the grid in the webpage starting from 0.
	  * 		@param scrollbarType :Type of the Scrollbar(Horizontal/Vertical) which is expected to be present.
	  * Returns: 
	  * 		@return Nil
	  * Examples: 1. validateScrollbarExists(0,Horizontal)
	  * 		  2. validateScrollbarExists(2,Vertical)
	  * **********************************************************************************************************
	  */

	 public void validateScrollbarExists(int gridIndex,String scrollbarType)throws Exception{
		 info("Starting of validateScrollbarExists method");
		 incrementValidationCount(1);
		 String present=null;
		 String gridId=null;
		 checkFrame();
		 if (!bDB) {
			 gridId=getGridObjReference(gridIndex);
			 if(gridId!=null){
				 present=web.document(e1Browser).executeJsFunction("isScrollbarEnabled",gridId,scrollbarType)[0];
			 }
		 }else{
			 gridId=getDataBrowserGridObjReference();
			 if (gridId != null) {
				 present=web.document(sDBBrowser).executeJsFunction("isScrollbarEnabled",gridId,scrollbarType)[0];
			 }
		 }
		 if(present.equalsIgnoreCase("true")){
			 info(scrollbarType+ " Scrollbar is present");
		 }else{
			 CapturePage();
			 testFailure(scrollbarType+ " Scrollbar is not present");
		 }

		 info("Ending of validateScrollbarExists method");
	 }

	 /************************************************************************************************************
	  * Function: validateTabActive 
	  * Description: This function is used to validate if a tab is active/selected or not. 
	  * Created By: Yashin Bidar
	  * Modified By: Ghulam Quadir 
	  * Date: Aug 2016 To be incorporated: Nil Input
	  * Parameters:
	  * 
	  * @param iIndex :visual index of the tab
	  * @param sLink  : Name of the tab
	  * @param sStatus : True when tab is selected/active. False when tab is not selected/active. Returns:
	  * @return Nil 
	  *	Example: validateTabActive(0,"Value Test",true)//When tab is active
	  *           validateTabActive(0,"Value Test",false)//When tab is not active 
	  *         ***********************************************************
	  *         ***********************************************
	  */
	 // Written by yashin. Modified by me.
	 public void validateTabActive(int iIndex, String sLink, boolean sStatus) throws Exception {
		 info("Starting function validateTabActive");
		 checkFrame();
		 boolean activeLinkFlag=false;
		 if (docIndex == null) {
			 getDocIndex();
		 }
		 DOMElement ele = null;
		 String clssName = null;
		 if (web.exists(e1Browser + "/web:a[@text='" + sLink + "'][" + iIndex + "]",3)) 
		 {
			 ele = web.element(e1Browser + "/web:a[@text='" + sLink + "'][" + iIndex + "]");
			 activeLinkFlag=true;
		 }
		 else if (web.exists(e1Browser + "/web:span[@text='" + sLink + "'][" + iIndex + "]",3)) 
		 {

			 ele = web.element(e1Browser + "/web:span[@text='" + sLink + "'][" + iIndex + "]");

		 } 
		 else 
		 {
			 CapturePage();
			 testFailure("Function validateTabActive Failed: Tab " + sLink + " with index " + iIndex	+ " is not present on the page");
			 valCount += 1;
			 return;
		 }

		 clssName = ele.getAttribute("className");

		 if(clssName!=null)
		 {
			 if ((sStatus == true) && (clssName.equalsIgnoreCase("ActiveTabLink"))) {
				 info("Function validateTabActive Passed:Tab " + sLink + " is selected and active on the page.");
			 } else if ((sStatus == true) && (clssName==null||!clssName.equalsIgnoreCase("ActiveTabLink"))) {
				 CapturePage();
				 testFailure("Function validateTabActive Failed:Tab " + sLink + " is not selected on the page");
			 }
			 if ((sStatus == false) && (clssName==null||!clssName.equalsIgnoreCase("ActiveTabLink"))) {
				 info("Function validateTabActive Passed:Tab " + sLink + " is not selected and active on the page.");
			 } else if ((sStatus == false) && (clssName.equalsIgnoreCase("ActiveTabLink"))) {
				 CapturePage();
				 testFailure("Function validateTabActive Failed:Tab " + sLink + " is selected and active on the page");
			 }
		 }
		 else
		 {
			 if(sStatus)
			 {
				 if(activeLinkFlag)
				 {
					 CapturePage();
					 testFailure("Function validateTabActive Failed:Link " + sLink + " is active on the page");
				 }
				 else
				 {
					 info("Function validateTabActive Passed:Link " + sLink + " is selected and inactive on the page.");
				 }
			 }
			 else
			 {
				 if(!activeLinkFlag)
				 {
					 CapturePage();
					 testFailure("Function validateTabActive Failed:Link " + sLink + " is active on the page");
				 }
				 else
				 {
					 info("Function validateTabActive Passed:Link " + sLink + " is  inactive on the page.");
				 }
			 }

		 }

		 valCount += 1;
	 }

	 /************************************************************************************************************
	  * Function: validateTreeNodeLevels
	  * Description: This function validates whether the levels of nodes in a tree matches the argument passed.
	  * Created By: Anusha Bonam
	  * Date: August 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *                      @param iIndex : index of the Tree starting from 0
										 @param colIndex : column index starting from 0 (Generally 1)
										 @param sValues:  Level_node value pairs passed with ‘;’(semicolon) as separator
										 (L0_RootNode;L1_node1;L2_node1Child1;L1_node2).

	  * Returns: 
	  *                      @return Nil
	  * Example: validateTreeNodeLevels(0,1,"L0_Test Tree;L1_1;L1_2;L2_3");
	  * **********************************************************************************************************
	  */
	 public void validateTreeNodeLevels(@Arg("iIndex") int iIndex, @Arg("colIndex") int colIndex,@Arg("sValues") String sValues) throws Exception {
		 info("Starting:Function validateTreeNodeLevels");
		 checkFrame();
		 if(docIndex==null){
			 getDocIndex();
		 } 
		 int rowCount = 0, colCount = 0;
		 String strConcatTreeNode=null;
		 String cellValue="";
		 ArrayList<String> strArrayListGetCelvalue=new ArrayList<String>();
		 int imgIndex = 0;
		 String imgAltPrprty;
		 String[] imgAltProSplit = null;
		 int pc=0;

		 //splitting the tree nodes passed by ;
		 String param[]=(Pattern.compile("[;]").split(sValues));
		 valCount=param.length+valCount;

		 DOMTable treeId = getTreeGrid(iIndex);
		 // Checking if tree exists or not
		 if(treeId!=null)  { 
			 //info("Treegrid with index "+iIndex+" found");
			 //getting the count of rows and columns in the tree
			 rowCount = treeId.getRowCount();
			 colCount = treeId.getColumnCount();
			 if((colIndex<0)||(colIndex>(colCount-1)))
			 {
				 CapturePage();
				 testFailure("Column doesnot exists");
				 return;
			 }
			 //to check whether the atleast one tree node is added or not
			 if(rowCount < 1){
				 CapturePage();
				 testFailure("No nodes found in the tree. 0 nodes are present");
				 return;
			 }
			 else{

				 for(int i = 0; i < rowCount; i++){
					 //getting the cell value
					 cellValue = treeId.getCell(i+1, colIndex + 1);
					 cellValue = cellValue.replaceAll("  "," ");
					 info("value="+cellValue);
					 List<DOMElement> rows = treeId.getElementsByTagName("tr");
					 DOMElement row = rows.get(i);
					 List<DOMElement> columns = row.getElementsByTagName("td");
					 DOMElement column = columns.get(colIndex);
					 List<DOMElement> images  = column.getElementsByTagName("img");
					 if(images.size()>0) {
						 imgIndex = (images.size()-2);
						 DOMElement img = images.get(imgIndex);
						 imgAltPrprty=img.getAttribute("alt");
						 if(imgAltPrprty.trim().contains("Root Node")){
							 strArrayListGetCelvalue.add("L0_"+(cellValue.trim()));
						 }
						 else{
							 imgAltProSplit = (Pattern.compile("[:]").split(imgAltPrprty));
							 imgAltProSplit[1] = imgAltProSplit[1].trim();
							 strArrayListGetCelvalue.add("L"+imgAltProSplit[1]+"_"+(cellValue.trim()));
							 info("----strArrayListGetCelvalue---:"+strArrayListGetCelvalue);
						 }
					 }
					 else{
						 CapturePage();
						 testFailure("No images present");
					 }
					 if(cellValue==null){
						 CapturePage();
						 testFailure("Values in the Column passed for column index "+colIndex+" are null");
						 return;
					 }
				 }
				 Object getList[]=strArrayListGetCelvalue.toArray();
				 strConcatTreeNode="";
				 if(cellValue!=null){
					 for(int a=0;a<getList.length;a++){

						 if((param[pc].trim()).equalsIgnoreCase((String)getList[a].toString().trim())){
							 pc++;
							 if(a==0){
								 strConcatTreeNode=strConcatTreeNode.concat(((String)getList[a]).toString().trim());
							 }
							 else{
								 strConcatTreeNode=strConcatTreeNode.concat(";").concat(((String)getList[a]).toString().trim());
							 }
						 }
						 if((pc+"").equalsIgnoreCase((param.length)+"")){
							 if((sValues.trim()).equalsIgnoreCase(strConcatTreeNode.trim())){
								 info("validateTreeNodeLevels Passed: Order of the nodes " + strConcatTreeNode.trim() + " exists as expected");
							 }
							 //return;
							 break;
						 }

					 }//end 
					 if(pc != param.length){
						 CapturePage();
						 testFailure("validateTreeNodeLevels Failed:Order of the nodes doesn't match. Expected is: "+sValues.trim()+" Actual is: "+strArrayListGetCelvalue);
					 }
				 }
			 }

		 }else{
			 CapturePage();
			 testFailure("Tree with index "+iIndex+" not found");
		 }

		 info("Finished:Function validateTreeNodeLevels ");
	 }

	 /************************************************************************************************************
	  * Function: validateTreeRowExpandable
	  * Description: This function will validate whether the tree is expanded/collapsed.
	  * Created By: Anusha Bonam
	  * Date: August 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  *                      @param iIndex : index of the Tree starting from 0
										 @param rowIndex: row index starting from 0 
										 @param colIndex : column index starting from 0 (Generally 1)
										 @param sStatus:  true if expand image exists/false if collapse image exists
	  * Returns: 
	  *                      @return Nil
	  * Example: validateTreeRowExpandable(0,2,1,true);
	  * **********************************************************************************************************
	  */
	 public void validateTreeRowExpandable(@Arg("iIndex") int iIndex,@Arg("rowIndex") int rowIndex,@Arg("colIndex") int colIndex,@Arg("sStatus") boolean sStatus) throws Exception {
		 info("Starting:Function validateTreeRowExpandable");
		 valCount = valCount+1;
		 checkFrame();
		 if(docIndex==null){
			 getDocIndex();
		 } 
		 //getting the tree id 
		 DOMTable treeId = getTreeGrid(iIndex); 
		 boolean flag = false;
		 if(treeId!=null)  { 
			 //info("Treegrid with index "+iIndex+" found");
			 //getting the rows				
			 List<DOMElement> rows = treeId.getElementsByTagName("tr");
			 int rowCount = treeId.getRowCount();

			 if((rowIndex>=0)&&(rowIndex < (rowCount))){
				 //get the particular row passed through rowindex
				 DOMElement row = rows.get(rowIndex);
				 //checking for the columns for that particular row
				 List<DOMElement> columns = row.getElementsByTagName("td");
				 if((colIndex<0)||(colIndex>(columns.size()-1)))
				 {
					 CapturePage();	
					 testFailure("Column does not exist");
					 // valCount = valCount+1;
					 return;
				 }
				 if((colIndex>=0)&&(colIndex < (columns.size()))) {
					 DOMElement column = columns.get(colIndex);
					 //checking for the images present in that particular column
					 List<DOMElement> images  = column.getElementsByTagName("img");

					 if(images.size()>0) {
						 int imgIndex = (images.size()-2);
						 DOMElement img = images.get(imgIndex);
						 boolean aStatus = false;
						 //getting the alt property of the image
						 String imgAltPrprty=img.getAttribute("alt");
						 String[] imgAltProSplit = (Pattern.compile("[(]").split(imgAltPrprty));
						 imgAltProSplit[0] = imgAltProSplit[0].trim();
						 if(rowIndex==0){
							 if((imgAltProSplit[0].trim().contains("Expand"))){
								 aStatus = false;
							 }
							 else{
								 aStatus = true;
							 }
						 }
						 else if((!(imgAltProSplit[0].trim().contains("Expand")))&&(!(imgAltProSplit[0].trim().contains("Collapse")))){
							 CapturePage();	
							 testFailure("validateTreeRowExpandable Failed: Node is not having Expand/Collapse image");
							 //valCount = valCount+1;
							 return;
						 }
						 else{
							 if((imgAltProSplit[0].trim().equalsIgnoreCase("Expand"))){
								 aStatus = true;
							 }
							 else{
								 aStatus = false;
							 }
						 }
						 //checking the alt property passed and the alt property captured
						 if(aStatus == sStatus){
							 if(sStatus){
								 info("validateTreeRowExpandable Passed: Node is expandable. Expand image exists");
							 }
							 else{
								 info("validateTreeRowExpandable Passed: Node is contractable. Collapse image exists");
							 }
						 }	
						 else {
							 if(sStatus){

								 CapturePage();	
								 testFailure("validateTreeRowExpandable Failed: Node is contractable. Expected is Expand. Actual Image is : "+imgAltProSplit[0]);
							 }
							 else{
								 CapturePage();	
								 testFailure("validateTreeRowExpandable Failed: Node is expandable. Expected is Collapse. Actual Image is : "+imgAltProSplit[0]);
							 }
						 }
					 }
					 else{
						 CapturePage();	
						 testFailure("No images present");
					 }
				 }
			 }else{
				 CapturePage();	
				 testFailure("No Row with row index "+rowIndex+" found");
			 }
		 }else{
			 CapturePage();	
			 testFailure("Tree with index "+iIndex+" not found");
		 }

		 //info("valCount ="+ valCount);
		 info("Finished:Function validateTreeRowExpandable ");
	 }

	 /************************************************************************************************************
	  * Function: validateWebListItemPresent
	  * Description: This function is used to validate presence of given weblistitem in weblist
	  * Created By: Megha K
	  * Date: July 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param Iid : Id of the WebList on the page.
	  * 		@param webListItem: Item to be validated in the WebList.
				@param present:Item is expected to be present or not(True or False)
	  * Returns: 
	  * 		@return Nil
	  * Examples: 1. validateWebListItemPresent(mobjSel.0_76,Text1,False)
	  * 	     2. validateWebListItemPresent(mobjSel.0_76,TESTA.BMP,True)
	  * **********************************************************************************************************
	  */

	 public void validateWebListItemPresent(@Arg("Iid") String Iid, @Arg("webListItem")String webListItem, @Arg("present") boolean present) throws Exception{
		 info("Starting of Function validateWebListItemPresent");
		 checkFrame();
		 incrementValidationCount(1);
		 String bro;
		 if(isModalForm==true){
			 bro=e1Browser;
		 }else{
			 bro="/";
		 }
		 boolean itemPresent=false;

		 if (web.exists(bro+"/web:select[( @id='"+Iid+"')]",10)){
			 String isDisabled = web.selectBox(bro+"/web:select[( @id='"+Iid+"')]").getAttribute("disabled");
			 if(isDisabled.equalsIgnoreCase("True")) {
				 CapturePage();
				 testFailure("validateWebListItemPresent Failed: Web List with the Id "+Iid+" is not Enabled in the page");
			 }else{
				 List<DOMElement> allItems=web.selectBox(bro+"/web:select[(@id='"+Iid+"')]").getOptions();
				 info("weblist size="+allItems.size());

				 for(DOMElement itm : allItems) {
					 try{
						 String txt=itm.getAttribute("text");
						 if(txt.trim().equals(webListItem.trim())) {
							 itemPresent=true;
							 break;
						 }
					 }catch(Exception e){
						 e.printStackTrace();
					 }
				 }
				 if(present==true){
					 if(itemPresent==true){
						 info("validateWebListItemPresent Passed: item " +webListItem+ " is present in the weblist");
					 }else{
						 CapturePage();
						 testFailure("validateWebListItemPresent Failed: item " +webListItem+ " is not present in the weblist");
					 }
				 }else{
					 if(itemPresent==false){
						 info("validateWebListItemPresent Passed: item " +webListItem+ " is not present in the weblist");
					 }else{
						 CapturePage();
						 testFailure("validateWebListItemPresent Failed: item " +webListItem+ " is present in the weblist");
					 }
				 }
			 }
		 }else {
			 CapturePage();
			 testFailure("validateWebListItemPresent Failed: Web List with the Id "+Iid+" is not available in the page");
		 } 
		 info("Ending of Function validateWebListItemPresent");
	 }
	
	 /************************************************************************************************************
	  * Function: validateWebListPresent
	  * Description: This function is used to validate presence of weblist with given id.
	  * Created By: Megha K
	  * Date: Aug 2016
	  * To be incorporated: Nil
	  * Input Parameters: 
	  * 		@param Iid : Id of the WebList on the page.
	  *      @param present : list is expected to be present or not(True or False). 
	  * Returns: 
	  * 		@return nil
	  * Example: validateWebListPresent(OLEQUEUE, True)
	  * **********************************************************************************************************
	  */

	 public void validateWebListPresent(@Arg("Iid") String Iid,@Arg("present")boolean present) throws Exception{
		 info("Starting of Function validateWebListPresent");
		 incrementValidationCount(1);
		 checkFrame();

		 String bro;
		 if(isModalForm==true){
			 bro=e1Browser;
		 }else{
			 bro="/";
		 }

		 if(present==true){
			 if (web.exists(bro+"/web:select[( @id='"+Iid+"')]",10)){
				 info("[validateWebListPresent] Web List with ID "+Iid+ " present in the page");
			 }else
			 {
				 CapturePage();
				 testFailure("Web List with the Id "+Iid+" is not present in the page");
			 }
		 }
		 else{
			 if (!web.exists(bro+"/web:select[( @id='"+Iid+"')]",10)){
				 info("[validateWebListPresent] Web List with ID "+Iid+ " is not present in the page");
			 }else
			 {
				 CapturePage();
				 testFailure("Web List with the Id "+Iid+" is present in the page");
			 }
		 }

		 info("Ending of Function validateWebListPresent");
	 }




}
